import * as ApolloReactCommon from '@apollo/react-common'
import * as ApolloReactHooks from '@apollo/react-hooks'
/* DO NOT EDIT! This file is auto-generated by graphql-code-generator - see `codegen.yml` */
import gql from 'graphql-tag'
export type Maybe<T> = T | null

/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string
  String: string
  Boolean: boolean
  Int: number
  Float: number
  Cursor: any
  Datetime: string
  BigInt: any
  BigFloat: any
}

export type BigFloatFilter = {
  isNull?: Maybe<Scalars['Boolean']>
  equalTo?: Maybe<Scalars['BigFloat']>
  notEqualTo?: Maybe<Scalars['BigFloat']>
  distinctFrom?: Maybe<Scalars['BigFloat']>
  notDistinctFrom?: Maybe<Scalars['BigFloat']>
  in?: Maybe<Array<Scalars['BigFloat']>>
  notIn?: Maybe<Array<Scalars['BigFloat']>>
  lessThan?: Maybe<Scalars['BigFloat']>
  lessThanOrEqualTo?: Maybe<Scalars['BigFloat']>
  greaterThan?: Maybe<Scalars['BigFloat']>
  greaterThanOrEqualTo?: Maybe<Scalars['BigFloat']>
}

export type BigIntFilter = {
  isNull?: Maybe<Scalars['Boolean']>
  equalTo?: Maybe<Scalars['BigInt']>
  notEqualTo?: Maybe<Scalars['BigInt']>
  distinctFrom?: Maybe<Scalars['BigInt']>
  notDistinctFrom?: Maybe<Scalars['BigInt']>
  in?: Maybe<Array<Scalars['BigInt']>>
  notIn?: Maybe<Array<Scalars['BigInt']>>
  lessThan?: Maybe<Scalars['BigInt']>
  lessThanOrEqualTo?: Maybe<Scalars['BigInt']>
  greaterThan?: Maybe<Scalars['BigInt']>
  greaterThanOrEqualTo?: Maybe<Scalars['BigInt']>
}

export type BooleanFilter = {
  isNull?: Maybe<Scalars['Boolean']>
  equalTo?: Maybe<Scalars['Boolean']>
  notEqualTo?: Maybe<Scalars['Boolean']>
  distinctFrom?: Maybe<Scalars['Boolean']>
  notDistinctFrom?: Maybe<Scalars['Boolean']>
  in?: Maybe<Array<Scalars['Boolean']>>
  notIn?: Maybe<Array<Scalars['Boolean']>>
  lessThan?: Maybe<Scalars['Boolean']>
  lessThanOrEqualTo?: Maybe<Scalars['Boolean']>
  greaterThan?: Maybe<Scalars['Boolean']>
  greaterThanOrEqualTo?: Maybe<Scalars['Boolean']>
}

export type CreateGameAssignmentInput = {
  clientMutationId?: Maybe<Scalars['String']>
  gameAssignment: GameAssignmentInput
}

export type CreateGameAssignmentPayload = {
  __typename: 'CreateGameAssignmentPayload'
  clientMutationId?: Maybe<Scalars['String']>
  gameAssignment?: Maybe<GameAssignment>
  query?: Maybe<Query>
  member?: Maybe<Membership>
  game?: Maybe<Game>
  gameAssignmentEdge?: Maybe<GameAssignmentsEdge>
}

export type CreateGameAssignmentPayloadGameAssignmentEdgeArgs = {
  orderBy?: Maybe<Array<GameAssignmentsOrderBy>>
}

export type CreateGameChoiceInput = {
  clientMutationId?: Maybe<Scalars['String']>
  gameChoice: GameChoiceInput
}

export type CreateGameChoicePayload = {
  __typename: 'CreateGameChoicePayload'
  clientMutationId?: Maybe<Scalars['String']>
  gameChoice?: Maybe<GameChoice>
  query?: Maybe<Query>
  game?: Maybe<Game>
  member?: Maybe<Membership>
  slot?: Maybe<Slot>
  gameChoiceEdge?: Maybe<GameChoicesEdge>
}

export type CreateGameChoicePayloadGameChoiceEdgeArgs = {
  orderBy?: Maybe<Array<GameChoicesOrderBy>>
}

export type CreateGameInput = {
  clientMutationId?: Maybe<Scalars['String']>
  game: GameInput
}

export type CreateGamePayload = {
  __typename: 'CreateGamePayload'
  clientMutationId?: Maybe<Scalars['String']>
  game?: Maybe<Game>
  query?: Maybe<Query>
  room?: Maybe<Room>
  slot?: Maybe<Slot>
  author?: Maybe<User>
  gameEdge?: Maybe<GamesEdge>
}

export type CreateGamePayloadGameEdgeArgs = {
  orderBy?: Maybe<Array<GamesOrderBy>>
}

export type CreateGameSubmissionInput = {
  clientMutationId?: Maybe<Scalars['String']>
  gameSubmission: GameSubmissionInput
}

export type CreateGameSubmissionPayload = {
  __typename: 'CreateGameSubmissionPayload'
  clientMutationId?: Maybe<Scalars['String']>
  gameSubmission?: Maybe<GameSubmission>
  query?: Maybe<Query>
  member?: Maybe<Membership>
  gameSubmissionEdge?: Maybe<GameSubmissionsEdge>
}

export type CreateGameSubmissionPayloadGameSubmissionEdgeArgs = {
  orderBy?: Maybe<Array<GameSubmissionsOrderBy>>
}

export type CreateHotelRoomDetailInput = {
  clientMutationId?: Maybe<Scalars['String']>
  hotelRoomDetail: HotelRoomDetailInput
}

export type CreateHotelRoomDetailPayload = {
  __typename: 'CreateHotelRoomDetailPayload'
  clientMutationId?: Maybe<Scalars['String']>
  hotelRoomDetail?: Maybe<HotelRoomDetail>
  query?: Maybe<Query>
  hotelRoomDetailEdge?: Maybe<HotelRoomDetailsEdge>
}

export type CreateHotelRoomDetailPayloadHotelRoomDetailEdgeArgs = {
  orderBy?: Maybe<Array<HotelRoomDetailsOrderBy>>
}

export type CreateHotelRoomInput = {
  clientMutationId?: Maybe<Scalars['String']>
  hotelRoom: HotelRoomInput
}

export type CreateHotelRoomPayload = {
  __typename: 'CreateHotelRoomPayload'
  clientMutationId?: Maybe<Scalars['String']>
  hotelRoom?: Maybe<HotelRoom>
  query?: Maybe<Query>
  hotelRoomEdge?: Maybe<HotelRoomsEdge>
}

export type CreateHotelRoomPayloadHotelRoomEdgeArgs = {
  orderBy?: Maybe<Array<HotelRoomsOrderBy>>
}

export type CreateLookupInput = {
  clientMutationId?: Maybe<Scalars['String']>
  lookup: LookupInput
}

export type CreateLookupPayload = {
  __typename: 'CreateLookupPayload'
  clientMutationId?: Maybe<Scalars['String']>
  lookup?: Maybe<Lookup>
  query?: Maybe<Query>
  lookupEdge?: Maybe<LookupsEdge>
}

export type CreateLookupPayloadLookupEdgeArgs = {
  orderBy?: Maybe<Array<LookupsOrderBy>>
}

export type CreateLookupValueInput = {
  clientMutationId?: Maybe<Scalars['String']>
  lookupValue: LookupValueInput
}

export type CreateLookupValuePayload = {
  __typename: 'CreateLookupValuePayload'
  clientMutationId?: Maybe<Scalars['String']>
  lookupValue?: Maybe<LookupValue>
  query?: Maybe<Query>
  lookup?: Maybe<Lookup>
  lookupValueEdge?: Maybe<LookupValuesEdge>
}

export type CreateLookupValuePayloadLookupValueEdgeArgs = {
  orderBy?: Maybe<Array<LookupValuesOrderBy>>
}

export type CreateMemberHotelRoomAssignmentInput = {
  clientMutationId?: Maybe<Scalars['String']>
  memberHotelRoomAssignment: MemberHotelRoomAssignmentInput
}

export type CreateMemberHotelRoomAssignmentPayload = {
  __typename: 'CreateMemberHotelRoomAssignmentPayload'
  clientMutationId?: Maybe<Scalars['String']>
  memberHotelRoomAssignment?: Maybe<MemberHotelRoomAssignment>
  query?: Maybe<Query>
  member?: Maybe<Membership>
  hotelRoom?: Maybe<HotelRoomDetail>
  memberHotelRoomAssignmentEdge?: Maybe<MemberHotelRoomAssignmentsEdge>
}

export type CreateMemberHotelRoomAssignmentPayloadMemberHotelRoomAssignmentEdgeArgs = {
  orderBy?: Maybe<Array<MemberHotelRoomAssignmentsOrderBy>>
}

export type CreateMembershipInput = {
  clientMutationId?: Maybe<Scalars['String']>
  membership: MembershipInput
}

export type CreateMembershipPayload = {
  __typename: 'CreateMembershipPayload'
  clientMutationId?: Maybe<Scalars['String']>
  membership?: Maybe<Membership>
  query?: Maybe<Query>
  hotelRoom?: Maybe<HotelRoom>
  user?: Maybe<User>
  membershipEdge?: Maybe<MembershipsEdge>
}

export type CreateMembershipPayloadMembershipEdgeArgs = {
  orderBy?: Maybe<Array<MembershipsOrderBy>>
}

export type CreateProfileInput = {
  clientMutationId?: Maybe<Scalars['String']>
  profile: ProfileInput
}

export type CreateProfilePayload = {
  __typename: 'CreateProfilePayload'
  clientMutationId?: Maybe<Scalars['String']>
  profile?: Maybe<Profile>
  query?: Maybe<Query>
  profileEdge?: Maybe<ProfilesEdge>
}

export type CreateProfilePayloadProfileEdgeArgs = {
  orderBy?: Maybe<Array<ProfilesOrderBy>>
}

export type CreateRegistrationCodeInput = {
  clientMutationId?: Maybe<Scalars['String']>
  registrationCode: RegistrationCodeInput
}

export type CreateRegistrationCodePayload = {
  __typename: 'CreateRegistrationCodePayload'
  clientMutationId?: Maybe<Scalars['String']>
  registrationCode?: Maybe<RegistrationCode>
  query?: Maybe<Query>
  registrationCodeEdge?: Maybe<RegistrationCodesEdge>
}

export type CreateRegistrationCodePayloadRegistrationCodeEdgeArgs = {
  orderBy?: Maybe<Array<RegistrationCodesOrderBy>>
}

export type CreateRoleInput = {
  clientMutationId?: Maybe<Scalars['String']>
  role: RoleInput
}

export type CreateRolePayload = {
  __typename: 'CreateRolePayload'
  clientMutationId?: Maybe<Scalars['String']>
  role?: Maybe<Role>
  query?: Maybe<Query>
  roleEdge?: Maybe<RolesEdge>
}

export type CreateRolePayloadRoleEdgeArgs = {
  orderBy?: Maybe<Array<RolesOrderBy>>
}

export type CreateRoomInput = {
  clientMutationId?: Maybe<Scalars['String']>
  room: RoomInput
}

export type CreateRoomPayload = {
  __typename: 'CreateRoomPayload'
  clientMutationId?: Maybe<Scalars['String']>
  room?: Maybe<Room>
  query?: Maybe<Query>
  roomEdge?: Maybe<RoomsEdge>
}

export type CreateRoomPayloadRoomEdgeArgs = {
  orderBy?: Maybe<Array<RoomsOrderBy>>
}

export type CreateSettingInput = {
  clientMutationId?: Maybe<Scalars['String']>
  setting: SettingInput
}

export type CreateSettingPayload = {
  __typename: 'CreateSettingPayload'
  clientMutationId?: Maybe<Scalars['String']>
  setting?: Maybe<Setting>
  query?: Maybe<Query>
  settingEdge?: Maybe<SettingsEdge>
}

export type CreateSettingPayloadSettingEdgeArgs = {
  orderBy?: Maybe<Array<SettingsOrderBy>>
}

export type CreateShirtOrderInput = {
  clientMutationId?: Maybe<Scalars['String']>
  shirtOrder: ShirtOrderInput
}

export type CreateShirtOrderItemInput = {
  clientMutationId?: Maybe<Scalars['String']>
  shirtOrderItem: ShirtOrderItemInput
}

export type CreateShirtOrderItemPayload = {
  __typename: 'CreateShirtOrderItemPayload'
  clientMutationId?: Maybe<Scalars['String']>
  shirtOrderItem?: Maybe<ShirtOrderItem>
  query?: Maybe<Query>
  order?: Maybe<ShirtOrder>
  shirtOrderItemEdge?: Maybe<ShirtOrderItemsEdge>
}

export type CreateShirtOrderItemPayloadShirtOrderItemEdgeArgs = {
  orderBy?: Maybe<Array<ShirtOrderItemsOrderBy>>
}

export type CreateShirtOrderPayload = {
  __typename: 'CreateShirtOrderPayload'
  clientMutationId?: Maybe<Scalars['String']>
  shirtOrder?: Maybe<ShirtOrder>
  query?: Maybe<Query>
  user?: Maybe<User>
  shirtOrderEdge?: Maybe<ShirtOrdersEdge>
}

export type CreateShirtOrderPayloadShirtOrderEdgeArgs = {
  orderBy?: Maybe<Array<ShirtOrdersOrderBy>>
}

export type CreateSlotInput = {
  clientMutationId?: Maybe<Scalars['String']>
  slot: SlotInput
}

export type CreateSlotPayload = {
  __typename: 'CreateSlotPayload'
  clientMutationId?: Maybe<Scalars['String']>
  slot?: Maybe<Slot>
  query?: Maybe<Query>
  slotEdge?: Maybe<SlotsEdge>
}

export type CreateSlotPayloadSlotEdgeArgs = {
  orderBy?: Maybe<Array<SlotsOrderBy>>
}

export type CreateTokenInput = {
  clientMutationId?: Maybe<Scalars['String']>
  token: TokenInput
}

export type CreateTokenPayload = {
  __typename: 'CreateTokenPayload'
  clientMutationId?: Maybe<Scalars['String']>
  token?: Maybe<Token>
  query?: Maybe<Query>
  user?: Maybe<User>
  tokenEdge?: Maybe<TokensEdge>
}

export type CreateTokenPayloadTokenEdgeArgs = {
  orderBy?: Maybe<Array<TokensOrderBy>>
}

export type CreateUserInput = {
  clientMutationId?: Maybe<Scalars['String']>
  user: UserInput
}

export type CreateUserPayload = {
  __typename: 'CreateUserPayload'
  clientMutationId?: Maybe<Scalars['String']>
  user?: Maybe<User>
  query?: Maybe<Query>
  profile?: Maybe<Profile>
  userEdge?: Maybe<UsersEdge>
}

export type CreateUserPayloadUserEdgeArgs = {
  orderBy?: Maybe<Array<UsersOrderBy>>
}

export type CreateUserRoleInput = {
  clientMutationId?: Maybe<Scalars['String']>
  userRole: UserRoleInput
}

export type CreateUserRolePayload = {
  __typename: 'CreateUserRolePayload'
  clientMutationId?: Maybe<Scalars['String']>
  userRole?: Maybe<UserRole>
  query?: Maybe<Query>
  role?: Maybe<Role>
  user?: Maybe<User>
  userRoleEdge?: Maybe<UserRolesEdge>
}

export type CreateUserRolePayloadUserRoleEdgeArgs = {
  orderBy?: Maybe<Array<UserRolesOrderBy>>
}

export type DatetimeFilter = {
  isNull?: Maybe<Scalars['Boolean']>
  equalTo?: Maybe<Scalars['Datetime']>
  notEqualTo?: Maybe<Scalars['Datetime']>
  distinctFrom?: Maybe<Scalars['Datetime']>
  notDistinctFrom?: Maybe<Scalars['Datetime']>
  in?: Maybe<Array<Scalars['Datetime']>>
  notIn?: Maybe<Array<Scalars['Datetime']>>
  lessThan?: Maybe<Scalars['Datetime']>
  lessThanOrEqualTo?: Maybe<Scalars['Datetime']>
  greaterThan?: Maybe<Scalars['Datetime']>
  greaterThanOrEqualTo?: Maybe<Scalars['Datetime']>
}

export type DeleteGameAssignmentByNodeIdInput = {
  clientMutationId?: Maybe<Scalars['String']>
  nodeId: Scalars['ID']
}

export type DeleteGameAssignmentInput = {
  clientMutationId?: Maybe<Scalars['String']>
  memberId: Scalars['Int']
  gameId: Scalars['Int']
  gm: Scalars['Int']
}

export type DeleteGameAssignmentPayload = {
  __typename: 'DeleteGameAssignmentPayload'
  clientMutationId?: Maybe<Scalars['String']>
  gameAssignment?: Maybe<GameAssignment>
  deletedGameAssignmentNodeId?: Maybe<Scalars['ID']>
  query?: Maybe<Query>
  member?: Maybe<Membership>
  game?: Maybe<Game>
  gameAssignmentEdge?: Maybe<GameAssignmentsEdge>
}

export type DeleteGameAssignmentPayloadGameAssignmentEdgeArgs = {
  orderBy?: Maybe<Array<GameAssignmentsOrderBy>>
}

export type DeleteGameByNodeIdInput = {
  clientMutationId?: Maybe<Scalars['String']>
  nodeId: Scalars['ID']
}

export type DeleteGameChoiceByNodeIdInput = {
  clientMutationId?: Maybe<Scalars['String']>
  nodeId: Scalars['ID']
}

export type DeleteGameChoiceInput = {
  clientMutationId?: Maybe<Scalars['String']>
  id: Scalars['Int']
}

export type DeleteGameChoicePayload = {
  __typename: 'DeleteGameChoicePayload'
  clientMutationId?: Maybe<Scalars['String']>
  gameChoice?: Maybe<GameChoice>
  deletedGameChoiceNodeId?: Maybe<Scalars['ID']>
  query?: Maybe<Query>
  game?: Maybe<Game>
  member?: Maybe<Membership>
  slot?: Maybe<Slot>
  gameChoiceEdge?: Maybe<GameChoicesEdge>
}

export type DeleteGameChoicePayloadGameChoiceEdgeArgs = {
  orderBy?: Maybe<Array<GameChoicesOrderBy>>
}

export type DeleteGameInput = {
  clientMutationId?: Maybe<Scalars['String']>
  id: Scalars['Int']
}

export type DeleteGamePayload = {
  __typename: 'DeleteGamePayload'
  clientMutationId?: Maybe<Scalars['String']>
  game?: Maybe<Game>
  deletedGameNodeId?: Maybe<Scalars['ID']>
  query?: Maybe<Query>
  room?: Maybe<Room>
  slot?: Maybe<Slot>
  author?: Maybe<User>
  gameEdge?: Maybe<GamesEdge>
}

export type DeleteGamePayloadGameEdgeArgs = {
  orderBy?: Maybe<Array<GamesOrderBy>>
}

export type DeleteGameSubmissionByNodeIdInput = {
  clientMutationId?: Maybe<Scalars['String']>
  nodeId: Scalars['ID']
}

export type DeleteGameSubmissionInput = {
  clientMutationId?: Maybe<Scalars['String']>
  id: Scalars['Int']
}

export type DeleteGameSubmissionPayload = {
  __typename: 'DeleteGameSubmissionPayload'
  clientMutationId?: Maybe<Scalars['String']>
  gameSubmission?: Maybe<GameSubmission>
  deletedGameSubmissionNodeId?: Maybe<Scalars['ID']>
  query?: Maybe<Query>
  member?: Maybe<Membership>
  gameSubmissionEdge?: Maybe<GameSubmissionsEdge>
}

export type DeleteGameSubmissionPayloadGameSubmissionEdgeArgs = {
  orderBy?: Maybe<Array<GameSubmissionsOrderBy>>
}

export type DeleteHotelRoomByNodeIdInput = {
  clientMutationId?: Maybe<Scalars['String']>
  nodeId: Scalars['ID']
}

export type DeleteHotelRoomDetailByNodeIdInput = {
  clientMutationId?: Maybe<Scalars['String']>
  nodeId: Scalars['ID']
}

export type DeleteHotelRoomDetailInput = {
  clientMutationId?: Maybe<Scalars['String']>
  id: Scalars['BigInt']
}

export type DeleteHotelRoomDetailPayload = {
  __typename: 'DeleteHotelRoomDetailPayload'
  clientMutationId?: Maybe<Scalars['String']>
  hotelRoomDetail?: Maybe<HotelRoomDetail>
  deletedHotelRoomDetailNodeId?: Maybe<Scalars['ID']>
  query?: Maybe<Query>
  hotelRoomDetailEdge?: Maybe<HotelRoomDetailsEdge>
}

export type DeleteHotelRoomDetailPayloadHotelRoomDetailEdgeArgs = {
  orderBy?: Maybe<Array<HotelRoomDetailsOrderBy>>
}

export type DeleteHotelRoomInput = {
  clientMutationId?: Maybe<Scalars['String']>
  id: Scalars['Int']
}

export type DeleteHotelRoomPayload = {
  __typename: 'DeleteHotelRoomPayload'
  clientMutationId?: Maybe<Scalars['String']>
  hotelRoom?: Maybe<HotelRoom>
  deletedHotelRoomNodeId?: Maybe<Scalars['ID']>
  query?: Maybe<Query>
  hotelRoomEdge?: Maybe<HotelRoomsEdge>
}

export type DeleteHotelRoomPayloadHotelRoomEdgeArgs = {
  orderBy?: Maybe<Array<HotelRoomsOrderBy>>
}

export type DeleteLookupByNodeIdInput = {
  clientMutationId?: Maybe<Scalars['String']>
  nodeId: Scalars['ID']
}

export type DeleteLookupByRealmInput = {
  clientMutationId?: Maybe<Scalars['String']>
  realm: Scalars['String']
}

export type DeleteLookupInput = {
  clientMutationId?: Maybe<Scalars['String']>
  id: Scalars['Int']
}

export type DeleteLookupPayload = {
  __typename: 'DeleteLookupPayload'
  clientMutationId?: Maybe<Scalars['String']>
  lookup?: Maybe<Lookup>
  deletedLookupNodeId?: Maybe<Scalars['ID']>
  query?: Maybe<Query>
  lookupEdge?: Maybe<LookupsEdge>
}

export type DeleteLookupPayloadLookupEdgeArgs = {
  orderBy?: Maybe<Array<LookupsOrderBy>>
}

export type DeleteLookupValueByLookupIdAndCodeInput = {
  clientMutationId?: Maybe<Scalars['String']>
  lookupId: Scalars['Int']
  code: Scalars['String']
}

export type DeleteLookupValueByNodeIdInput = {
  clientMutationId?: Maybe<Scalars['String']>
  nodeId: Scalars['ID']
}

export type DeleteLookupValueInput = {
  clientMutationId?: Maybe<Scalars['String']>
  id: Scalars['Int']
}

export type DeleteLookupValuePayload = {
  __typename: 'DeleteLookupValuePayload'
  clientMutationId?: Maybe<Scalars['String']>
  lookupValue?: Maybe<LookupValue>
  deletedLookupValueNodeId?: Maybe<Scalars['ID']>
  query?: Maybe<Query>
  lookup?: Maybe<Lookup>
  lookupValueEdge?: Maybe<LookupValuesEdge>
}

export type DeleteLookupValuePayloadLookupValueEdgeArgs = {
  orderBy?: Maybe<Array<LookupValuesOrderBy>>
}

export type DeleteMemberHotelRoomAssignmentByNodeIdInput = {
  clientMutationId?: Maybe<Scalars['String']>
  nodeId: Scalars['ID']
}

export type DeleteMemberHotelRoomAssignmentInput = {
  clientMutationId?: Maybe<Scalars['String']>
  memberId: Scalars['BigInt']
  hotelRoomId: Scalars['BigInt']
}

export type DeleteMemberHotelRoomAssignmentPayload = {
  __typename: 'DeleteMemberHotelRoomAssignmentPayload'
  clientMutationId?: Maybe<Scalars['String']>
  memberHotelRoomAssignment?: Maybe<MemberHotelRoomAssignment>
  deletedMemberHotelRoomAssignmentNodeId?: Maybe<Scalars['ID']>
  query?: Maybe<Query>
  member?: Maybe<Membership>
  hotelRoom?: Maybe<HotelRoomDetail>
  memberHotelRoomAssignmentEdge?: Maybe<MemberHotelRoomAssignmentsEdge>
}

export type DeleteMemberHotelRoomAssignmentPayloadMemberHotelRoomAssignmentEdgeArgs = {
  orderBy?: Maybe<Array<MemberHotelRoomAssignmentsOrderBy>>
}

export type DeleteMembershipByNodeIdInput = {
  clientMutationId?: Maybe<Scalars['String']>
  nodeId: Scalars['ID']
}

export type DeleteMembershipInput = {
  clientMutationId?: Maybe<Scalars['String']>
  id: Scalars['Int']
}

export type DeleteMembershipPayload = {
  __typename: 'DeleteMembershipPayload'
  clientMutationId?: Maybe<Scalars['String']>
  membership?: Maybe<Membership>
  deletedMembershipNodeId?: Maybe<Scalars['ID']>
  query?: Maybe<Query>
  hotelRoom?: Maybe<HotelRoom>
  user?: Maybe<User>
  membershipEdge?: Maybe<MembershipsEdge>
}

export type DeleteMembershipPayloadMembershipEdgeArgs = {
  orderBy?: Maybe<Array<MembershipsOrderBy>>
}

export type DeleteProfileByEmailInput = {
  clientMutationId?: Maybe<Scalars['String']>
  email: Scalars['String']
}

export type DeleteProfileByNodeIdInput = {
  clientMutationId?: Maybe<Scalars['String']>
  nodeId: Scalars['ID']
}

export type DeleteProfileInput = {
  clientMutationId?: Maybe<Scalars['String']>
  id: Scalars['Int']
}

export type DeleteProfilePayload = {
  __typename: 'DeleteProfilePayload'
  clientMutationId?: Maybe<Scalars['String']>
  profile?: Maybe<Profile>
  deletedProfileNodeId?: Maybe<Scalars['ID']>
  query?: Maybe<Query>
  profileEdge?: Maybe<ProfilesEdge>
}

export type DeleteProfilePayloadProfileEdgeArgs = {
  orderBy?: Maybe<Array<ProfilesOrderBy>>
}

export type DeleteRegistrationCodeByNodeIdInput = {
  clientMutationId?: Maybe<Scalars['String']>
  nodeId: Scalars['ID']
}

export type DeleteRegistrationCodeInput = {
  clientMutationId?: Maybe<Scalars['String']>
  id: Scalars['Int']
}

export type DeleteRegistrationCodePayload = {
  __typename: 'DeleteRegistrationCodePayload'
  clientMutationId?: Maybe<Scalars['String']>
  registrationCode?: Maybe<RegistrationCode>
  deletedRegistrationCodeNodeId?: Maybe<Scalars['ID']>
  query?: Maybe<Query>
  registrationCodeEdge?: Maybe<RegistrationCodesEdge>
}

export type DeleteRegistrationCodePayloadRegistrationCodeEdgeArgs = {
  orderBy?: Maybe<Array<RegistrationCodesOrderBy>>
}

export type DeleteRoleByAuthorityInput = {
  clientMutationId?: Maybe<Scalars['String']>
  authority: Scalars['String']
}

export type DeleteRoleByNodeIdInput = {
  clientMutationId?: Maybe<Scalars['String']>
  nodeId: Scalars['ID']
}

export type DeleteRoleInput = {
  clientMutationId?: Maybe<Scalars['String']>
  id: Scalars['Int']
}

export type DeleteRolePayload = {
  __typename: 'DeleteRolePayload'
  clientMutationId?: Maybe<Scalars['String']>
  role?: Maybe<Role>
  deletedRoleNodeId?: Maybe<Scalars['ID']>
  query?: Maybe<Query>
  roleEdge?: Maybe<RolesEdge>
}

export type DeleteRolePayloadRoleEdgeArgs = {
  orderBy?: Maybe<Array<RolesOrderBy>>
}

export type DeleteRoomByNodeIdInput = {
  clientMutationId?: Maybe<Scalars['String']>
  nodeId: Scalars['ID']
}

export type DeleteRoomInput = {
  clientMutationId?: Maybe<Scalars['String']>
  id: Scalars['Int']
}

export type DeleteRoomPayload = {
  __typename: 'DeleteRoomPayload'
  clientMutationId?: Maybe<Scalars['String']>
  room?: Maybe<Room>
  deletedRoomNodeId?: Maybe<Scalars['ID']>
  query?: Maybe<Query>
  roomEdge?: Maybe<RoomsEdge>
}

export type DeleteRoomPayloadRoomEdgeArgs = {
  orderBy?: Maybe<Array<RoomsOrderBy>>
}

export type DeleteSettingByNodeIdInput = {
  clientMutationId?: Maybe<Scalars['String']>
  nodeId: Scalars['ID']
}

export type DeleteSettingInput = {
  clientMutationId?: Maybe<Scalars['String']>
  id: Scalars['Int']
}

export type DeleteSettingPayload = {
  __typename: 'DeleteSettingPayload'
  clientMutationId?: Maybe<Scalars['String']>
  setting?: Maybe<Setting>
  deletedSettingNodeId?: Maybe<Scalars['ID']>
  query?: Maybe<Query>
  settingEdge?: Maybe<SettingsEdge>
}

export type DeleteSettingPayloadSettingEdgeArgs = {
  orderBy?: Maybe<Array<SettingsOrderBy>>
}

export type DeleteShirtOrderByNodeIdInput = {
  clientMutationId?: Maybe<Scalars['String']>
  nodeId: Scalars['ID']
}

export type DeleteShirtOrderInput = {
  clientMutationId?: Maybe<Scalars['String']>
  id: Scalars['Int']
}

export type DeleteShirtOrderItemByNodeIdInput = {
  clientMutationId?: Maybe<Scalars['String']>
  nodeId: Scalars['ID']
}

export type DeleteShirtOrderItemInput = {
  clientMutationId?: Maybe<Scalars['String']>
  id: Scalars['Int']
}

export type DeleteShirtOrderItemPayload = {
  __typename: 'DeleteShirtOrderItemPayload'
  clientMutationId?: Maybe<Scalars['String']>
  shirtOrderItem?: Maybe<ShirtOrderItem>
  deletedShirtOrderItemNodeId?: Maybe<Scalars['ID']>
  query?: Maybe<Query>
  order?: Maybe<ShirtOrder>
  shirtOrderItemEdge?: Maybe<ShirtOrderItemsEdge>
}

export type DeleteShirtOrderItemPayloadShirtOrderItemEdgeArgs = {
  orderBy?: Maybe<Array<ShirtOrderItemsOrderBy>>
}

export type DeleteShirtOrderPayload = {
  __typename: 'DeleteShirtOrderPayload'
  clientMutationId?: Maybe<Scalars['String']>
  shirtOrder?: Maybe<ShirtOrder>
  deletedShirtOrderNodeId?: Maybe<Scalars['ID']>
  query?: Maybe<Query>
  user?: Maybe<User>
  shirtOrderEdge?: Maybe<ShirtOrdersEdge>
}

export type DeleteShirtOrderPayloadShirtOrderEdgeArgs = {
  orderBy?: Maybe<Array<ShirtOrdersOrderBy>>
}

export type DeleteSlotByNodeIdInput = {
  clientMutationId?: Maybe<Scalars['String']>
  nodeId: Scalars['ID']
}

export type DeleteSlotInput = {
  clientMutationId?: Maybe<Scalars['String']>
  id: Scalars['Int']
}

export type DeleteSlotPayload = {
  __typename: 'DeleteSlotPayload'
  clientMutationId?: Maybe<Scalars['String']>
  slot?: Maybe<Slot>
  deletedSlotNodeId?: Maybe<Scalars['ID']>
  query?: Maybe<Query>
  slotEdge?: Maybe<SlotsEdge>
}

export type DeleteSlotPayloadSlotEdgeArgs = {
  orderBy?: Maybe<Array<SlotsOrderBy>>
}

export type DeleteTokenByNodeIdInput = {
  clientMutationId?: Maybe<Scalars['String']>
  nodeId: Scalars['ID']
}

export type DeleteTokenInput = {
  clientMutationId?: Maybe<Scalars['String']>
  id: Scalars['Int']
}

export type DeleteTokenPayload = {
  __typename: 'DeleteTokenPayload'
  clientMutationId?: Maybe<Scalars['String']>
  token?: Maybe<Token>
  deletedTokenNodeId?: Maybe<Scalars['ID']>
  query?: Maybe<Query>
  user?: Maybe<User>
  tokenEdge?: Maybe<TokensEdge>
}

export type DeleteTokenPayloadTokenEdgeArgs = {
  orderBy?: Maybe<Array<TokensOrderBy>>
}

export type DeleteUserByNodeIdInput = {
  clientMutationId?: Maybe<Scalars['String']>
  nodeId: Scalars['ID']
}

export type DeleteUserByUsernameInput = {
  clientMutationId?: Maybe<Scalars['String']>
  username: Scalars['String']
}

export type DeleteUserInput = {
  clientMutationId?: Maybe<Scalars['String']>
  id: Scalars['Int']
}

export type DeleteUserPayload = {
  __typename: 'DeleteUserPayload'
  clientMutationId?: Maybe<Scalars['String']>
  user?: Maybe<User>
  deletedUserNodeId?: Maybe<Scalars['ID']>
  query?: Maybe<Query>
  profile?: Maybe<Profile>
  userEdge?: Maybe<UsersEdge>
}

export type DeleteUserPayloadUserEdgeArgs = {
  orderBy?: Maybe<Array<UsersOrderBy>>
}

export type DeleteUserRoleByNodeIdInput = {
  clientMutationId?: Maybe<Scalars['String']>
  nodeId: Scalars['ID']
}

export type DeleteUserRoleInput = {
  clientMutationId?: Maybe<Scalars['String']>
  roleId: Scalars['Int']
  userId: Scalars['Int']
}

export type DeleteUserRolePayload = {
  __typename: 'DeleteUserRolePayload'
  clientMutationId?: Maybe<Scalars['String']>
  userRole?: Maybe<UserRole>
  deletedUserRoleNodeId?: Maybe<Scalars['ID']>
  query?: Maybe<Query>
  role?: Maybe<Role>
  user?: Maybe<User>
  userRoleEdge?: Maybe<UserRolesEdge>
}

export type DeleteUserRolePayloadUserRoleEdgeArgs = {
  orderBy?: Maybe<Array<UserRolesOrderBy>>
}

export type FloatFilter = {
  isNull?: Maybe<Scalars['Boolean']>
  equalTo?: Maybe<Scalars['Float']>
  notEqualTo?: Maybe<Scalars['Float']>
  distinctFrom?: Maybe<Scalars['Float']>
  notDistinctFrom?: Maybe<Scalars['Float']>
  in?: Maybe<Array<Scalars['Float']>>
  notIn?: Maybe<Array<Scalars['Float']>>
  lessThan?: Maybe<Scalars['Float']>
  lessThanOrEqualTo?: Maybe<Scalars['Float']>
  greaterThan?: Maybe<Scalars['Float']>
  greaterThanOrEqualTo?: Maybe<Scalars['Float']>
}

export type FTruncateTablesInput = {
  clientMutationId?: Maybe<Scalars['String']>
  _username?: Maybe<Scalars['String']>
}

export type FTruncateTablesPayload = {
  __typename: 'FTruncateTablesPayload'
  clientMutationId?: Maybe<Scalars['String']>
  query?: Maybe<Query>
}

export type Game = Node & {
  __typename: 'Game'
  nodeId: Scalars['ID']
  id: Scalars['Int']
  description: Scalars['String']
  lateFinish?: Maybe<Scalars['Boolean']>
  lateStart?: Maybe<Scalars['String']>
  name: Scalars['String']
  playerMax: Scalars['Int']
  playerMin: Scalars['Int']
  roomId?: Maybe<Scalars['Int']>
  shortName?: Maybe<Scalars['String']>
  slotId?: Maybe<Scalars['Int']>
  charInstructions: Scalars['String']
  estimatedLength: Scalars['String']
  gameContactEmail: Scalars['String']
  genre: Scalars['String']
  gmNames?: Maybe<Scalars['String']>
  message: Scalars['String']
  playerPreference: Scalars['String']
  playersContactGm: Scalars['Boolean']
  returningPlayers: Scalars['String']
  setting: Scalars['String']
  slotConflicts: Scalars['String']
  slotPreference: Scalars['Int']
  teenFriendly: Scalars['Boolean']
  type: Scalars['String']
  year: Scalars['Int']
  authorId?: Maybe<Scalars['Int']>
  room?: Maybe<Room>
  slot?: Maybe<Slot>
  author?: Maybe<User>
  gameAssignments: GameAssignmentsConnection
  gameChoices: GameChoicesConnection
}

export type GameGameAssignmentsArgs = {
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  before?: Maybe<Scalars['Cursor']>
  after?: Maybe<Scalars['Cursor']>
  orderBy?: Maybe<Array<GameAssignmentsOrderBy>>
  condition?: Maybe<GameAssignmentCondition>
  filter?: Maybe<GameAssignmentFilter>
}

export type GameGameChoicesArgs = {
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  before?: Maybe<Scalars['Cursor']>
  after?: Maybe<Scalars['Cursor']>
  orderBy?: Maybe<Array<GameChoicesOrderBy>>
  condition?: Maybe<GameChoiceCondition>
  filter?: Maybe<GameChoiceFilter>
}

export type GameAssignment = Node & {
  __typename: 'GameAssignment'
  nodeId: Scalars['ID']
  memberId: Scalars['Int']
  gameId: Scalars['Int']
  gm: Scalars['Int']
  year: Scalars['Int']
  member?: Maybe<Membership>
  game?: Maybe<Game>
}

export type GameAssignmentCondition = {
  memberId?: Maybe<Scalars['Int']>
  gameId?: Maybe<Scalars['Int']>
  gm?: Maybe<Scalars['Int']>
  year?: Maybe<Scalars['Int']>
}

export type GameAssignmentFilter = {
  memberId?: Maybe<IntFilter>
  gameId?: Maybe<IntFilter>
  gm?: Maybe<IntFilter>
  year?: Maybe<IntFilter>
  and?: Maybe<Array<GameAssignmentFilter>>
  or?: Maybe<Array<GameAssignmentFilter>>
  not?: Maybe<GameAssignmentFilter>
}

export type GameAssignmentInput = {
  memberId: Scalars['Int']
  gameId: Scalars['Int']
  gm: Scalars['Int']
  year: Scalars['Int']
}

export type GameAssignmentPatch = {
  memberId?: Maybe<Scalars['Int']>
  gameId?: Maybe<Scalars['Int']>
  gm?: Maybe<Scalars['Int']>
  year?: Maybe<Scalars['Int']>
}

export type GameAssignmentsConnection = {
  __typename: 'GameAssignmentsConnection'
  nodes: Array<Maybe<GameAssignment>>
  edges: Array<GameAssignmentsEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type GameAssignmentsEdge = {
  __typename: 'GameAssignmentsEdge'
  cursor?: Maybe<Scalars['Cursor']>
  node?: Maybe<GameAssignment>
}

export enum GameAssignmentsOrderBy {
  Natural = 'NATURAL',
  MemberIdAsc = 'MEMBER_ID_ASC',
  MemberIdDesc = 'MEMBER_ID_DESC',
  GameIdAsc = 'GAME_ID_ASC',
  GameIdDesc = 'GAME_ID_DESC',
  GmAsc = 'GM_ASC',
  GmDesc = 'GM_DESC',
  YearAsc = 'YEAR_ASC',
  YearDesc = 'YEAR_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  MembershipByMemberIdIdAsc = 'MEMBERSHIP_BY_MEMBER_ID__ID_ASC',
  MembershipByMemberIdIdDesc = 'MEMBERSHIP_BY_MEMBER_ID__ID_DESC',
  MembershipByMemberIdArrivalDateAsc = 'MEMBERSHIP_BY_MEMBER_ID__ARRIVAL_DATE_ASC',
  MembershipByMemberIdArrivalDateDesc = 'MEMBERSHIP_BY_MEMBER_ID__ARRIVAL_DATE_DESC',
  MembershipByMemberIdAttendanceAsc = 'MEMBERSHIP_BY_MEMBER_ID__ATTENDANCE_ASC',
  MembershipByMemberIdAttendanceDesc = 'MEMBERSHIP_BY_MEMBER_ID__ATTENDANCE_DESC',
  MembershipByMemberIdAttendingAsc = 'MEMBERSHIP_BY_MEMBER_ID__ATTENDING_ASC',
  MembershipByMemberIdAttendingDesc = 'MEMBERSHIP_BY_MEMBER_ID__ATTENDING_DESC',
  MembershipByMemberIdDepartureDateAsc = 'MEMBERSHIP_BY_MEMBER_ID__DEPARTURE_DATE_ASC',
  MembershipByMemberIdDepartureDateDesc = 'MEMBERSHIP_BY_MEMBER_ID__DEPARTURE_DATE_DESC',
  MembershipByMemberIdHotelRoomIdAsc = 'MEMBERSHIP_BY_MEMBER_ID__HOTEL_ROOM_ID_ASC',
  MembershipByMemberIdHotelRoomIdDesc = 'MEMBERSHIP_BY_MEMBER_ID__HOTEL_ROOM_ID_DESC',
  MembershipByMemberIdInterestLevelAsc = 'MEMBERSHIP_BY_MEMBER_ID__INTEREST_LEVEL_ASC',
  MembershipByMemberIdInterestLevelDesc = 'MEMBERSHIP_BY_MEMBER_ID__INTEREST_LEVEL_DESC',
  MembershipByMemberIdMessageAsc = 'MEMBERSHIP_BY_MEMBER_ID__MESSAGE_ASC',
  MembershipByMemberIdMessageDesc = 'MEMBERSHIP_BY_MEMBER_ID__MESSAGE_DESC',
  MembershipByMemberIdRoomPreferenceAndNotesAsc = 'MEMBERSHIP_BY_MEMBER_ID__ROOM_PREFERENCE_AND_NOTES_ASC',
  MembershipByMemberIdRoomPreferenceAndNotesDesc = 'MEMBERSHIP_BY_MEMBER_ID__ROOM_PREFERENCE_AND_NOTES_DESC',
  MembershipByMemberIdRoomingPreferencesAsc = 'MEMBERSHIP_BY_MEMBER_ID__ROOMING_PREFERENCES_ASC',
  MembershipByMemberIdRoomingPreferencesDesc = 'MEMBERSHIP_BY_MEMBER_ID__ROOMING_PREFERENCES_DESC',
  MembershipByMemberIdRoomingWithAsc = 'MEMBERSHIP_BY_MEMBER_ID__ROOMING_WITH_ASC',
  MembershipByMemberIdRoomingWithDesc = 'MEMBERSHIP_BY_MEMBER_ID__ROOMING_WITH_DESC',
  MembershipByMemberIdUserIdAsc = 'MEMBERSHIP_BY_MEMBER_ID__USER_ID_ASC',
  MembershipByMemberIdUserIdDesc = 'MEMBERSHIP_BY_MEMBER_ID__USER_ID_DESC',
  MembershipByMemberIdVolunteerAsc = 'MEMBERSHIP_BY_MEMBER_ID__VOLUNTEER_ASC',
  MembershipByMemberIdVolunteerDesc = 'MEMBERSHIP_BY_MEMBER_ID__VOLUNTEER_DESC',
  MembershipByMemberIdYearAsc = 'MEMBERSHIP_BY_MEMBER_ID__YEAR_ASC',
  MembershipByMemberIdYearDesc = 'MEMBERSHIP_BY_MEMBER_ID__YEAR_DESC',
  MembershipByMemberIdOfferSubsidyAsc = 'MEMBERSHIP_BY_MEMBER_ID__OFFER_SUBSIDY_ASC',
  MembershipByMemberIdOfferSubsidyDesc = 'MEMBERSHIP_BY_MEMBER_ID__OFFER_SUBSIDY_DESC',
  MembershipByMemberIdRequestOldPriceAsc = 'MEMBERSHIP_BY_MEMBER_ID__REQUEST_OLD_PRICE_ASC',
  MembershipByMemberIdRequestOldPriceDesc = 'MEMBERSHIP_BY_MEMBER_ID__REQUEST_OLD_PRICE_DESC',
  MembershipByMemberIdAmountOwedAsc = 'MEMBERSHIP_BY_MEMBER_ID__AMOUNT_OWED_ASC',
  MembershipByMemberIdAmountOwedDesc = 'MEMBERSHIP_BY_MEMBER_ID__AMOUNT_OWED_DESC',
  MembershipByMemberIdAmountPaidAsc = 'MEMBERSHIP_BY_MEMBER_ID__AMOUNT_PAID_ASC',
  MembershipByMemberIdAmountPaidDesc = 'MEMBERSHIP_BY_MEMBER_ID__AMOUNT_PAID_DESC',
  GameByGameIdIdAsc = 'GAME_BY_GAME_ID__ID_ASC',
  GameByGameIdIdDesc = 'GAME_BY_GAME_ID__ID_DESC',
  GameByGameIdDescriptionAsc = 'GAME_BY_GAME_ID__DESCRIPTION_ASC',
  GameByGameIdDescriptionDesc = 'GAME_BY_GAME_ID__DESCRIPTION_DESC',
  GameByGameIdLateFinishAsc = 'GAME_BY_GAME_ID__LATE_FINISH_ASC',
  GameByGameIdLateFinishDesc = 'GAME_BY_GAME_ID__LATE_FINISH_DESC',
  GameByGameIdLateStartAsc = 'GAME_BY_GAME_ID__LATE_START_ASC',
  GameByGameIdLateStartDesc = 'GAME_BY_GAME_ID__LATE_START_DESC',
  GameByGameIdNameAsc = 'GAME_BY_GAME_ID__NAME_ASC',
  GameByGameIdNameDesc = 'GAME_BY_GAME_ID__NAME_DESC',
  GameByGameIdPlayerMaxAsc = 'GAME_BY_GAME_ID__PLAYER_MAX_ASC',
  GameByGameIdPlayerMaxDesc = 'GAME_BY_GAME_ID__PLAYER_MAX_DESC',
  GameByGameIdPlayerMinAsc = 'GAME_BY_GAME_ID__PLAYER_MIN_ASC',
  GameByGameIdPlayerMinDesc = 'GAME_BY_GAME_ID__PLAYER_MIN_DESC',
  GameByGameIdRoomIdAsc = 'GAME_BY_GAME_ID__ROOM_ID_ASC',
  GameByGameIdRoomIdDesc = 'GAME_BY_GAME_ID__ROOM_ID_DESC',
  GameByGameIdShortNameAsc = 'GAME_BY_GAME_ID__SHORT_NAME_ASC',
  GameByGameIdShortNameDesc = 'GAME_BY_GAME_ID__SHORT_NAME_DESC',
  GameByGameIdSlotIdAsc = 'GAME_BY_GAME_ID__SLOT_ID_ASC',
  GameByGameIdSlotIdDesc = 'GAME_BY_GAME_ID__SLOT_ID_DESC',
  GameByGameIdCharInstructionsAsc = 'GAME_BY_GAME_ID__CHAR_INSTRUCTIONS_ASC',
  GameByGameIdCharInstructionsDesc = 'GAME_BY_GAME_ID__CHAR_INSTRUCTIONS_DESC',
  GameByGameIdEstimatedLengthAsc = 'GAME_BY_GAME_ID__ESTIMATED_LENGTH_ASC',
  GameByGameIdEstimatedLengthDesc = 'GAME_BY_GAME_ID__ESTIMATED_LENGTH_DESC',
  GameByGameIdGameContactEmailAsc = 'GAME_BY_GAME_ID__GAME_CONTACT_EMAIL_ASC',
  GameByGameIdGameContactEmailDesc = 'GAME_BY_GAME_ID__GAME_CONTACT_EMAIL_DESC',
  GameByGameIdGenreAsc = 'GAME_BY_GAME_ID__GENRE_ASC',
  GameByGameIdGenreDesc = 'GAME_BY_GAME_ID__GENRE_DESC',
  GameByGameIdGmNamesAsc = 'GAME_BY_GAME_ID__GM_NAMES_ASC',
  GameByGameIdGmNamesDesc = 'GAME_BY_GAME_ID__GM_NAMES_DESC',
  GameByGameIdMessageAsc = 'GAME_BY_GAME_ID__MESSAGE_ASC',
  GameByGameIdMessageDesc = 'GAME_BY_GAME_ID__MESSAGE_DESC',
  GameByGameIdPlayerPreferenceAsc = 'GAME_BY_GAME_ID__PLAYER_PREFERENCE_ASC',
  GameByGameIdPlayerPreferenceDesc = 'GAME_BY_GAME_ID__PLAYER_PREFERENCE_DESC',
  GameByGameIdPlayersContactGmAsc = 'GAME_BY_GAME_ID__PLAYERS_CONTACT_GM_ASC',
  GameByGameIdPlayersContactGmDesc = 'GAME_BY_GAME_ID__PLAYERS_CONTACT_GM_DESC',
  GameByGameIdReturningPlayersAsc = 'GAME_BY_GAME_ID__RETURNING_PLAYERS_ASC',
  GameByGameIdReturningPlayersDesc = 'GAME_BY_GAME_ID__RETURNING_PLAYERS_DESC',
  GameByGameIdSettingAsc = 'GAME_BY_GAME_ID__SETTING_ASC',
  GameByGameIdSettingDesc = 'GAME_BY_GAME_ID__SETTING_DESC',
  GameByGameIdSlotConflictsAsc = 'GAME_BY_GAME_ID__SLOT_CONFLICTS_ASC',
  GameByGameIdSlotConflictsDesc = 'GAME_BY_GAME_ID__SLOT_CONFLICTS_DESC',
  GameByGameIdSlotPreferenceAsc = 'GAME_BY_GAME_ID__SLOT_PREFERENCE_ASC',
  GameByGameIdSlotPreferenceDesc = 'GAME_BY_GAME_ID__SLOT_PREFERENCE_DESC',
  GameByGameIdTeenFriendlyAsc = 'GAME_BY_GAME_ID__TEEN_FRIENDLY_ASC',
  GameByGameIdTeenFriendlyDesc = 'GAME_BY_GAME_ID__TEEN_FRIENDLY_DESC',
  GameByGameIdTypeAsc = 'GAME_BY_GAME_ID__TYPE_ASC',
  GameByGameIdTypeDesc = 'GAME_BY_GAME_ID__TYPE_DESC',
  GameByGameIdYearAsc = 'GAME_BY_GAME_ID__YEAR_ASC',
  GameByGameIdYearDesc = 'GAME_BY_GAME_ID__YEAR_DESC',
  GameByGameIdAuthorIdAsc = 'GAME_BY_GAME_ID__AUTHOR_ID_ASC',
  GameByGameIdAuthorIdDesc = 'GAME_BY_GAME_ID__AUTHOR_ID_DESC'
}

export type GameChoice = Node & {
  __typename: 'GameChoice'
  nodeId: Scalars['ID']
  id: Scalars['Int']
  gameId?: Maybe<Scalars['Int']>
  memberId: Scalars['Int']
  rank: Scalars['Int']
  slotId: Scalars['Int']
  year: Scalars['Int']
  returningPlayer: Scalars['Boolean']
  game?: Maybe<Game>
  member?: Maybe<Membership>
  slot?: Maybe<Slot>
}

export type GameChoiceCondition = {
  id?: Maybe<Scalars['Int']>
  gameId?: Maybe<Scalars['Int']>
  memberId?: Maybe<Scalars['Int']>
  rank?: Maybe<Scalars['Int']>
  slotId?: Maybe<Scalars['Int']>
  year?: Maybe<Scalars['Int']>
  returningPlayer?: Maybe<Scalars['Boolean']>
}

export type GameChoiceFilter = {
  id?: Maybe<IntFilter>
  gameId?: Maybe<IntFilter>
  memberId?: Maybe<IntFilter>
  rank?: Maybe<IntFilter>
  slotId?: Maybe<IntFilter>
  year?: Maybe<IntFilter>
  returningPlayer?: Maybe<BooleanFilter>
  and?: Maybe<Array<GameChoiceFilter>>
  or?: Maybe<Array<GameChoiceFilter>>
  not?: Maybe<GameChoiceFilter>
}

export type GameChoiceInput = {
  id?: Maybe<Scalars['Int']>
  gameId?: Maybe<Scalars['Int']>
  memberId: Scalars['Int']
  rank: Scalars['Int']
  slotId: Scalars['Int']
  year: Scalars['Int']
  returningPlayer: Scalars['Boolean']
}

export type GameChoicePatch = {
  id?: Maybe<Scalars['Int']>
  gameId?: Maybe<Scalars['Int']>
  memberId?: Maybe<Scalars['Int']>
  rank?: Maybe<Scalars['Int']>
  slotId?: Maybe<Scalars['Int']>
  year?: Maybe<Scalars['Int']>
  returningPlayer?: Maybe<Scalars['Boolean']>
}

export type GameChoicesConnection = {
  __typename: 'GameChoicesConnection'
  nodes: Array<Maybe<GameChoice>>
  edges: Array<GameChoicesEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type GameChoicesEdge = {
  __typename: 'GameChoicesEdge'
  cursor?: Maybe<Scalars['Cursor']>
  node?: Maybe<GameChoice>
}

export enum GameChoicesOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  GameIdAsc = 'GAME_ID_ASC',
  GameIdDesc = 'GAME_ID_DESC',
  MemberIdAsc = 'MEMBER_ID_ASC',
  MemberIdDesc = 'MEMBER_ID_DESC',
  RankAsc = 'RANK_ASC',
  RankDesc = 'RANK_DESC',
  SlotIdAsc = 'SLOT_ID_ASC',
  SlotIdDesc = 'SLOT_ID_DESC',
  YearAsc = 'YEAR_ASC',
  YearDesc = 'YEAR_DESC',
  ReturningPlayerAsc = 'RETURNING_PLAYER_ASC',
  ReturningPlayerDesc = 'RETURNING_PLAYER_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  GameByGameIdIdAsc = 'GAME_BY_GAME_ID__ID_ASC',
  GameByGameIdIdDesc = 'GAME_BY_GAME_ID__ID_DESC',
  GameByGameIdDescriptionAsc = 'GAME_BY_GAME_ID__DESCRIPTION_ASC',
  GameByGameIdDescriptionDesc = 'GAME_BY_GAME_ID__DESCRIPTION_DESC',
  GameByGameIdLateFinishAsc = 'GAME_BY_GAME_ID__LATE_FINISH_ASC',
  GameByGameIdLateFinishDesc = 'GAME_BY_GAME_ID__LATE_FINISH_DESC',
  GameByGameIdLateStartAsc = 'GAME_BY_GAME_ID__LATE_START_ASC',
  GameByGameIdLateStartDesc = 'GAME_BY_GAME_ID__LATE_START_DESC',
  GameByGameIdNameAsc = 'GAME_BY_GAME_ID__NAME_ASC',
  GameByGameIdNameDesc = 'GAME_BY_GAME_ID__NAME_DESC',
  GameByGameIdPlayerMaxAsc = 'GAME_BY_GAME_ID__PLAYER_MAX_ASC',
  GameByGameIdPlayerMaxDesc = 'GAME_BY_GAME_ID__PLAYER_MAX_DESC',
  GameByGameIdPlayerMinAsc = 'GAME_BY_GAME_ID__PLAYER_MIN_ASC',
  GameByGameIdPlayerMinDesc = 'GAME_BY_GAME_ID__PLAYER_MIN_DESC',
  GameByGameIdRoomIdAsc = 'GAME_BY_GAME_ID__ROOM_ID_ASC',
  GameByGameIdRoomIdDesc = 'GAME_BY_GAME_ID__ROOM_ID_DESC',
  GameByGameIdShortNameAsc = 'GAME_BY_GAME_ID__SHORT_NAME_ASC',
  GameByGameIdShortNameDesc = 'GAME_BY_GAME_ID__SHORT_NAME_DESC',
  GameByGameIdSlotIdAsc = 'GAME_BY_GAME_ID__SLOT_ID_ASC',
  GameByGameIdSlotIdDesc = 'GAME_BY_GAME_ID__SLOT_ID_DESC',
  GameByGameIdCharInstructionsAsc = 'GAME_BY_GAME_ID__CHAR_INSTRUCTIONS_ASC',
  GameByGameIdCharInstructionsDesc = 'GAME_BY_GAME_ID__CHAR_INSTRUCTIONS_DESC',
  GameByGameIdEstimatedLengthAsc = 'GAME_BY_GAME_ID__ESTIMATED_LENGTH_ASC',
  GameByGameIdEstimatedLengthDesc = 'GAME_BY_GAME_ID__ESTIMATED_LENGTH_DESC',
  GameByGameIdGameContactEmailAsc = 'GAME_BY_GAME_ID__GAME_CONTACT_EMAIL_ASC',
  GameByGameIdGameContactEmailDesc = 'GAME_BY_GAME_ID__GAME_CONTACT_EMAIL_DESC',
  GameByGameIdGenreAsc = 'GAME_BY_GAME_ID__GENRE_ASC',
  GameByGameIdGenreDesc = 'GAME_BY_GAME_ID__GENRE_DESC',
  GameByGameIdGmNamesAsc = 'GAME_BY_GAME_ID__GM_NAMES_ASC',
  GameByGameIdGmNamesDesc = 'GAME_BY_GAME_ID__GM_NAMES_DESC',
  GameByGameIdMessageAsc = 'GAME_BY_GAME_ID__MESSAGE_ASC',
  GameByGameIdMessageDesc = 'GAME_BY_GAME_ID__MESSAGE_DESC',
  GameByGameIdPlayerPreferenceAsc = 'GAME_BY_GAME_ID__PLAYER_PREFERENCE_ASC',
  GameByGameIdPlayerPreferenceDesc = 'GAME_BY_GAME_ID__PLAYER_PREFERENCE_DESC',
  GameByGameIdPlayersContactGmAsc = 'GAME_BY_GAME_ID__PLAYERS_CONTACT_GM_ASC',
  GameByGameIdPlayersContactGmDesc = 'GAME_BY_GAME_ID__PLAYERS_CONTACT_GM_DESC',
  GameByGameIdReturningPlayersAsc = 'GAME_BY_GAME_ID__RETURNING_PLAYERS_ASC',
  GameByGameIdReturningPlayersDesc = 'GAME_BY_GAME_ID__RETURNING_PLAYERS_DESC',
  GameByGameIdSettingAsc = 'GAME_BY_GAME_ID__SETTING_ASC',
  GameByGameIdSettingDesc = 'GAME_BY_GAME_ID__SETTING_DESC',
  GameByGameIdSlotConflictsAsc = 'GAME_BY_GAME_ID__SLOT_CONFLICTS_ASC',
  GameByGameIdSlotConflictsDesc = 'GAME_BY_GAME_ID__SLOT_CONFLICTS_DESC',
  GameByGameIdSlotPreferenceAsc = 'GAME_BY_GAME_ID__SLOT_PREFERENCE_ASC',
  GameByGameIdSlotPreferenceDesc = 'GAME_BY_GAME_ID__SLOT_PREFERENCE_DESC',
  GameByGameIdTeenFriendlyAsc = 'GAME_BY_GAME_ID__TEEN_FRIENDLY_ASC',
  GameByGameIdTeenFriendlyDesc = 'GAME_BY_GAME_ID__TEEN_FRIENDLY_DESC',
  GameByGameIdTypeAsc = 'GAME_BY_GAME_ID__TYPE_ASC',
  GameByGameIdTypeDesc = 'GAME_BY_GAME_ID__TYPE_DESC',
  GameByGameIdYearAsc = 'GAME_BY_GAME_ID__YEAR_ASC',
  GameByGameIdYearDesc = 'GAME_BY_GAME_ID__YEAR_DESC',
  GameByGameIdAuthorIdAsc = 'GAME_BY_GAME_ID__AUTHOR_ID_ASC',
  GameByGameIdAuthorIdDesc = 'GAME_BY_GAME_ID__AUTHOR_ID_DESC',
  MembershipByMemberIdIdAsc = 'MEMBERSHIP_BY_MEMBER_ID__ID_ASC',
  MembershipByMemberIdIdDesc = 'MEMBERSHIP_BY_MEMBER_ID__ID_DESC',
  MembershipByMemberIdArrivalDateAsc = 'MEMBERSHIP_BY_MEMBER_ID__ARRIVAL_DATE_ASC',
  MembershipByMemberIdArrivalDateDesc = 'MEMBERSHIP_BY_MEMBER_ID__ARRIVAL_DATE_DESC',
  MembershipByMemberIdAttendanceAsc = 'MEMBERSHIP_BY_MEMBER_ID__ATTENDANCE_ASC',
  MembershipByMemberIdAttendanceDesc = 'MEMBERSHIP_BY_MEMBER_ID__ATTENDANCE_DESC',
  MembershipByMemberIdAttendingAsc = 'MEMBERSHIP_BY_MEMBER_ID__ATTENDING_ASC',
  MembershipByMemberIdAttendingDesc = 'MEMBERSHIP_BY_MEMBER_ID__ATTENDING_DESC',
  MembershipByMemberIdDepartureDateAsc = 'MEMBERSHIP_BY_MEMBER_ID__DEPARTURE_DATE_ASC',
  MembershipByMemberIdDepartureDateDesc = 'MEMBERSHIP_BY_MEMBER_ID__DEPARTURE_DATE_DESC',
  MembershipByMemberIdHotelRoomIdAsc = 'MEMBERSHIP_BY_MEMBER_ID__HOTEL_ROOM_ID_ASC',
  MembershipByMemberIdHotelRoomIdDesc = 'MEMBERSHIP_BY_MEMBER_ID__HOTEL_ROOM_ID_DESC',
  MembershipByMemberIdInterestLevelAsc = 'MEMBERSHIP_BY_MEMBER_ID__INTEREST_LEVEL_ASC',
  MembershipByMemberIdInterestLevelDesc = 'MEMBERSHIP_BY_MEMBER_ID__INTEREST_LEVEL_DESC',
  MembershipByMemberIdMessageAsc = 'MEMBERSHIP_BY_MEMBER_ID__MESSAGE_ASC',
  MembershipByMemberIdMessageDesc = 'MEMBERSHIP_BY_MEMBER_ID__MESSAGE_DESC',
  MembershipByMemberIdRoomPreferenceAndNotesAsc = 'MEMBERSHIP_BY_MEMBER_ID__ROOM_PREFERENCE_AND_NOTES_ASC',
  MembershipByMemberIdRoomPreferenceAndNotesDesc = 'MEMBERSHIP_BY_MEMBER_ID__ROOM_PREFERENCE_AND_NOTES_DESC',
  MembershipByMemberIdRoomingPreferencesAsc = 'MEMBERSHIP_BY_MEMBER_ID__ROOMING_PREFERENCES_ASC',
  MembershipByMemberIdRoomingPreferencesDesc = 'MEMBERSHIP_BY_MEMBER_ID__ROOMING_PREFERENCES_DESC',
  MembershipByMemberIdRoomingWithAsc = 'MEMBERSHIP_BY_MEMBER_ID__ROOMING_WITH_ASC',
  MembershipByMemberIdRoomingWithDesc = 'MEMBERSHIP_BY_MEMBER_ID__ROOMING_WITH_DESC',
  MembershipByMemberIdUserIdAsc = 'MEMBERSHIP_BY_MEMBER_ID__USER_ID_ASC',
  MembershipByMemberIdUserIdDesc = 'MEMBERSHIP_BY_MEMBER_ID__USER_ID_DESC',
  MembershipByMemberIdVolunteerAsc = 'MEMBERSHIP_BY_MEMBER_ID__VOLUNTEER_ASC',
  MembershipByMemberIdVolunteerDesc = 'MEMBERSHIP_BY_MEMBER_ID__VOLUNTEER_DESC',
  MembershipByMemberIdYearAsc = 'MEMBERSHIP_BY_MEMBER_ID__YEAR_ASC',
  MembershipByMemberIdYearDesc = 'MEMBERSHIP_BY_MEMBER_ID__YEAR_DESC',
  MembershipByMemberIdOfferSubsidyAsc = 'MEMBERSHIP_BY_MEMBER_ID__OFFER_SUBSIDY_ASC',
  MembershipByMemberIdOfferSubsidyDesc = 'MEMBERSHIP_BY_MEMBER_ID__OFFER_SUBSIDY_DESC',
  MembershipByMemberIdRequestOldPriceAsc = 'MEMBERSHIP_BY_MEMBER_ID__REQUEST_OLD_PRICE_ASC',
  MembershipByMemberIdRequestOldPriceDesc = 'MEMBERSHIP_BY_MEMBER_ID__REQUEST_OLD_PRICE_DESC',
  MembershipByMemberIdAmountOwedAsc = 'MEMBERSHIP_BY_MEMBER_ID__AMOUNT_OWED_ASC',
  MembershipByMemberIdAmountOwedDesc = 'MEMBERSHIP_BY_MEMBER_ID__AMOUNT_OWED_DESC',
  MembershipByMemberIdAmountPaidAsc = 'MEMBERSHIP_BY_MEMBER_ID__AMOUNT_PAID_ASC',
  MembershipByMemberIdAmountPaidDesc = 'MEMBERSHIP_BY_MEMBER_ID__AMOUNT_PAID_DESC',
  SlotBySlotIdIdAsc = 'SLOT_BY_SLOT_ID__ID_ASC',
  SlotBySlotIdIdDesc = 'SLOT_BY_SLOT_ID__ID_DESC',
  SlotBySlotIdSlotAsc = 'SLOT_BY_SLOT_ID__SLOT_ASC',
  SlotBySlotIdSlotDesc = 'SLOT_BY_SLOT_ID__SLOT_DESC',
  SlotBySlotIdDayAsc = 'SLOT_BY_SLOT_ID__DAY_ASC',
  SlotBySlotIdDayDesc = 'SLOT_BY_SLOT_ID__DAY_DESC',
  SlotBySlotIdFormattedDateAsc = 'SLOT_BY_SLOT_ID__FORMATTED_DATE_ASC',
  SlotBySlotIdFormattedDateDesc = 'SLOT_BY_SLOT_ID__FORMATTED_DATE_DESC',
  SlotBySlotIdLengthAsc = 'SLOT_BY_SLOT_ID__LENGTH_ASC',
  SlotBySlotIdLengthDesc = 'SLOT_BY_SLOT_ID__LENGTH_DESC',
  SlotBySlotIdTimeAsc = 'SLOT_BY_SLOT_ID__TIME_ASC',
  SlotBySlotIdTimeDesc = 'SLOT_BY_SLOT_ID__TIME_DESC'
}

export type GameCondition = {
  id?: Maybe<Scalars['Int']>
  description?: Maybe<Scalars['String']>
  lateFinish?: Maybe<Scalars['Boolean']>
  lateStart?: Maybe<Scalars['String']>
  name?: Maybe<Scalars['String']>
  playerMax?: Maybe<Scalars['Int']>
  playerMin?: Maybe<Scalars['Int']>
  roomId?: Maybe<Scalars['Int']>
  shortName?: Maybe<Scalars['String']>
  slotId?: Maybe<Scalars['Int']>
  charInstructions?: Maybe<Scalars['String']>
  estimatedLength?: Maybe<Scalars['String']>
  gameContactEmail?: Maybe<Scalars['String']>
  genre?: Maybe<Scalars['String']>
  gmNames?: Maybe<Scalars['String']>
  message?: Maybe<Scalars['String']>
  playerPreference?: Maybe<Scalars['String']>
  playersContactGm?: Maybe<Scalars['Boolean']>
  returningPlayers?: Maybe<Scalars['String']>
  setting?: Maybe<Scalars['String']>
  slotConflicts?: Maybe<Scalars['String']>
  slotPreference?: Maybe<Scalars['Int']>
  teenFriendly?: Maybe<Scalars['Boolean']>
  type?: Maybe<Scalars['String']>
  year?: Maybe<Scalars['Int']>
  authorId?: Maybe<Scalars['Int']>
}

export type GameFilter = {
  id?: Maybe<IntFilter>
  description?: Maybe<StringFilter>
  lateFinish?: Maybe<BooleanFilter>
  lateStart?: Maybe<StringFilter>
  name?: Maybe<StringFilter>
  playerMax?: Maybe<IntFilter>
  playerMin?: Maybe<IntFilter>
  roomId?: Maybe<IntFilter>
  shortName?: Maybe<StringFilter>
  slotId?: Maybe<IntFilter>
  charInstructions?: Maybe<StringFilter>
  estimatedLength?: Maybe<StringFilter>
  gameContactEmail?: Maybe<StringFilter>
  genre?: Maybe<StringFilter>
  gmNames?: Maybe<StringFilter>
  message?: Maybe<StringFilter>
  playerPreference?: Maybe<StringFilter>
  playersContactGm?: Maybe<BooleanFilter>
  returningPlayers?: Maybe<StringFilter>
  setting?: Maybe<StringFilter>
  slotConflicts?: Maybe<StringFilter>
  slotPreference?: Maybe<IntFilter>
  teenFriendly?: Maybe<BooleanFilter>
  type?: Maybe<StringFilter>
  year?: Maybe<IntFilter>
  authorId?: Maybe<IntFilter>
  and?: Maybe<Array<GameFilter>>
  or?: Maybe<Array<GameFilter>>
  not?: Maybe<GameFilter>
}

export type GameInput = {
  id?: Maybe<Scalars['Int']>
  description: Scalars['String']
  lateFinish?: Maybe<Scalars['Boolean']>
  lateStart?: Maybe<Scalars['String']>
  name: Scalars['String']
  playerMax: Scalars['Int']
  playerMin: Scalars['Int']
  roomId?: Maybe<Scalars['Int']>
  shortName?: Maybe<Scalars['String']>
  slotId?: Maybe<Scalars['Int']>
  charInstructions: Scalars['String']
  estimatedLength: Scalars['String']
  gameContactEmail: Scalars['String']
  genre: Scalars['String']
  gmNames?: Maybe<Scalars['String']>
  message: Scalars['String']
  playerPreference: Scalars['String']
  playersContactGm: Scalars['Boolean']
  returningPlayers: Scalars['String']
  setting: Scalars['String']
  slotConflicts: Scalars['String']
  slotPreference: Scalars['Int']
  teenFriendly: Scalars['Boolean']
  type: Scalars['String']
  year: Scalars['Int']
  authorId?: Maybe<Scalars['Int']>
}

export type GamePatch = {
  id?: Maybe<Scalars['Int']>
  description?: Maybe<Scalars['String']>
  lateFinish?: Maybe<Scalars['Boolean']>
  lateStart?: Maybe<Scalars['String']>
  name?: Maybe<Scalars['String']>
  playerMax?: Maybe<Scalars['Int']>
  playerMin?: Maybe<Scalars['Int']>
  roomId?: Maybe<Scalars['Int']>
  shortName?: Maybe<Scalars['String']>
  slotId?: Maybe<Scalars['Int']>
  charInstructions?: Maybe<Scalars['String']>
  estimatedLength?: Maybe<Scalars['String']>
  gameContactEmail?: Maybe<Scalars['String']>
  genre?: Maybe<Scalars['String']>
  gmNames?: Maybe<Scalars['String']>
  message?: Maybe<Scalars['String']>
  playerPreference?: Maybe<Scalars['String']>
  playersContactGm?: Maybe<Scalars['Boolean']>
  returningPlayers?: Maybe<Scalars['String']>
  setting?: Maybe<Scalars['String']>
  slotConflicts?: Maybe<Scalars['String']>
  slotPreference?: Maybe<Scalars['Int']>
  teenFriendly?: Maybe<Scalars['Boolean']>
  type?: Maybe<Scalars['String']>
  year?: Maybe<Scalars['Int']>
  authorId?: Maybe<Scalars['Int']>
}

export type GamesConnection = {
  __typename: 'GamesConnection'
  nodes: Array<Maybe<Game>>
  edges: Array<GamesEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type GamesEdge = {
  __typename: 'GamesEdge'
  cursor?: Maybe<Scalars['Cursor']>
  node?: Maybe<Game>
}

export enum GamesOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  DescriptionAsc = 'DESCRIPTION_ASC',
  DescriptionDesc = 'DESCRIPTION_DESC',
  LateFinishAsc = 'LATE_FINISH_ASC',
  LateFinishDesc = 'LATE_FINISH_DESC',
  LateStartAsc = 'LATE_START_ASC',
  LateStartDesc = 'LATE_START_DESC',
  NameAsc = 'NAME_ASC',
  NameDesc = 'NAME_DESC',
  PlayerMaxAsc = 'PLAYER_MAX_ASC',
  PlayerMaxDesc = 'PLAYER_MAX_DESC',
  PlayerMinAsc = 'PLAYER_MIN_ASC',
  PlayerMinDesc = 'PLAYER_MIN_DESC',
  RoomIdAsc = 'ROOM_ID_ASC',
  RoomIdDesc = 'ROOM_ID_DESC',
  ShortNameAsc = 'SHORT_NAME_ASC',
  ShortNameDesc = 'SHORT_NAME_DESC',
  SlotIdAsc = 'SLOT_ID_ASC',
  SlotIdDesc = 'SLOT_ID_DESC',
  CharInstructionsAsc = 'CHAR_INSTRUCTIONS_ASC',
  CharInstructionsDesc = 'CHAR_INSTRUCTIONS_DESC',
  EstimatedLengthAsc = 'ESTIMATED_LENGTH_ASC',
  EstimatedLengthDesc = 'ESTIMATED_LENGTH_DESC',
  GameContactEmailAsc = 'GAME_CONTACT_EMAIL_ASC',
  GameContactEmailDesc = 'GAME_CONTACT_EMAIL_DESC',
  GenreAsc = 'GENRE_ASC',
  GenreDesc = 'GENRE_DESC',
  GmNamesAsc = 'GM_NAMES_ASC',
  GmNamesDesc = 'GM_NAMES_DESC',
  MessageAsc = 'MESSAGE_ASC',
  MessageDesc = 'MESSAGE_DESC',
  PlayerPreferenceAsc = 'PLAYER_PREFERENCE_ASC',
  PlayerPreferenceDesc = 'PLAYER_PREFERENCE_DESC',
  PlayersContactGmAsc = 'PLAYERS_CONTACT_GM_ASC',
  PlayersContactGmDesc = 'PLAYERS_CONTACT_GM_DESC',
  ReturningPlayersAsc = 'RETURNING_PLAYERS_ASC',
  ReturningPlayersDesc = 'RETURNING_PLAYERS_DESC',
  SettingAsc = 'SETTING_ASC',
  SettingDesc = 'SETTING_DESC',
  SlotConflictsAsc = 'SLOT_CONFLICTS_ASC',
  SlotConflictsDesc = 'SLOT_CONFLICTS_DESC',
  SlotPreferenceAsc = 'SLOT_PREFERENCE_ASC',
  SlotPreferenceDesc = 'SLOT_PREFERENCE_DESC',
  TeenFriendlyAsc = 'TEEN_FRIENDLY_ASC',
  TeenFriendlyDesc = 'TEEN_FRIENDLY_DESC',
  TypeAsc = 'TYPE_ASC',
  TypeDesc = 'TYPE_DESC',
  YearAsc = 'YEAR_ASC',
  YearDesc = 'YEAR_DESC',
  AuthorIdAsc = 'AUTHOR_ID_ASC',
  AuthorIdDesc = 'AUTHOR_ID_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  RoomByRoomIdIdAsc = 'ROOM_BY_ROOM_ID__ID_ASC',
  RoomByRoomIdIdDesc = 'ROOM_BY_ROOM_ID__ID_DESC',
  RoomByRoomIdDescriptionAsc = 'ROOM_BY_ROOM_ID__DESCRIPTION_ASC',
  RoomByRoomIdDescriptionDesc = 'ROOM_BY_ROOM_ID__DESCRIPTION_DESC',
  RoomByRoomIdSizeAsc = 'ROOM_BY_ROOM_ID__SIZE_ASC',
  RoomByRoomIdSizeDesc = 'ROOM_BY_ROOM_ID__SIZE_DESC',
  RoomByRoomIdTypeAsc = 'ROOM_BY_ROOM_ID__TYPE_ASC',
  RoomByRoomIdTypeDesc = 'ROOM_BY_ROOM_ID__TYPE_DESC',
  RoomByRoomIdUpdatedAsc = 'ROOM_BY_ROOM_ID__UPDATED_ASC',
  RoomByRoomIdUpdatedDesc = 'ROOM_BY_ROOM_ID__UPDATED_DESC',
  SlotBySlotIdIdAsc = 'SLOT_BY_SLOT_ID__ID_ASC',
  SlotBySlotIdIdDesc = 'SLOT_BY_SLOT_ID__ID_DESC',
  SlotBySlotIdSlotAsc = 'SLOT_BY_SLOT_ID__SLOT_ASC',
  SlotBySlotIdSlotDesc = 'SLOT_BY_SLOT_ID__SLOT_DESC',
  SlotBySlotIdDayAsc = 'SLOT_BY_SLOT_ID__DAY_ASC',
  SlotBySlotIdDayDesc = 'SLOT_BY_SLOT_ID__DAY_DESC',
  SlotBySlotIdFormattedDateAsc = 'SLOT_BY_SLOT_ID__FORMATTED_DATE_ASC',
  SlotBySlotIdFormattedDateDesc = 'SLOT_BY_SLOT_ID__FORMATTED_DATE_DESC',
  SlotBySlotIdLengthAsc = 'SLOT_BY_SLOT_ID__LENGTH_ASC',
  SlotBySlotIdLengthDesc = 'SLOT_BY_SLOT_ID__LENGTH_DESC',
  SlotBySlotIdTimeAsc = 'SLOT_BY_SLOT_ID__TIME_ASC',
  SlotBySlotIdTimeDesc = 'SLOT_BY_SLOT_ID__TIME_DESC',
  UserByAuthorIdIdAsc = 'USER_BY_AUTHOR_ID__ID_ASC',
  UserByAuthorIdIdDesc = 'USER_BY_AUTHOR_ID__ID_DESC',
  UserByAuthorIdAccountLockedAsc = 'USER_BY_AUTHOR_ID__ACCOUNT_LOCKED_ASC',
  UserByAuthorIdAccountLockedDesc = 'USER_BY_AUTHOR_ID__ACCOUNT_LOCKED_DESC',
  UserByAuthorIdEnabledAsc = 'USER_BY_AUTHOR_ID__ENABLED_ASC',
  UserByAuthorIdEnabledDesc = 'USER_BY_AUTHOR_ID__ENABLED_DESC',
  UserByAuthorIdPasswordAsc = 'USER_BY_AUTHOR_ID__PASSWORD_ASC',
  UserByAuthorIdPasswordDesc = 'USER_BY_AUTHOR_ID__PASSWORD_DESC',
  UserByAuthorIdProfileIdAsc = 'USER_BY_AUTHOR_ID__PROFILE_ID_ASC',
  UserByAuthorIdProfileIdDesc = 'USER_BY_AUTHOR_ID__PROFILE_ID_DESC',
  UserByAuthorIdUsernameAsc = 'USER_BY_AUTHOR_ID__USERNAME_ASC',
  UserByAuthorIdUsernameDesc = 'USER_BY_AUTHOR_ID__USERNAME_DESC',
  GameAssignmentsByGameIdCountAsc = 'GAME_ASSIGNMENTS_BY_GAME_ID__COUNT_ASC',
  GameAssignmentsByGameIdCountDesc = 'GAME_ASSIGNMENTS_BY_GAME_ID__COUNT_DESC',
  GameChoicesByGameIdCountAsc = 'GAME_CHOICES_BY_GAME_ID__COUNT_ASC',
  GameChoicesByGameIdCountDesc = 'GAME_CHOICES_BY_GAME_ID__COUNT_DESC'
}

export type GameSubmission = Node & {
  __typename: 'GameSubmission'
  nodeId: Scalars['ID']
  id: Scalars['Int']
  memberId: Scalars['Int']
  message: Scalars['String']
  year: Scalars['Int']
  member?: Maybe<Membership>
}

export type GameSubmissionCondition = {
  id?: Maybe<Scalars['Int']>
  memberId?: Maybe<Scalars['Int']>
  message?: Maybe<Scalars['String']>
  year?: Maybe<Scalars['Int']>
}

export type GameSubmissionFilter = {
  id?: Maybe<IntFilter>
  memberId?: Maybe<IntFilter>
  message?: Maybe<StringFilter>
  year?: Maybe<IntFilter>
  and?: Maybe<Array<GameSubmissionFilter>>
  or?: Maybe<Array<GameSubmissionFilter>>
  not?: Maybe<GameSubmissionFilter>
}

export type GameSubmissionInput = {
  id?: Maybe<Scalars['Int']>
  memberId: Scalars['Int']
  message: Scalars['String']
  year: Scalars['Int']
}

export type GameSubmissionPatch = {
  id?: Maybe<Scalars['Int']>
  memberId?: Maybe<Scalars['Int']>
  message?: Maybe<Scalars['String']>
  year?: Maybe<Scalars['Int']>
}

export type GameSubmissionsConnection = {
  __typename: 'GameSubmissionsConnection'
  nodes: Array<Maybe<GameSubmission>>
  edges: Array<GameSubmissionsEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type GameSubmissionsEdge = {
  __typename: 'GameSubmissionsEdge'
  cursor?: Maybe<Scalars['Cursor']>
  node?: Maybe<GameSubmission>
}

export enum GameSubmissionsOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  MemberIdAsc = 'MEMBER_ID_ASC',
  MemberIdDesc = 'MEMBER_ID_DESC',
  MessageAsc = 'MESSAGE_ASC',
  MessageDesc = 'MESSAGE_DESC',
  YearAsc = 'YEAR_ASC',
  YearDesc = 'YEAR_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  MembershipByMemberIdIdAsc = 'MEMBERSHIP_BY_MEMBER_ID__ID_ASC',
  MembershipByMemberIdIdDesc = 'MEMBERSHIP_BY_MEMBER_ID__ID_DESC',
  MembershipByMemberIdArrivalDateAsc = 'MEMBERSHIP_BY_MEMBER_ID__ARRIVAL_DATE_ASC',
  MembershipByMemberIdArrivalDateDesc = 'MEMBERSHIP_BY_MEMBER_ID__ARRIVAL_DATE_DESC',
  MembershipByMemberIdAttendanceAsc = 'MEMBERSHIP_BY_MEMBER_ID__ATTENDANCE_ASC',
  MembershipByMemberIdAttendanceDesc = 'MEMBERSHIP_BY_MEMBER_ID__ATTENDANCE_DESC',
  MembershipByMemberIdAttendingAsc = 'MEMBERSHIP_BY_MEMBER_ID__ATTENDING_ASC',
  MembershipByMemberIdAttendingDesc = 'MEMBERSHIP_BY_MEMBER_ID__ATTENDING_DESC',
  MembershipByMemberIdDepartureDateAsc = 'MEMBERSHIP_BY_MEMBER_ID__DEPARTURE_DATE_ASC',
  MembershipByMemberIdDepartureDateDesc = 'MEMBERSHIP_BY_MEMBER_ID__DEPARTURE_DATE_DESC',
  MembershipByMemberIdHotelRoomIdAsc = 'MEMBERSHIP_BY_MEMBER_ID__HOTEL_ROOM_ID_ASC',
  MembershipByMemberIdHotelRoomIdDesc = 'MEMBERSHIP_BY_MEMBER_ID__HOTEL_ROOM_ID_DESC',
  MembershipByMemberIdInterestLevelAsc = 'MEMBERSHIP_BY_MEMBER_ID__INTEREST_LEVEL_ASC',
  MembershipByMemberIdInterestLevelDesc = 'MEMBERSHIP_BY_MEMBER_ID__INTEREST_LEVEL_DESC',
  MembershipByMemberIdMessageAsc = 'MEMBERSHIP_BY_MEMBER_ID__MESSAGE_ASC',
  MembershipByMemberIdMessageDesc = 'MEMBERSHIP_BY_MEMBER_ID__MESSAGE_DESC',
  MembershipByMemberIdRoomPreferenceAndNotesAsc = 'MEMBERSHIP_BY_MEMBER_ID__ROOM_PREFERENCE_AND_NOTES_ASC',
  MembershipByMemberIdRoomPreferenceAndNotesDesc = 'MEMBERSHIP_BY_MEMBER_ID__ROOM_PREFERENCE_AND_NOTES_DESC',
  MembershipByMemberIdRoomingPreferencesAsc = 'MEMBERSHIP_BY_MEMBER_ID__ROOMING_PREFERENCES_ASC',
  MembershipByMemberIdRoomingPreferencesDesc = 'MEMBERSHIP_BY_MEMBER_ID__ROOMING_PREFERENCES_DESC',
  MembershipByMemberIdRoomingWithAsc = 'MEMBERSHIP_BY_MEMBER_ID__ROOMING_WITH_ASC',
  MembershipByMemberIdRoomingWithDesc = 'MEMBERSHIP_BY_MEMBER_ID__ROOMING_WITH_DESC',
  MembershipByMemberIdUserIdAsc = 'MEMBERSHIP_BY_MEMBER_ID__USER_ID_ASC',
  MembershipByMemberIdUserIdDesc = 'MEMBERSHIP_BY_MEMBER_ID__USER_ID_DESC',
  MembershipByMemberIdVolunteerAsc = 'MEMBERSHIP_BY_MEMBER_ID__VOLUNTEER_ASC',
  MembershipByMemberIdVolunteerDesc = 'MEMBERSHIP_BY_MEMBER_ID__VOLUNTEER_DESC',
  MembershipByMemberIdYearAsc = 'MEMBERSHIP_BY_MEMBER_ID__YEAR_ASC',
  MembershipByMemberIdYearDesc = 'MEMBERSHIP_BY_MEMBER_ID__YEAR_DESC',
  MembershipByMemberIdOfferSubsidyAsc = 'MEMBERSHIP_BY_MEMBER_ID__OFFER_SUBSIDY_ASC',
  MembershipByMemberIdOfferSubsidyDesc = 'MEMBERSHIP_BY_MEMBER_ID__OFFER_SUBSIDY_DESC',
  MembershipByMemberIdRequestOldPriceAsc = 'MEMBERSHIP_BY_MEMBER_ID__REQUEST_OLD_PRICE_ASC',
  MembershipByMemberIdRequestOldPriceDesc = 'MEMBERSHIP_BY_MEMBER_ID__REQUEST_OLD_PRICE_DESC',
  MembershipByMemberIdAmountOwedAsc = 'MEMBERSHIP_BY_MEMBER_ID__AMOUNT_OWED_ASC',
  MembershipByMemberIdAmountOwedDesc = 'MEMBERSHIP_BY_MEMBER_ID__AMOUNT_OWED_DESC',
  MembershipByMemberIdAmountPaidAsc = 'MEMBERSHIP_BY_MEMBER_ID__AMOUNT_PAID_ASC',
  MembershipByMemberIdAmountPaidDesc = 'MEMBERSHIP_BY_MEMBER_ID__AMOUNT_PAID_DESC'
}

export type HotelRoom = Node & {
  __typename: 'HotelRoom'
  nodeId: Scalars['ID']
  id: Scalars['Int']
  description: Scalars['String']
  gamingRoom: Scalars['Boolean']
  occupancy: Scalars['String']
  quantity: Scalars['Int']
  rate: Scalars['String']
  bathroomType: Scalars['String']
  type: Scalars['String']
  memberships: MembershipsConnection
}

export type HotelRoomMembershipsArgs = {
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  before?: Maybe<Scalars['Cursor']>
  after?: Maybe<Scalars['Cursor']>
  orderBy?: Maybe<Array<MembershipsOrderBy>>
  condition?: Maybe<MembershipCondition>
  filter?: Maybe<MembershipFilter>
}

export type HotelRoomCondition = {
  id?: Maybe<Scalars['Int']>
  description?: Maybe<Scalars['String']>
  gamingRoom?: Maybe<Scalars['Boolean']>
  occupancy?: Maybe<Scalars['String']>
  quantity?: Maybe<Scalars['Int']>
  rate?: Maybe<Scalars['String']>
  bathroomType?: Maybe<Scalars['String']>
  type?: Maybe<Scalars['String']>
}

export type HotelRoomDetail = Node & {
  __typename: 'HotelRoomDetail'
  nodeId: Scalars['ID']
  id: Scalars['BigInt']
  version: Scalars['BigInt']
  bathroomType: Scalars['String']
  comment: Scalars['String']
  enabled: Scalars['Boolean']
  gamingRoom: Scalars['Boolean']
  internalRoomType: Scalars['String']
  name: Scalars['String']
  reserved: Scalars['Boolean']
  reservedFor: Scalars['String']
  roomType: Scalars['String']
  formattedRoomType: Scalars['String']
  memberHotelRoomAssignmentsByHotelRoomId: MemberHotelRoomAssignmentsConnection
}

export type HotelRoomDetailMemberHotelRoomAssignmentsByHotelRoomIdArgs = {
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  before?: Maybe<Scalars['Cursor']>
  after?: Maybe<Scalars['Cursor']>
  orderBy?: Maybe<Array<MemberHotelRoomAssignmentsOrderBy>>
  condition?: Maybe<MemberHotelRoomAssignmentCondition>
  filter?: Maybe<MemberHotelRoomAssignmentFilter>
}

export type HotelRoomDetailCondition = {
  id?: Maybe<Scalars['BigInt']>
  version?: Maybe<Scalars['BigInt']>
  bathroomType?: Maybe<Scalars['String']>
  comment?: Maybe<Scalars['String']>
  enabled?: Maybe<Scalars['Boolean']>
  gamingRoom?: Maybe<Scalars['Boolean']>
  internalRoomType?: Maybe<Scalars['String']>
  name?: Maybe<Scalars['String']>
  reserved?: Maybe<Scalars['Boolean']>
  reservedFor?: Maybe<Scalars['String']>
  roomType?: Maybe<Scalars['String']>
  formattedRoomType?: Maybe<Scalars['String']>
}

export type HotelRoomDetailFilter = {
  id?: Maybe<BigIntFilter>
  version?: Maybe<BigIntFilter>
  bathroomType?: Maybe<StringFilter>
  comment?: Maybe<StringFilter>
  enabled?: Maybe<BooleanFilter>
  gamingRoom?: Maybe<BooleanFilter>
  internalRoomType?: Maybe<StringFilter>
  name?: Maybe<StringFilter>
  reserved?: Maybe<BooleanFilter>
  reservedFor?: Maybe<StringFilter>
  roomType?: Maybe<StringFilter>
  formattedRoomType?: Maybe<StringFilter>
  and?: Maybe<Array<HotelRoomDetailFilter>>
  or?: Maybe<Array<HotelRoomDetailFilter>>
  not?: Maybe<HotelRoomDetailFilter>
}

export type HotelRoomDetailInput = {
  id?: Maybe<Scalars['BigInt']>
  version: Scalars['BigInt']
  bathroomType: Scalars['String']
  comment: Scalars['String']
  enabled: Scalars['Boolean']
  gamingRoom: Scalars['Boolean']
  internalRoomType: Scalars['String']
  name: Scalars['String']
  reserved: Scalars['Boolean']
  reservedFor: Scalars['String']
  roomType: Scalars['String']
  formattedRoomType: Scalars['String']
}

export type HotelRoomDetailPatch = {
  id?: Maybe<Scalars['BigInt']>
  version?: Maybe<Scalars['BigInt']>
  bathroomType?: Maybe<Scalars['String']>
  comment?: Maybe<Scalars['String']>
  enabled?: Maybe<Scalars['Boolean']>
  gamingRoom?: Maybe<Scalars['Boolean']>
  internalRoomType?: Maybe<Scalars['String']>
  name?: Maybe<Scalars['String']>
  reserved?: Maybe<Scalars['Boolean']>
  reservedFor?: Maybe<Scalars['String']>
  roomType?: Maybe<Scalars['String']>
  formattedRoomType?: Maybe<Scalars['String']>
}

export type HotelRoomDetailsConnection = {
  __typename: 'HotelRoomDetailsConnection'
  nodes: Array<Maybe<HotelRoomDetail>>
  edges: Array<HotelRoomDetailsEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type HotelRoomDetailsEdge = {
  __typename: 'HotelRoomDetailsEdge'
  cursor?: Maybe<Scalars['Cursor']>
  node?: Maybe<HotelRoomDetail>
}

export enum HotelRoomDetailsOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  VersionAsc = 'VERSION_ASC',
  VersionDesc = 'VERSION_DESC',
  BathroomTypeAsc = 'BATHROOM_TYPE_ASC',
  BathroomTypeDesc = 'BATHROOM_TYPE_DESC',
  CommentAsc = 'COMMENT_ASC',
  CommentDesc = 'COMMENT_DESC',
  EnabledAsc = 'ENABLED_ASC',
  EnabledDesc = 'ENABLED_DESC',
  GamingRoomAsc = 'GAMING_ROOM_ASC',
  GamingRoomDesc = 'GAMING_ROOM_DESC',
  InternalRoomTypeAsc = 'INTERNAL_ROOM_TYPE_ASC',
  InternalRoomTypeDesc = 'INTERNAL_ROOM_TYPE_DESC',
  NameAsc = 'NAME_ASC',
  NameDesc = 'NAME_DESC',
  ReservedAsc = 'RESERVED_ASC',
  ReservedDesc = 'RESERVED_DESC',
  ReservedForAsc = 'RESERVED_FOR_ASC',
  ReservedForDesc = 'RESERVED_FOR_DESC',
  RoomTypeAsc = 'ROOM_TYPE_ASC',
  RoomTypeDesc = 'ROOM_TYPE_DESC',
  FormattedRoomTypeAsc = 'FORMATTED_ROOM_TYPE_ASC',
  FormattedRoomTypeDesc = 'FORMATTED_ROOM_TYPE_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  MemberHotelRoomAssignmentsByHotelRoomIdCountAsc = 'MEMBER_HOTEL_ROOM_ASSIGNMENTS_BY_HOTEL_ROOM_ID__COUNT_ASC',
  MemberHotelRoomAssignmentsByHotelRoomIdCountDesc = 'MEMBER_HOTEL_ROOM_ASSIGNMENTS_BY_HOTEL_ROOM_ID__COUNT_DESC'
}

export type HotelRoomFilter = {
  id?: Maybe<IntFilter>
  description?: Maybe<StringFilter>
  gamingRoom?: Maybe<BooleanFilter>
  occupancy?: Maybe<StringFilter>
  quantity?: Maybe<IntFilter>
  rate?: Maybe<StringFilter>
  bathroomType?: Maybe<StringFilter>
  type?: Maybe<StringFilter>
  and?: Maybe<Array<HotelRoomFilter>>
  or?: Maybe<Array<HotelRoomFilter>>
  not?: Maybe<HotelRoomFilter>
}

export type HotelRoomInput = {
  id?: Maybe<Scalars['Int']>
  description: Scalars['String']
  gamingRoom: Scalars['Boolean']
  occupancy: Scalars['String']
  quantity: Scalars['Int']
  rate: Scalars['String']
  bathroomType: Scalars['String']
  type: Scalars['String']
}

export type HotelRoomPatch = {
  id?: Maybe<Scalars['Int']>
  description?: Maybe<Scalars['String']>
  gamingRoom?: Maybe<Scalars['Boolean']>
  occupancy?: Maybe<Scalars['String']>
  quantity?: Maybe<Scalars['Int']>
  rate?: Maybe<Scalars['String']>
  bathroomType?: Maybe<Scalars['String']>
  type?: Maybe<Scalars['String']>
}

export type HotelRoomsConnection = {
  __typename: 'HotelRoomsConnection'
  nodes: Array<Maybe<HotelRoom>>
  edges: Array<HotelRoomsEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type HotelRoomsEdge = {
  __typename: 'HotelRoomsEdge'
  cursor?: Maybe<Scalars['Cursor']>
  node?: Maybe<HotelRoom>
}

export enum HotelRoomsOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  DescriptionAsc = 'DESCRIPTION_ASC',
  DescriptionDesc = 'DESCRIPTION_DESC',
  GamingRoomAsc = 'GAMING_ROOM_ASC',
  GamingRoomDesc = 'GAMING_ROOM_DESC',
  OccupancyAsc = 'OCCUPANCY_ASC',
  OccupancyDesc = 'OCCUPANCY_DESC',
  QuantityAsc = 'QUANTITY_ASC',
  QuantityDesc = 'QUANTITY_DESC',
  RateAsc = 'RATE_ASC',
  RateDesc = 'RATE_DESC',
  BathroomTypeAsc = 'BATHROOM_TYPE_ASC',
  BathroomTypeDesc = 'BATHROOM_TYPE_DESC',
  TypeAsc = 'TYPE_ASC',
  TypeDesc = 'TYPE_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  MembershipsByHotelRoomIdCountAsc = 'MEMBERSHIPS_BY_HOTEL_ROOM_ID__COUNT_ASC',
  MembershipsByHotelRoomIdCountDesc = 'MEMBERSHIPS_BY_HOTEL_ROOM_ID__COUNT_DESC'
}

export type IntFilter = {
  isNull?: Maybe<Scalars['Boolean']>
  equalTo?: Maybe<Scalars['Int']>
  notEqualTo?: Maybe<Scalars['Int']>
  distinctFrom?: Maybe<Scalars['Int']>
  notDistinctFrom?: Maybe<Scalars['Int']>
  in?: Maybe<Array<Scalars['Int']>>
  notIn?: Maybe<Array<Scalars['Int']>>
  lessThan?: Maybe<Scalars['Int']>
  lessThanOrEqualTo?: Maybe<Scalars['Int']>
  greaterThan?: Maybe<Scalars['Int']>
  greaterThanOrEqualTo?: Maybe<Scalars['Int']>
}

export type Lookup = Node & {
  __typename: 'Lookup'
  nodeId: Scalars['ID']
  id: Scalars['Int']
  codeMaximum?: Maybe<Scalars['String']>
  codeMinimum?: Maybe<Scalars['String']>
  codeScale?: Maybe<Scalars['Int']>
  codeType: Scalars['String']
  internationalize: Scalars['Boolean']
  ordering: Scalars['String']
  realm: Scalars['String']
  valueMaximum?: Maybe<Scalars['String']>
  valueMinimum?: Maybe<Scalars['String']>
  valueScale?: Maybe<Scalars['Int']>
  valueType: Scalars['String']
  lookupValues: LookupValuesConnection
}

export type LookupLookupValuesArgs = {
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  before?: Maybe<Scalars['Cursor']>
  after?: Maybe<Scalars['Cursor']>
  orderBy?: Maybe<Array<LookupValuesOrderBy>>
  condition?: Maybe<LookupValueCondition>
  filter?: Maybe<LookupValueFilter>
}

export type LookupCondition = {
  id?: Maybe<Scalars['Int']>
  codeMaximum?: Maybe<Scalars['String']>
  codeMinimum?: Maybe<Scalars['String']>
  codeScale?: Maybe<Scalars['Int']>
  codeType?: Maybe<Scalars['String']>
  internationalize?: Maybe<Scalars['Boolean']>
  ordering?: Maybe<Scalars['String']>
  realm?: Maybe<Scalars['String']>
  valueMaximum?: Maybe<Scalars['String']>
  valueMinimum?: Maybe<Scalars['String']>
  valueScale?: Maybe<Scalars['Int']>
  valueType?: Maybe<Scalars['String']>
}

export type LookupFilter = {
  id?: Maybe<IntFilter>
  codeMaximum?: Maybe<StringFilter>
  codeMinimum?: Maybe<StringFilter>
  codeScale?: Maybe<IntFilter>
  codeType?: Maybe<StringFilter>
  internationalize?: Maybe<BooleanFilter>
  ordering?: Maybe<StringFilter>
  realm?: Maybe<StringFilter>
  valueMaximum?: Maybe<StringFilter>
  valueMinimum?: Maybe<StringFilter>
  valueScale?: Maybe<IntFilter>
  valueType?: Maybe<StringFilter>
  and?: Maybe<Array<LookupFilter>>
  or?: Maybe<Array<LookupFilter>>
  not?: Maybe<LookupFilter>
}

export type LookupInput = {
  id?: Maybe<Scalars['Int']>
  codeMaximum?: Maybe<Scalars['String']>
  codeMinimum?: Maybe<Scalars['String']>
  codeScale?: Maybe<Scalars['Int']>
  codeType: Scalars['String']
  internationalize: Scalars['Boolean']
  ordering: Scalars['String']
  realm: Scalars['String']
  valueMaximum?: Maybe<Scalars['String']>
  valueMinimum?: Maybe<Scalars['String']>
  valueScale?: Maybe<Scalars['Int']>
  valueType: Scalars['String']
}

export type LookupPatch = {
  id?: Maybe<Scalars['Int']>
  codeMaximum?: Maybe<Scalars['String']>
  codeMinimum?: Maybe<Scalars['String']>
  codeScale?: Maybe<Scalars['Int']>
  codeType?: Maybe<Scalars['String']>
  internationalize?: Maybe<Scalars['Boolean']>
  ordering?: Maybe<Scalars['String']>
  realm?: Maybe<Scalars['String']>
  valueMaximum?: Maybe<Scalars['String']>
  valueMinimum?: Maybe<Scalars['String']>
  valueScale?: Maybe<Scalars['Int']>
  valueType?: Maybe<Scalars['String']>
}

export type LookupsConnection = {
  __typename: 'LookupsConnection'
  nodes: Array<Maybe<Lookup>>
  edges: Array<LookupsEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type LookupsEdge = {
  __typename: 'LookupsEdge'
  cursor?: Maybe<Scalars['Cursor']>
  node?: Maybe<Lookup>
}

export enum LookupsOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  CodeMaximumAsc = 'CODE_MAXIMUM_ASC',
  CodeMaximumDesc = 'CODE_MAXIMUM_DESC',
  CodeMinimumAsc = 'CODE_MINIMUM_ASC',
  CodeMinimumDesc = 'CODE_MINIMUM_DESC',
  CodeScaleAsc = 'CODE_SCALE_ASC',
  CodeScaleDesc = 'CODE_SCALE_DESC',
  CodeTypeAsc = 'CODE_TYPE_ASC',
  CodeTypeDesc = 'CODE_TYPE_DESC',
  InternationalizeAsc = 'INTERNATIONALIZE_ASC',
  InternationalizeDesc = 'INTERNATIONALIZE_DESC',
  OrderingAsc = 'ORDERING_ASC',
  OrderingDesc = 'ORDERING_DESC',
  RealmAsc = 'REALM_ASC',
  RealmDesc = 'REALM_DESC',
  ValueMaximumAsc = 'VALUE_MAXIMUM_ASC',
  ValueMaximumDesc = 'VALUE_MAXIMUM_DESC',
  ValueMinimumAsc = 'VALUE_MINIMUM_ASC',
  ValueMinimumDesc = 'VALUE_MINIMUM_DESC',
  ValueScaleAsc = 'VALUE_SCALE_ASC',
  ValueScaleDesc = 'VALUE_SCALE_DESC',
  ValueTypeAsc = 'VALUE_TYPE_ASC',
  ValueTypeDesc = 'VALUE_TYPE_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  LookupValuesByLookupIdCountAsc = 'LOOKUP_VALUES_BY_LOOKUP_ID__COUNT_ASC',
  LookupValuesByLookupIdCountDesc = 'LOOKUP_VALUES_BY_LOOKUP_ID__COUNT_DESC'
}

export type LookupValue = Node & {
  __typename: 'LookupValue'
  nodeId: Scalars['ID']
  id: Scalars['Int']
  code: Scalars['String']
  lookupId: Scalars['Int']
  numericSequencer: Scalars['BigFloat']
  sequencer: Scalars['Int']
  stringSequencer: Scalars['String']
  value: Scalars['String']
  lookup?: Maybe<Lookup>
}

export type LookupValueCondition = {
  id?: Maybe<Scalars['Int']>
  code?: Maybe<Scalars['String']>
  lookupId?: Maybe<Scalars['Int']>
  numericSequencer?: Maybe<Scalars['BigFloat']>
  sequencer?: Maybe<Scalars['Int']>
  stringSequencer?: Maybe<Scalars['String']>
  value?: Maybe<Scalars['String']>
}

export type LookupValueFilter = {
  id?: Maybe<IntFilter>
  code?: Maybe<StringFilter>
  lookupId?: Maybe<IntFilter>
  numericSequencer?: Maybe<BigFloatFilter>
  sequencer?: Maybe<IntFilter>
  stringSequencer?: Maybe<StringFilter>
  value?: Maybe<StringFilter>
  and?: Maybe<Array<LookupValueFilter>>
  or?: Maybe<Array<LookupValueFilter>>
  not?: Maybe<LookupValueFilter>
}

export type LookupValueInput = {
  id?: Maybe<Scalars['Int']>
  code: Scalars['String']
  lookupId: Scalars['Int']
  numericSequencer: Scalars['BigFloat']
  sequencer: Scalars['Int']
  stringSequencer: Scalars['String']
  value: Scalars['String']
}

export type LookupValuePatch = {
  id?: Maybe<Scalars['Int']>
  code?: Maybe<Scalars['String']>
  lookupId?: Maybe<Scalars['Int']>
  numericSequencer?: Maybe<Scalars['BigFloat']>
  sequencer?: Maybe<Scalars['Int']>
  stringSequencer?: Maybe<Scalars['String']>
  value?: Maybe<Scalars['String']>
}

export type LookupValuesConnection = {
  __typename: 'LookupValuesConnection'
  nodes: Array<Maybe<LookupValue>>
  edges: Array<LookupValuesEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type LookupValuesEdge = {
  __typename: 'LookupValuesEdge'
  cursor?: Maybe<Scalars['Cursor']>
  node?: Maybe<LookupValue>
}

export enum LookupValuesOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  CodeAsc = 'CODE_ASC',
  CodeDesc = 'CODE_DESC',
  LookupIdAsc = 'LOOKUP_ID_ASC',
  LookupIdDesc = 'LOOKUP_ID_DESC',
  NumericSequencerAsc = 'NUMERIC_SEQUENCER_ASC',
  NumericSequencerDesc = 'NUMERIC_SEQUENCER_DESC',
  SequencerAsc = 'SEQUENCER_ASC',
  SequencerDesc = 'SEQUENCER_DESC',
  StringSequencerAsc = 'STRING_SEQUENCER_ASC',
  StringSequencerDesc = 'STRING_SEQUENCER_DESC',
  ValueAsc = 'VALUE_ASC',
  ValueDesc = 'VALUE_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  LookupByLookupIdIdAsc = 'LOOKUP_BY_LOOKUP_ID__ID_ASC',
  LookupByLookupIdIdDesc = 'LOOKUP_BY_LOOKUP_ID__ID_DESC',
  LookupByLookupIdCodeMaximumAsc = 'LOOKUP_BY_LOOKUP_ID__CODE_MAXIMUM_ASC',
  LookupByLookupIdCodeMaximumDesc = 'LOOKUP_BY_LOOKUP_ID__CODE_MAXIMUM_DESC',
  LookupByLookupIdCodeMinimumAsc = 'LOOKUP_BY_LOOKUP_ID__CODE_MINIMUM_ASC',
  LookupByLookupIdCodeMinimumDesc = 'LOOKUP_BY_LOOKUP_ID__CODE_MINIMUM_DESC',
  LookupByLookupIdCodeScaleAsc = 'LOOKUP_BY_LOOKUP_ID__CODE_SCALE_ASC',
  LookupByLookupIdCodeScaleDesc = 'LOOKUP_BY_LOOKUP_ID__CODE_SCALE_DESC',
  LookupByLookupIdCodeTypeAsc = 'LOOKUP_BY_LOOKUP_ID__CODE_TYPE_ASC',
  LookupByLookupIdCodeTypeDesc = 'LOOKUP_BY_LOOKUP_ID__CODE_TYPE_DESC',
  LookupByLookupIdInternationalizeAsc = 'LOOKUP_BY_LOOKUP_ID__INTERNATIONALIZE_ASC',
  LookupByLookupIdInternationalizeDesc = 'LOOKUP_BY_LOOKUP_ID__INTERNATIONALIZE_DESC',
  LookupByLookupIdOrderingAsc = 'LOOKUP_BY_LOOKUP_ID__ORDERING_ASC',
  LookupByLookupIdOrderingDesc = 'LOOKUP_BY_LOOKUP_ID__ORDERING_DESC',
  LookupByLookupIdRealmAsc = 'LOOKUP_BY_LOOKUP_ID__REALM_ASC',
  LookupByLookupIdRealmDesc = 'LOOKUP_BY_LOOKUP_ID__REALM_DESC',
  LookupByLookupIdValueMaximumAsc = 'LOOKUP_BY_LOOKUP_ID__VALUE_MAXIMUM_ASC',
  LookupByLookupIdValueMaximumDesc = 'LOOKUP_BY_LOOKUP_ID__VALUE_MAXIMUM_DESC',
  LookupByLookupIdValueMinimumAsc = 'LOOKUP_BY_LOOKUP_ID__VALUE_MINIMUM_ASC',
  LookupByLookupIdValueMinimumDesc = 'LOOKUP_BY_LOOKUP_ID__VALUE_MINIMUM_DESC',
  LookupByLookupIdValueScaleAsc = 'LOOKUP_BY_LOOKUP_ID__VALUE_SCALE_ASC',
  LookupByLookupIdValueScaleDesc = 'LOOKUP_BY_LOOKUP_ID__VALUE_SCALE_DESC',
  LookupByLookupIdValueTypeAsc = 'LOOKUP_BY_LOOKUP_ID__VALUE_TYPE_ASC',
  LookupByLookupIdValueTypeDesc = 'LOOKUP_BY_LOOKUP_ID__VALUE_TYPE_DESC'
}

export type MemberHotelRoomAssignment = Node & {
  __typename: 'MemberHotelRoomAssignment'
  nodeId: Scalars['ID']
  memberId: Scalars['BigInt']
  hotelRoomId: Scalars['BigInt']
  roomOwner: Scalars['Boolean']
  year: Scalars['Int']
  member?: Maybe<Membership>
  hotelRoom?: Maybe<HotelRoomDetail>
}

export type MemberHotelRoomAssignmentCondition = {
  memberId?: Maybe<Scalars['BigInt']>
  hotelRoomId?: Maybe<Scalars['BigInt']>
  roomOwner?: Maybe<Scalars['Boolean']>
  year?: Maybe<Scalars['Int']>
}

export type MemberHotelRoomAssignmentFilter = {
  memberId?: Maybe<BigIntFilter>
  hotelRoomId?: Maybe<BigIntFilter>
  roomOwner?: Maybe<BooleanFilter>
  year?: Maybe<IntFilter>
  and?: Maybe<Array<MemberHotelRoomAssignmentFilter>>
  or?: Maybe<Array<MemberHotelRoomAssignmentFilter>>
  not?: Maybe<MemberHotelRoomAssignmentFilter>
}

export type MemberHotelRoomAssignmentInput = {
  memberId: Scalars['BigInt']
  hotelRoomId: Scalars['BigInt']
  roomOwner: Scalars['Boolean']
  year: Scalars['Int']
}

export type MemberHotelRoomAssignmentPatch = {
  memberId?: Maybe<Scalars['BigInt']>
  hotelRoomId?: Maybe<Scalars['BigInt']>
  roomOwner?: Maybe<Scalars['Boolean']>
  year?: Maybe<Scalars['Int']>
}

export type MemberHotelRoomAssignmentsConnection = {
  __typename: 'MemberHotelRoomAssignmentsConnection'
  nodes: Array<Maybe<MemberHotelRoomAssignment>>
  edges: Array<MemberHotelRoomAssignmentsEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type MemberHotelRoomAssignmentsEdge = {
  __typename: 'MemberHotelRoomAssignmentsEdge'
  cursor?: Maybe<Scalars['Cursor']>
  node?: Maybe<MemberHotelRoomAssignment>
}

export enum MemberHotelRoomAssignmentsOrderBy {
  Natural = 'NATURAL',
  MemberIdAsc = 'MEMBER_ID_ASC',
  MemberIdDesc = 'MEMBER_ID_DESC',
  HotelRoomIdAsc = 'HOTEL_ROOM_ID_ASC',
  HotelRoomIdDesc = 'HOTEL_ROOM_ID_DESC',
  RoomOwnerAsc = 'ROOM_OWNER_ASC',
  RoomOwnerDesc = 'ROOM_OWNER_DESC',
  YearAsc = 'YEAR_ASC',
  YearDesc = 'YEAR_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  MembershipByMemberIdIdAsc = 'MEMBERSHIP_BY_MEMBER_ID__ID_ASC',
  MembershipByMemberIdIdDesc = 'MEMBERSHIP_BY_MEMBER_ID__ID_DESC',
  MembershipByMemberIdArrivalDateAsc = 'MEMBERSHIP_BY_MEMBER_ID__ARRIVAL_DATE_ASC',
  MembershipByMemberIdArrivalDateDesc = 'MEMBERSHIP_BY_MEMBER_ID__ARRIVAL_DATE_DESC',
  MembershipByMemberIdAttendanceAsc = 'MEMBERSHIP_BY_MEMBER_ID__ATTENDANCE_ASC',
  MembershipByMemberIdAttendanceDesc = 'MEMBERSHIP_BY_MEMBER_ID__ATTENDANCE_DESC',
  MembershipByMemberIdAttendingAsc = 'MEMBERSHIP_BY_MEMBER_ID__ATTENDING_ASC',
  MembershipByMemberIdAttendingDesc = 'MEMBERSHIP_BY_MEMBER_ID__ATTENDING_DESC',
  MembershipByMemberIdDepartureDateAsc = 'MEMBERSHIP_BY_MEMBER_ID__DEPARTURE_DATE_ASC',
  MembershipByMemberIdDepartureDateDesc = 'MEMBERSHIP_BY_MEMBER_ID__DEPARTURE_DATE_DESC',
  MembershipByMemberIdHotelRoomIdAsc = 'MEMBERSHIP_BY_MEMBER_ID__HOTEL_ROOM_ID_ASC',
  MembershipByMemberIdHotelRoomIdDesc = 'MEMBERSHIP_BY_MEMBER_ID__HOTEL_ROOM_ID_DESC',
  MembershipByMemberIdInterestLevelAsc = 'MEMBERSHIP_BY_MEMBER_ID__INTEREST_LEVEL_ASC',
  MembershipByMemberIdInterestLevelDesc = 'MEMBERSHIP_BY_MEMBER_ID__INTEREST_LEVEL_DESC',
  MembershipByMemberIdMessageAsc = 'MEMBERSHIP_BY_MEMBER_ID__MESSAGE_ASC',
  MembershipByMemberIdMessageDesc = 'MEMBERSHIP_BY_MEMBER_ID__MESSAGE_DESC',
  MembershipByMemberIdRoomPreferenceAndNotesAsc = 'MEMBERSHIP_BY_MEMBER_ID__ROOM_PREFERENCE_AND_NOTES_ASC',
  MembershipByMemberIdRoomPreferenceAndNotesDesc = 'MEMBERSHIP_BY_MEMBER_ID__ROOM_PREFERENCE_AND_NOTES_DESC',
  MembershipByMemberIdRoomingPreferencesAsc = 'MEMBERSHIP_BY_MEMBER_ID__ROOMING_PREFERENCES_ASC',
  MembershipByMemberIdRoomingPreferencesDesc = 'MEMBERSHIP_BY_MEMBER_ID__ROOMING_PREFERENCES_DESC',
  MembershipByMemberIdRoomingWithAsc = 'MEMBERSHIP_BY_MEMBER_ID__ROOMING_WITH_ASC',
  MembershipByMemberIdRoomingWithDesc = 'MEMBERSHIP_BY_MEMBER_ID__ROOMING_WITH_DESC',
  MembershipByMemberIdUserIdAsc = 'MEMBERSHIP_BY_MEMBER_ID__USER_ID_ASC',
  MembershipByMemberIdUserIdDesc = 'MEMBERSHIP_BY_MEMBER_ID__USER_ID_DESC',
  MembershipByMemberIdVolunteerAsc = 'MEMBERSHIP_BY_MEMBER_ID__VOLUNTEER_ASC',
  MembershipByMemberIdVolunteerDesc = 'MEMBERSHIP_BY_MEMBER_ID__VOLUNTEER_DESC',
  MembershipByMemberIdYearAsc = 'MEMBERSHIP_BY_MEMBER_ID__YEAR_ASC',
  MembershipByMemberIdYearDesc = 'MEMBERSHIP_BY_MEMBER_ID__YEAR_DESC',
  MembershipByMemberIdOfferSubsidyAsc = 'MEMBERSHIP_BY_MEMBER_ID__OFFER_SUBSIDY_ASC',
  MembershipByMemberIdOfferSubsidyDesc = 'MEMBERSHIP_BY_MEMBER_ID__OFFER_SUBSIDY_DESC',
  MembershipByMemberIdRequestOldPriceAsc = 'MEMBERSHIP_BY_MEMBER_ID__REQUEST_OLD_PRICE_ASC',
  MembershipByMemberIdRequestOldPriceDesc = 'MEMBERSHIP_BY_MEMBER_ID__REQUEST_OLD_PRICE_DESC',
  MembershipByMemberIdAmountOwedAsc = 'MEMBERSHIP_BY_MEMBER_ID__AMOUNT_OWED_ASC',
  MembershipByMemberIdAmountOwedDesc = 'MEMBERSHIP_BY_MEMBER_ID__AMOUNT_OWED_DESC',
  MembershipByMemberIdAmountPaidAsc = 'MEMBERSHIP_BY_MEMBER_ID__AMOUNT_PAID_ASC',
  MembershipByMemberIdAmountPaidDesc = 'MEMBERSHIP_BY_MEMBER_ID__AMOUNT_PAID_DESC',
  HotelRoomDetailByHotelRoomIdIdAsc = 'HOTEL_ROOM_DETAIL_BY_HOTEL_ROOM_ID__ID_ASC',
  HotelRoomDetailByHotelRoomIdIdDesc = 'HOTEL_ROOM_DETAIL_BY_HOTEL_ROOM_ID__ID_DESC',
  HotelRoomDetailByHotelRoomIdVersionAsc = 'HOTEL_ROOM_DETAIL_BY_HOTEL_ROOM_ID__VERSION_ASC',
  HotelRoomDetailByHotelRoomIdVersionDesc = 'HOTEL_ROOM_DETAIL_BY_HOTEL_ROOM_ID__VERSION_DESC',
  HotelRoomDetailByHotelRoomIdBathroomTypeAsc = 'HOTEL_ROOM_DETAIL_BY_HOTEL_ROOM_ID__BATHROOM_TYPE_ASC',
  HotelRoomDetailByHotelRoomIdBathroomTypeDesc = 'HOTEL_ROOM_DETAIL_BY_HOTEL_ROOM_ID__BATHROOM_TYPE_DESC',
  HotelRoomDetailByHotelRoomIdCommentAsc = 'HOTEL_ROOM_DETAIL_BY_HOTEL_ROOM_ID__COMMENT_ASC',
  HotelRoomDetailByHotelRoomIdCommentDesc = 'HOTEL_ROOM_DETAIL_BY_HOTEL_ROOM_ID__COMMENT_DESC',
  HotelRoomDetailByHotelRoomIdEnabledAsc = 'HOTEL_ROOM_DETAIL_BY_HOTEL_ROOM_ID__ENABLED_ASC',
  HotelRoomDetailByHotelRoomIdEnabledDesc = 'HOTEL_ROOM_DETAIL_BY_HOTEL_ROOM_ID__ENABLED_DESC',
  HotelRoomDetailByHotelRoomIdGamingRoomAsc = 'HOTEL_ROOM_DETAIL_BY_HOTEL_ROOM_ID__GAMING_ROOM_ASC',
  HotelRoomDetailByHotelRoomIdGamingRoomDesc = 'HOTEL_ROOM_DETAIL_BY_HOTEL_ROOM_ID__GAMING_ROOM_DESC',
  HotelRoomDetailByHotelRoomIdInternalRoomTypeAsc = 'HOTEL_ROOM_DETAIL_BY_HOTEL_ROOM_ID__INTERNAL_ROOM_TYPE_ASC',
  HotelRoomDetailByHotelRoomIdInternalRoomTypeDesc = 'HOTEL_ROOM_DETAIL_BY_HOTEL_ROOM_ID__INTERNAL_ROOM_TYPE_DESC',
  HotelRoomDetailByHotelRoomIdNameAsc = 'HOTEL_ROOM_DETAIL_BY_HOTEL_ROOM_ID__NAME_ASC',
  HotelRoomDetailByHotelRoomIdNameDesc = 'HOTEL_ROOM_DETAIL_BY_HOTEL_ROOM_ID__NAME_DESC',
  HotelRoomDetailByHotelRoomIdReservedAsc = 'HOTEL_ROOM_DETAIL_BY_HOTEL_ROOM_ID__RESERVED_ASC',
  HotelRoomDetailByHotelRoomIdReservedDesc = 'HOTEL_ROOM_DETAIL_BY_HOTEL_ROOM_ID__RESERVED_DESC',
  HotelRoomDetailByHotelRoomIdReservedForAsc = 'HOTEL_ROOM_DETAIL_BY_HOTEL_ROOM_ID__RESERVED_FOR_ASC',
  HotelRoomDetailByHotelRoomIdReservedForDesc = 'HOTEL_ROOM_DETAIL_BY_HOTEL_ROOM_ID__RESERVED_FOR_DESC',
  HotelRoomDetailByHotelRoomIdRoomTypeAsc = 'HOTEL_ROOM_DETAIL_BY_HOTEL_ROOM_ID__ROOM_TYPE_ASC',
  HotelRoomDetailByHotelRoomIdRoomTypeDesc = 'HOTEL_ROOM_DETAIL_BY_HOTEL_ROOM_ID__ROOM_TYPE_DESC',
  HotelRoomDetailByHotelRoomIdFormattedRoomTypeAsc = 'HOTEL_ROOM_DETAIL_BY_HOTEL_ROOM_ID__FORMATTED_ROOM_TYPE_ASC',
  HotelRoomDetailByHotelRoomIdFormattedRoomTypeDesc = 'HOTEL_ROOM_DETAIL_BY_HOTEL_ROOM_ID__FORMATTED_ROOM_TYPE_DESC'
}

export type Membership = Node & {
  __typename: 'Membership'
  nodeId: Scalars['ID']
  id: Scalars['Int']
  arrivalDate: Scalars['Datetime']
  attendance: Scalars['String']
  attending: Scalars['Boolean']
  departureDate: Scalars['Datetime']
  hotelRoomId: Scalars['Int']
  interestLevel: Scalars['String']
  message: Scalars['String']
  roomPreferenceAndNotes: Scalars['String']
  roomingPreferences: Scalars['String']
  roomingWith: Scalars['String']
  userId: Scalars['Int']
  volunteer: Scalars['Boolean']
  year: Scalars['Int']
  offerSubsidy: Scalars['Boolean']
  requestOldPrice: Scalars['Boolean']
  amountOwed: Scalars['Float']
  amountPaid: Scalars['Float']
  hotelRoom?: Maybe<HotelRoom>
  user?: Maybe<User>
  gameAssignmentsByMemberId: GameAssignmentsConnection
  gameChoicesByMemberId: GameChoicesConnection
  gameSubmissionsByMemberId: GameSubmissionsConnection
  memberHotelRoomAssignmentsByMemberId: MemberHotelRoomAssignmentsConnection
}

export type MembershipGameAssignmentsByMemberIdArgs = {
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  before?: Maybe<Scalars['Cursor']>
  after?: Maybe<Scalars['Cursor']>
  orderBy?: Maybe<Array<GameAssignmentsOrderBy>>
  condition?: Maybe<GameAssignmentCondition>
  filter?: Maybe<GameAssignmentFilter>
}

export type MembershipGameChoicesByMemberIdArgs = {
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  before?: Maybe<Scalars['Cursor']>
  after?: Maybe<Scalars['Cursor']>
  orderBy?: Maybe<Array<GameChoicesOrderBy>>
  condition?: Maybe<GameChoiceCondition>
  filter?: Maybe<GameChoiceFilter>
}

export type MembershipGameSubmissionsByMemberIdArgs = {
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  before?: Maybe<Scalars['Cursor']>
  after?: Maybe<Scalars['Cursor']>
  orderBy?: Maybe<Array<GameSubmissionsOrderBy>>
  condition?: Maybe<GameSubmissionCondition>
  filter?: Maybe<GameSubmissionFilter>
}

export type MembershipMemberHotelRoomAssignmentsByMemberIdArgs = {
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  before?: Maybe<Scalars['Cursor']>
  after?: Maybe<Scalars['Cursor']>
  orderBy?: Maybe<Array<MemberHotelRoomAssignmentsOrderBy>>
  condition?: Maybe<MemberHotelRoomAssignmentCondition>
  filter?: Maybe<MemberHotelRoomAssignmentFilter>
}

export type MembershipCondition = {
  id?: Maybe<Scalars['Int']>
  arrivalDate?: Maybe<Scalars['Datetime']>
  attendance?: Maybe<Scalars['String']>
  attending?: Maybe<Scalars['Boolean']>
  departureDate?: Maybe<Scalars['Datetime']>
  hotelRoomId?: Maybe<Scalars['Int']>
  interestLevel?: Maybe<Scalars['String']>
  message?: Maybe<Scalars['String']>
  roomPreferenceAndNotes?: Maybe<Scalars['String']>
  roomingPreferences?: Maybe<Scalars['String']>
  roomingWith?: Maybe<Scalars['String']>
  userId?: Maybe<Scalars['Int']>
  volunteer?: Maybe<Scalars['Boolean']>
  year?: Maybe<Scalars['Int']>
  offerSubsidy?: Maybe<Scalars['Boolean']>
  requestOldPrice?: Maybe<Scalars['Boolean']>
  amountOwed?: Maybe<Scalars['Float']>
  amountPaid?: Maybe<Scalars['Float']>
}

export type MembershipFilter = {
  id?: Maybe<IntFilter>
  arrivalDate?: Maybe<DatetimeFilter>
  attendance?: Maybe<StringFilter>
  attending?: Maybe<BooleanFilter>
  departureDate?: Maybe<DatetimeFilter>
  hotelRoomId?: Maybe<IntFilter>
  interestLevel?: Maybe<StringFilter>
  message?: Maybe<StringFilter>
  roomPreferenceAndNotes?: Maybe<StringFilter>
  roomingPreferences?: Maybe<StringFilter>
  roomingWith?: Maybe<StringFilter>
  userId?: Maybe<IntFilter>
  volunteer?: Maybe<BooleanFilter>
  year?: Maybe<IntFilter>
  offerSubsidy?: Maybe<BooleanFilter>
  requestOldPrice?: Maybe<BooleanFilter>
  amountOwed?: Maybe<FloatFilter>
  amountPaid?: Maybe<FloatFilter>
  and?: Maybe<Array<MembershipFilter>>
  or?: Maybe<Array<MembershipFilter>>
  not?: Maybe<MembershipFilter>
}

export type MembershipInput = {
  id?: Maybe<Scalars['Int']>
  arrivalDate: Scalars['Datetime']
  attendance: Scalars['String']
  attending: Scalars['Boolean']
  departureDate: Scalars['Datetime']
  hotelRoomId: Scalars['Int']
  interestLevel: Scalars['String']
  message: Scalars['String']
  roomPreferenceAndNotes: Scalars['String']
  roomingPreferences: Scalars['String']
  roomingWith: Scalars['String']
  userId: Scalars['Int']
  volunteer: Scalars['Boolean']
  year: Scalars['Int']
  offerSubsidy: Scalars['Boolean']
  requestOldPrice: Scalars['Boolean']
  amountOwed: Scalars['Float']
  amountPaid: Scalars['Float']
}

export type MembershipPatch = {
  id?: Maybe<Scalars['Int']>
  arrivalDate?: Maybe<Scalars['Datetime']>
  attendance?: Maybe<Scalars['String']>
  attending?: Maybe<Scalars['Boolean']>
  departureDate?: Maybe<Scalars['Datetime']>
  hotelRoomId?: Maybe<Scalars['Int']>
  interestLevel?: Maybe<Scalars['String']>
  message?: Maybe<Scalars['String']>
  roomPreferenceAndNotes?: Maybe<Scalars['String']>
  roomingPreferences?: Maybe<Scalars['String']>
  roomingWith?: Maybe<Scalars['String']>
  userId?: Maybe<Scalars['Int']>
  volunteer?: Maybe<Scalars['Boolean']>
  year?: Maybe<Scalars['Int']>
  offerSubsidy?: Maybe<Scalars['Boolean']>
  requestOldPrice?: Maybe<Scalars['Boolean']>
  amountOwed?: Maybe<Scalars['Float']>
  amountPaid?: Maybe<Scalars['Float']>
}

export type MembershipsConnection = {
  __typename: 'MembershipsConnection'
  nodes: Array<Maybe<Membership>>
  edges: Array<MembershipsEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type MembershipsEdge = {
  __typename: 'MembershipsEdge'
  cursor?: Maybe<Scalars['Cursor']>
  node?: Maybe<Membership>
}

export enum MembershipsOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  ArrivalDateAsc = 'ARRIVAL_DATE_ASC',
  ArrivalDateDesc = 'ARRIVAL_DATE_DESC',
  AttendanceAsc = 'ATTENDANCE_ASC',
  AttendanceDesc = 'ATTENDANCE_DESC',
  AttendingAsc = 'ATTENDING_ASC',
  AttendingDesc = 'ATTENDING_DESC',
  DepartureDateAsc = 'DEPARTURE_DATE_ASC',
  DepartureDateDesc = 'DEPARTURE_DATE_DESC',
  HotelRoomIdAsc = 'HOTEL_ROOM_ID_ASC',
  HotelRoomIdDesc = 'HOTEL_ROOM_ID_DESC',
  InterestLevelAsc = 'INTEREST_LEVEL_ASC',
  InterestLevelDesc = 'INTEREST_LEVEL_DESC',
  MessageAsc = 'MESSAGE_ASC',
  MessageDesc = 'MESSAGE_DESC',
  RoomPreferenceAndNotesAsc = 'ROOM_PREFERENCE_AND_NOTES_ASC',
  RoomPreferenceAndNotesDesc = 'ROOM_PREFERENCE_AND_NOTES_DESC',
  RoomingPreferencesAsc = 'ROOMING_PREFERENCES_ASC',
  RoomingPreferencesDesc = 'ROOMING_PREFERENCES_DESC',
  RoomingWithAsc = 'ROOMING_WITH_ASC',
  RoomingWithDesc = 'ROOMING_WITH_DESC',
  UserIdAsc = 'USER_ID_ASC',
  UserIdDesc = 'USER_ID_DESC',
  VolunteerAsc = 'VOLUNTEER_ASC',
  VolunteerDesc = 'VOLUNTEER_DESC',
  YearAsc = 'YEAR_ASC',
  YearDesc = 'YEAR_DESC',
  OfferSubsidyAsc = 'OFFER_SUBSIDY_ASC',
  OfferSubsidyDesc = 'OFFER_SUBSIDY_DESC',
  RequestOldPriceAsc = 'REQUEST_OLD_PRICE_ASC',
  RequestOldPriceDesc = 'REQUEST_OLD_PRICE_DESC',
  AmountOwedAsc = 'AMOUNT_OWED_ASC',
  AmountOwedDesc = 'AMOUNT_OWED_DESC',
  AmountPaidAsc = 'AMOUNT_PAID_ASC',
  AmountPaidDesc = 'AMOUNT_PAID_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  HotelRoomByHotelRoomIdIdAsc = 'HOTEL_ROOM_BY_HOTEL_ROOM_ID__ID_ASC',
  HotelRoomByHotelRoomIdIdDesc = 'HOTEL_ROOM_BY_HOTEL_ROOM_ID__ID_DESC',
  HotelRoomByHotelRoomIdDescriptionAsc = 'HOTEL_ROOM_BY_HOTEL_ROOM_ID__DESCRIPTION_ASC',
  HotelRoomByHotelRoomIdDescriptionDesc = 'HOTEL_ROOM_BY_HOTEL_ROOM_ID__DESCRIPTION_DESC',
  HotelRoomByHotelRoomIdGamingRoomAsc = 'HOTEL_ROOM_BY_HOTEL_ROOM_ID__GAMING_ROOM_ASC',
  HotelRoomByHotelRoomIdGamingRoomDesc = 'HOTEL_ROOM_BY_HOTEL_ROOM_ID__GAMING_ROOM_DESC',
  HotelRoomByHotelRoomIdOccupancyAsc = 'HOTEL_ROOM_BY_HOTEL_ROOM_ID__OCCUPANCY_ASC',
  HotelRoomByHotelRoomIdOccupancyDesc = 'HOTEL_ROOM_BY_HOTEL_ROOM_ID__OCCUPANCY_DESC',
  HotelRoomByHotelRoomIdQuantityAsc = 'HOTEL_ROOM_BY_HOTEL_ROOM_ID__QUANTITY_ASC',
  HotelRoomByHotelRoomIdQuantityDesc = 'HOTEL_ROOM_BY_HOTEL_ROOM_ID__QUANTITY_DESC',
  HotelRoomByHotelRoomIdRateAsc = 'HOTEL_ROOM_BY_HOTEL_ROOM_ID__RATE_ASC',
  HotelRoomByHotelRoomIdRateDesc = 'HOTEL_ROOM_BY_HOTEL_ROOM_ID__RATE_DESC',
  HotelRoomByHotelRoomIdBathroomTypeAsc = 'HOTEL_ROOM_BY_HOTEL_ROOM_ID__BATHROOM_TYPE_ASC',
  HotelRoomByHotelRoomIdBathroomTypeDesc = 'HOTEL_ROOM_BY_HOTEL_ROOM_ID__BATHROOM_TYPE_DESC',
  HotelRoomByHotelRoomIdTypeAsc = 'HOTEL_ROOM_BY_HOTEL_ROOM_ID__TYPE_ASC',
  HotelRoomByHotelRoomIdTypeDesc = 'HOTEL_ROOM_BY_HOTEL_ROOM_ID__TYPE_DESC',
  UserByUserIdIdAsc = 'USER_BY_USER_ID__ID_ASC',
  UserByUserIdIdDesc = 'USER_BY_USER_ID__ID_DESC',
  UserByUserIdAccountLockedAsc = 'USER_BY_USER_ID__ACCOUNT_LOCKED_ASC',
  UserByUserIdAccountLockedDesc = 'USER_BY_USER_ID__ACCOUNT_LOCKED_DESC',
  UserByUserIdEnabledAsc = 'USER_BY_USER_ID__ENABLED_ASC',
  UserByUserIdEnabledDesc = 'USER_BY_USER_ID__ENABLED_DESC',
  UserByUserIdPasswordAsc = 'USER_BY_USER_ID__PASSWORD_ASC',
  UserByUserIdPasswordDesc = 'USER_BY_USER_ID__PASSWORD_DESC',
  UserByUserIdProfileIdAsc = 'USER_BY_USER_ID__PROFILE_ID_ASC',
  UserByUserIdProfileIdDesc = 'USER_BY_USER_ID__PROFILE_ID_DESC',
  UserByUserIdUsernameAsc = 'USER_BY_USER_ID__USERNAME_ASC',
  UserByUserIdUsernameDesc = 'USER_BY_USER_ID__USERNAME_DESC',
  GameAssignmentsByMemberIdCountAsc = 'GAME_ASSIGNMENTS_BY_MEMBER_ID__COUNT_ASC',
  GameAssignmentsByMemberIdCountDesc = 'GAME_ASSIGNMENTS_BY_MEMBER_ID__COUNT_DESC',
  GameChoicesByMemberIdCountAsc = 'GAME_CHOICES_BY_MEMBER_ID__COUNT_ASC',
  GameChoicesByMemberIdCountDesc = 'GAME_CHOICES_BY_MEMBER_ID__COUNT_DESC',
  GameSubmissionsByMemberIdCountAsc = 'GAME_SUBMISSIONS_BY_MEMBER_ID__COUNT_ASC',
  GameSubmissionsByMemberIdCountDesc = 'GAME_SUBMISSIONS_BY_MEMBER_ID__COUNT_DESC',
  MemberHotelRoomAssignmentsByMemberIdCountAsc = 'MEMBER_HOTEL_ROOM_ASSIGNMENTS_BY_MEMBER_ID__COUNT_ASC',
  MemberHotelRoomAssignmentsByMemberIdCountDesc = 'MEMBER_HOTEL_ROOM_ASSIGNMENTS_BY_MEMBER_ID__COUNT_DESC'
}

export type Mutation = {
  __typename: 'Mutation'
  createGame?: Maybe<CreateGamePayload>
  createGameAssignment?: Maybe<CreateGameAssignmentPayload>
  createGameChoice?: Maybe<CreateGameChoicePayload>
  createGameSubmission?: Maybe<CreateGameSubmissionPayload>
  createHotelRoom?: Maybe<CreateHotelRoomPayload>
  createHotelRoomDetail?: Maybe<CreateHotelRoomDetailPayload>
  createLookup?: Maybe<CreateLookupPayload>
  createLookupValue?: Maybe<CreateLookupValuePayload>
  createMemberHotelRoomAssignment?: Maybe<CreateMemberHotelRoomAssignmentPayload>
  createMembership?: Maybe<CreateMembershipPayload>
  createProfile?: Maybe<CreateProfilePayload>
  createRegistrationCode?: Maybe<CreateRegistrationCodePayload>
  createRole?: Maybe<CreateRolePayload>
  createRoom?: Maybe<CreateRoomPayload>
  createSetting?: Maybe<CreateSettingPayload>
  createShirtOrder?: Maybe<CreateShirtOrderPayload>
  createShirtOrderItem?: Maybe<CreateShirtOrderItemPayload>
  createSlot?: Maybe<CreateSlotPayload>
  createToken?: Maybe<CreateTokenPayload>
  createUser?: Maybe<CreateUserPayload>
  createUserRole?: Maybe<CreateUserRolePayload>
  updateGameByNodeId?: Maybe<UpdateGamePayload>
  updateGame?: Maybe<UpdateGamePayload>
  updateGameAssignmentByNodeId?: Maybe<UpdateGameAssignmentPayload>
  updateGameAssignment?: Maybe<UpdateGameAssignmentPayload>
  updateGameChoiceByNodeId?: Maybe<UpdateGameChoicePayload>
  updateGameChoice?: Maybe<UpdateGameChoicePayload>
  updateGameSubmissionByNodeId?: Maybe<UpdateGameSubmissionPayload>
  updateGameSubmission?: Maybe<UpdateGameSubmissionPayload>
  updateHotelRoomByNodeId?: Maybe<UpdateHotelRoomPayload>
  updateHotelRoom?: Maybe<UpdateHotelRoomPayload>
  updateHotelRoomDetailByNodeId?: Maybe<UpdateHotelRoomDetailPayload>
  updateHotelRoomDetail?: Maybe<UpdateHotelRoomDetailPayload>
  updateLookupByNodeId?: Maybe<UpdateLookupPayload>
  updateLookup?: Maybe<UpdateLookupPayload>
  updateLookupByRealm?: Maybe<UpdateLookupPayload>
  updateLookupValueByNodeId?: Maybe<UpdateLookupValuePayload>
  updateLookupValue?: Maybe<UpdateLookupValuePayload>
  updateLookupValueByLookupIdAndCode?: Maybe<UpdateLookupValuePayload>
  updateMemberHotelRoomAssignmentByNodeId?: Maybe<UpdateMemberHotelRoomAssignmentPayload>
  updateMemberHotelRoomAssignment?: Maybe<UpdateMemberHotelRoomAssignmentPayload>
  updateMembershipByNodeId?: Maybe<UpdateMembershipPayload>
  updateMembership?: Maybe<UpdateMembershipPayload>
  updateProfileByNodeId?: Maybe<UpdateProfilePayload>
  updateProfile?: Maybe<UpdateProfilePayload>
  updateProfileByEmail?: Maybe<UpdateProfilePayload>
  updateRegistrationCodeByNodeId?: Maybe<UpdateRegistrationCodePayload>
  updateRegistrationCode?: Maybe<UpdateRegistrationCodePayload>
  updateRoleByNodeId?: Maybe<UpdateRolePayload>
  updateRole?: Maybe<UpdateRolePayload>
  updateRoleByAuthority?: Maybe<UpdateRolePayload>
  updateRoomByNodeId?: Maybe<UpdateRoomPayload>
  updateRoom?: Maybe<UpdateRoomPayload>
  updateSettingByNodeId?: Maybe<UpdateSettingPayload>
  updateSetting?: Maybe<UpdateSettingPayload>
  updateShirtOrderByNodeId?: Maybe<UpdateShirtOrderPayload>
  updateShirtOrder?: Maybe<UpdateShirtOrderPayload>
  updateShirtOrderItemByNodeId?: Maybe<UpdateShirtOrderItemPayload>
  updateShirtOrderItem?: Maybe<UpdateShirtOrderItemPayload>
  updateSlotByNodeId?: Maybe<UpdateSlotPayload>
  updateSlot?: Maybe<UpdateSlotPayload>
  updateTokenByNodeId?: Maybe<UpdateTokenPayload>
  updateToken?: Maybe<UpdateTokenPayload>
  updateUserByNodeId?: Maybe<UpdateUserPayload>
  updateUser?: Maybe<UpdateUserPayload>
  updateUserByUsername?: Maybe<UpdateUserPayload>
  updateUserRoleByNodeId?: Maybe<UpdateUserRolePayload>
  updateUserRole?: Maybe<UpdateUserRolePayload>
  deleteGameByNodeId?: Maybe<DeleteGamePayload>
  deleteGame?: Maybe<DeleteGamePayload>
  deleteGameAssignmentByNodeId?: Maybe<DeleteGameAssignmentPayload>
  deleteGameAssignment?: Maybe<DeleteGameAssignmentPayload>
  deleteGameChoiceByNodeId?: Maybe<DeleteGameChoicePayload>
  deleteGameChoice?: Maybe<DeleteGameChoicePayload>
  deleteGameSubmissionByNodeId?: Maybe<DeleteGameSubmissionPayload>
  deleteGameSubmission?: Maybe<DeleteGameSubmissionPayload>
  deleteHotelRoomByNodeId?: Maybe<DeleteHotelRoomPayload>
  deleteHotelRoom?: Maybe<DeleteHotelRoomPayload>
  deleteHotelRoomDetailByNodeId?: Maybe<DeleteHotelRoomDetailPayload>
  deleteHotelRoomDetail?: Maybe<DeleteHotelRoomDetailPayload>
  deleteLookupByNodeId?: Maybe<DeleteLookupPayload>
  deleteLookup?: Maybe<DeleteLookupPayload>
  deleteLookupByRealm?: Maybe<DeleteLookupPayload>
  deleteLookupValueByNodeId?: Maybe<DeleteLookupValuePayload>
  deleteLookupValue?: Maybe<DeleteLookupValuePayload>
  deleteLookupValueByLookupIdAndCode?: Maybe<DeleteLookupValuePayload>
  deleteMemberHotelRoomAssignmentByNodeId?: Maybe<DeleteMemberHotelRoomAssignmentPayload>
  deleteMemberHotelRoomAssignment?: Maybe<DeleteMemberHotelRoomAssignmentPayload>
  deleteMembershipByNodeId?: Maybe<DeleteMembershipPayload>
  deleteMembership?: Maybe<DeleteMembershipPayload>
  deleteProfileByNodeId?: Maybe<DeleteProfilePayload>
  deleteProfile?: Maybe<DeleteProfilePayload>
  deleteProfileByEmail?: Maybe<DeleteProfilePayload>
  deleteRegistrationCodeByNodeId?: Maybe<DeleteRegistrationCodePayload>
  deleteRegistrationCode?: Maybe<DeleteRegistrationCodePayload>
  deleteRoleByNodeId?: Maybe<DeleteRolePayload>
  deleteRole?: Maybe<DeleteRolePayload>
  deleteRoleByAuthority?: Maybe<DeleteRolePayload>
  deleteRoomByNodeId?: Maybe<DeleteRoomPayload>
  deleteRoom?: Maybe<DeleteRoomPayload>
  deleteSettingByNodeId?: Maybe<DeleteSettingPayload>
  deleteSetting?: Maybe<DeleteSettingPayload>
  deleteShirtOrderByNodeId?: Maybe<DeleteShirtOrderPayload>
  deleteShirtOrder?: Maybe<DeleteShirtOrderPayload>
  deleteShirtOrderItemByNodeId?: Maybe<DeleteShirtOrderItemPayload>
  deleteShirtOrderItem?: Maybe<DeleteShirtOrderItemPayload>
  deleteSlotByNodeId?: Maybe<DeleteSlotPayload>
  deleteSlot?: Maybe<DeleteSlotPayload>
  deleteTokenByNodeId?: Maybe<DeleteTokenPayload>
  deleteToken?: Maybe<DeleteTokenPayload>
  deleteUserByNodeId?: Maybe<DeleteUserPayload>
  deleteUser?: Maybe<DeleteUserPayload>
  deleteUserByUsername?: Maybe<DeleteUserPayload>
  deleteUserRoleByNodeId?: Maybe<DeleteUserRolePayload>
  deleteUserRole?: Maybe<DeleteUserRolePayload>
  fTruncateTables?: Maybe<FTruncateTablesPayload>
}

export type MutationCreateGameArgs = {
  input: CreateGameInput
}

export type MutationCreateGameAssignmentArgs = {
  input: CreateGameAssignmentInput
}

export type MutationCreateGameChoiceArgs = {
  input: CreateGameChoiceInput
}

export type MutationCreateGameSubmissionArgs = {
  input: CreateGameSubmissionInput
}

export type MutationCreateHotelRoomArgs = {
  input: CreateHotelRoomInput
}

export type MutationCreateHotelRoomDetailArgs = {
  input: CreateHotelRoomDetailInput
}

export type MutationCreateLookupArgs = {
  input: CreateLookupInput
}

export type MutationCreateLookupValueArgs = {
  input: CreateLookupValueInput
}

export type MutationCreateMemberHotelRoomAssignmentArgs = {
  input: CreateMemberHotelRoomAssignmentInput
}

export type MutationCreateMembershipArgs = {
  input: CreateMembershipInput
}

export type MutationCreateProfileArgs = {
  input: CreateProfileInput
}

export type MutationCreateRegistrationCodeArgs = {
  input: CreateRegistrationCodeInput
}

export type MutationCreateRoleArgs = {
  input: CreateRoleInput
}

export type MutationCreateRoomArgs = {
  input: CreateRoomInput
}

export type MutationCreateSettingArgs = {
  input: CreateSettingInput
}

export type MutationCreateShirtOrderArgs = {
  input: CreateShirtOrderInput
}

export type MutationCreateShirtOrderItemArgs = {
  input: CreateShirtOrderItemInput
}

export type MutationCreateSlotArgs = {
  input: CreateSlotInput
}

export type MutationCreateTokenArgs = {
  input: CreateTokenInput
}

export type MutationCreateUserArgs = {
  input: CreateUserInput
}

export type MutationCreateUserRoleArgs = {
  input: CreateUserRoleInput
}

export type MutationUpdateGameByNodeIdArgs = {
  input: UpdateGameByNodeIdInput
}

export type MutationUpdateGameArgs = {
  input: UpdateGameInput
}

export type MutationUpdateGameAssignmentByNodeIdArgs = {
  input: UpdateGameAssignmentByNodeIdInput
}

export type MutationUpdateGameAssignmentArgs = {
  input: UpdateGameAssignmentInput
}

export type MutationUpdateGameChoiceByNodeIdArgs = {
  input: UpdateGameChoiceByNodeIdInput
}

export type MutationUpdateGameChoiceArgs = {
  input: UpdateGameChoiceInput
}

export type MutationUpdateGameSubmissionByNodeIdArgs = {
  input: UpdateGameSubmissionByNodeIdInput
}

export type MutationUpdateGameSubmissionArgs = {
  input: UpdateGameSubmissionInput
}

export type MutationUpdateHotelRoomByNodeIdArgs = {
  input: UpdateHotelRoomByNodeIdInput
}

export type MutationUpdateHotelRoomArgs = {
  input: UpdateHotelRoomInput
}

export type MutationUpdateHotelRoomDetailByNodeIdArgs = {
  input: UpdateHotelRoomDetailByNodeIdInput
}

export type MutationUpdateHotelRoomDetailArgs = {
  input: UpdateHotelRoomDetailInput
}

export type MutationUpdateLookupByNodeIdArgs = {
  input: UpdateLookupByNodeIdInput
}

export type MutationUpdateLookupArgs = {
  input: UpdateLookupInput
}

export type MutationUpdateLookupByRealmArgs = {
  input: UpdateLookupByRealmInput
}

export type MutationUpdateLookupValueByNodeIdArgs = {
  input: UpdateLookupValueByNodeIdInput
}

export type MutationUpdateLookupValueArgs = {
  input: UpdateLookupValueInput
}

export type MutationUpdateLookupValueByLookupIdAndCodeArgs = {
  input: UpdateLookupValueByLookupIdAndCodeInput
}

export type MutationUpdateMemberHotelRoomAssignmentByNodeIdArgs = {
  input: UpdateMemberHotelRoomAssignmentByNodeIdInput
}

export type MutationUpdateMemberHotelRoomAssignmentArgs = {
  input: UpdateMemberHotelRoomAssignmentInput
}

export type MutationUpdateMembershipByNodeIdArgs = {
  input: UpdateMembershipByNodeIdInput
}

export type MutationUpdateMembershipArgs = {
  input: UpdateMembershipInput
}

export type MutationUpdateProfileByNodeIdArgs = {
  input: UpdateProfileByNodeIdInput
}

export type MutationUpdateProfileArgs = {
  input: UpdateProfileInput
}

export type MutationUpdateProfileByEmailArgs = {
  input: UpdateProfileByEmailInput
}

export type MutationUpdateRegistrationCodeByNodeIdArgs = {
  input: UpdateRegistrationCodeByNodeIdInput
}

export type MutationUpdateRegistrationCodeArgs = {
  input: UpdateRegistrationCodeInput
}

export type MutationUpdateRoleByNodeIdArgs = {
  input: UpdateRoleByNodeIdInput
}

export type MutationUpdateRoleArgs = {
  input: UpdateRoleInput
}

export type MutationUpdateRoleByAuthorityArgs = {
  input: UpdateRoleByAuthorityInput
}

export type MutationUpdateRoomByNodeIdArgs = {
  input: UpdateRoomByNodeIdInput
}

export type MutationUpdateRoomArgs = {
  input: UpdateRoomInput
}

export type MutationUpdateSettingByNodeIdArgs = {
  input: UpdateSettingByNodeIdInput
}

export type MutationUpdateSettingArgs = {
  input: UpdateSettingInput
}

export type MutationUpdateShirtOrderByNodeIdArgs = {
  input: UpdateShirtOrderByNodeIdInput
}

export type MutationUpdateShirtOrderArgs = {
  input: UpdateShirtOrderInput
}

export type MutationUpdateShirtOrderItemByNodeIdArgs = {
  input: UpdateShirtOrderItemByNodeIdInput
}

export type MutationUpdateShirtOrderItemArgs = {
  input: UpdateShirtOrderItemInput
}

export type MutationUpdateSlotByNodeIdArgs = {
  input: UpdateSlotByNodeIdInput
}

export type MutationUpdateSlotArgs = {
  input: UpdateSlotInput
}

export type MutationUpdateTokenByNodeIdArgs = {
  input: UpdateTokenByNodeIdInput
}

export type MutationUpdateTokenArgs = {
  input: UpdateTokenInput
}

export type MutationUpdateUserByNodeIdArgs = {
  input: UpdateUserByNodeIdInput
}

export type MutationUpdateUserArgs = {
  input: UpdateUserInput
}

export type MutationUpdateUserByUsernameArgs = {
  input: UpdateUserByUsernameInput
}

export type MutationUpdateUserRoleByNodeIdArgs = {
  input: UpdateUserRoleByNodeIdInput
}

export type MutationUpdateUserRoleArgs = {
  input: UpdateUserRoleInput
}

export type MutationDeleteGameByNodeIdArgs = {
  input: DeleteGameByNodeIdInput
}

export type MutationDeleteGameArgs = {
  input: DeleteGameInput
}

export type MutationDeleteGameAssignmentByNodeIdArgs = {
  input: DeleteGameAssignmentByNodeIdInput
}

export type MutationDeleteGameAssignmentArgs = {
  input: DeleteGameAssignmentInput
}

export type MutationDeleteGameChoiceByNodeIdArgs = {
  input: DeleteGameChoiceByNodeIdInput
}

export type MutationDeleteGameChoiceArgs = {
  input: DeleteGameChoiceInput
}

export type MutationDeleteGameSubmissionByNodeIdArgs = {
  input: DeleteGameSubmissionByNodeIdInput
}

export type MutationDeleteGameSubmissionArgs = {
  input: DeleteGameSubmissionInput
}

export type MutationDeleteHotelRoomByNodeIdArgs = {
  input: DeleteHotelRoomByNodeIdInput
}

export type MutationDeleteHotelRoomArgs = {
  input: DeleteHotelRoomInput
}

export type MutationDeleteHotelRoomDetailByNodeIdArgs = {
  input: DeleteHotelRoomDetailByNodeIdInput
}

export type MutationDeleteHotelRoomDetailArgs = {
  input: DeleteHotelRoomDetailInput
}

export type MutationDeleteLookupByNodeIdArgs = {
  input: DeleteLookupByNodeIdInput
}

export type MutationDeleteLookupArgs = {
  input: DeleteLookupInput
}

export type MutationDeleteLookupByRealmArgs = {
  input: DeleteLookupByRealmInput
}

export type MutationDeleteLookupValueByNodeIdArgs = {
  input: DeleteLookupValueByNodeIdInput
}

export type MutationDeleteLookupValueArgs = {
  input: DeleteLookupValueInput
}

export type MutationDeleteLookupValueByLookupIdAndCodeArgs = {
  input: DeleteLookupValueByLookupIdAndCodeInput
}

export type MutationDeleteMemberHotelRoomAssignmentByNodeIdArgs = {
  input: DeleteMemberHotelRoomAssignmentByNodeIdInput
}

export type MutationDeleteMemberHotelRoomAssignmentArgs = {
  input: DeleteMemberHotelRoomAssignmentInput
}

export type MutationDeleteMembershipByNodeIdArgs = {
  input: DeleteMembershipByNodeIdInput
}

export type MutationDeleteMembershipArgs = {
  input: DeleteMembershipInput
}

export type MutationDeleteProfileByNodeIdArgs = {
  input: DeleteProfileByNodeIdInput
}

export type MutationDeleteProfileArgs = {
  input: DeleteProfileInput
}

export type MutationDeleteProfileByEmailArgs = {
  input: DeleteProfileByEmailInput
}

export type MutationDeleteRegistrationCodeByNodeIdArgs = {
  input: DeleteRegistrationCodeByNodeIdInput
}

export type MutationDeleteRegistrationCodeArgs = {
  input: DeleteRegistrationCodeInput
}

export type MutationDeleteRoleByNodeIdArgs = {
  input: DeleteRoleByNodeIdInput
}

export type MutationDeleteRoleArgs = {
  input: DeleteRoleInput
}

export type MutationDeleteRoleByAuthorityArgs = {
  input: DeleteRoleByAuthorityInput
}

export type MutationDeleteRoomByNodeIdArgs = {
  input: DeleteRoomByNodeIdInput
}

export type MutationDeleteRoomArgs = {
  input: DeleteRoomInput
}

export type MutationDeleteSettingByNodeIdArgs = {
  input: DeleteSettingByNodeIdInput
}

export type MutationDeleteSettingArgs = {
  input: DeleteSettingInput
}

export type MutationDeleteShirtOrderByNodeIdArgs = {
  input: DeleteShirtOrderByNodeIdInput
}

export type MutationDeleteShirtOrderArgs = {
  input: DeleteShirtOrderInput
}

export type MutationDeleteShirtOrderItemByNodeIdArgs = {
  input: DeleteShirtOrderItemByNodeIdInput
}

export type MutationDeleteShirtOrderItemArgs = {
  input: DeleteShirtOrderItemInput
}

export type MutationDeleteSlotByNodeIdArgs = {
  input: DeleteSlotByNodeIdInput
}

export type MutationDeleteSlotArgs = {
  input: DeleteSlotInput
}

export type MutationDeleteTokenByNodeIdArgs = {
  input: DeleteTokenByNodeIdInput
}

export type MutationDeleteTokenArgs = {
  input: DeleteTokenInput
}

export type MutationDeleteUserByNodeIdArgs = {
  input: DeleteUserByNodeIdInput
}

export type MutationDeleteUserArgs = {
  input: DeleteUserInput
}

export type MutationDeleteUserByUsernameArgs = {
  input: DeleteUserByUsernameInput
}

export type MutationDeleteUserRoleByNodeIdArgs = {
  input: DeleteUserRoleByNodeIdInput
}

export type MutationDeleteUserRoleArgs = {
  input: DeleteUserRoleInput
}

export type MutationFTruncateTablesArgs = {
  input: FTruncateTablesInput
}

export type Node = {
  nodeId: Scalars['ID']
}

export type PageInfo = {
  __typename: 'PageInfo'
  hasNextPage: Scalars['Boolean']
  hasPreviousPage: Scalars['Boolean']
  startCursor?: Maybe<Scalars['Cursor']>
  endCursor?: Maybe<Scalars['Cursor']>
}

export type Profile = Node & {
  __typename: 'Profile'
  nodeId: Scalars['ID']
  id: Scalars['Int']
  email: Scalars['String']
  fullName: Scalars['String']
  phoneNumber?: Maybe<Scalars['String']>
  snailMailAddress?: Maybe<Scalars['String']>
  users: UsersConnection
}

export type ProfileUsersArgs = {
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  before?: Maybe<Scalars['Cursor']>
  after?: Maybe<Scalars['Cursor']>
  orderBy?: Maybe<Array<UsersOrderBy>>
  condition?: Maybe<UserCondition>
  filter?: Maybe<UserFilter>
}

export type ProfileCondition = {
  id?: Maybe<Scalars['Int']>
  email?: Maybe<Scalars['String']>
  fullName?: Maybe<Scalars['String']>
  phoneNumber?: Maybe<Scalars['String']>
  snailMailAddress?: Maybe<Scalars['String']>
}

export type ProfileFilter = {
  id?: Maybe<IntFilter>
  email?: Maybe<StringFilter>
  fullName?: Maybe<StringFilter>
  phoneNumber?: Maybe<StringFilter>
  snailMailAddress?: Maybe<StringFilter>
  and?: Maybe<Array<ProfileFilter>>
  or?: Maybe<Array<ProfileFilter>>
  not?: Maybe<ProfileFilter>
}

export type ProfileInput = {
  id?: Maybe<Scalars['Int']>
  email: Scalars['String']
  fullName: Scalars['String']
  phoneNumber?: Maybe<Scalars['String']>
  snailMailAddress?: Maybe<Scalars['String']>
}

export type ProfilePatch = {
  id?: Maybe<Scalars['Int']>
  email?: Maybe<Scalars['String']>
  fullName?: Maybe<Scalars['String']>
  phoneNumber?: Maybe<Scalars['String']>
  snailMailAddress?: Maybe<Scalars['String']>
}

export type ProfilesConnection = {
  __typename: 'ProfilesConnection'
  nodes: Array<Maybe<Profile>>
  edges: Array<ProfilesEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type ProfilesEdge = {
  __typename: 'ProfilesEdge'
  cursor?: Maybe<Scalars['Cursor']>
  node?: Maybe<Profile>
}

export enum ProfilesOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  EmailAsc = 'EMAIL_ASC',
  EmailDesc = 'EMAIL_DESC',
  FullNameAsc = 'FULL_NAME_ASC',
  FullNameDesc = 'FULL_NAME_DESC',
  PhoneNumberAsc = 'PHONE_NUMBER_ASC',
  PhoneNumberDesc = 'PHONE_NUMBER_DESC',
  SnailMailAddressAsc = 'SNAIL_MAIL_ADDRESS_ASC',
  SnailMailAddressDesc = 'SNAIL_MAIL_ADDRESS_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  UsersByProfileIdCountAsc = 'USERS_BY_PROFILE_ID__COUNT_ASC',
  UsersByProfileIdCountDesc = 'USERS_BY_PROFILE_ID__COUNT_DESC'
}

export type Query = Node & {
  __typename: 'Query'
  query: Query
  nodeId: Scalars['ID']
  node?: Maybe<Node>
  games?: Maybe<GamesConnection>
  gameAssignments?: Maybe<GameAssignmentsConnection>
  gameChoices?: Maybe<GameChoicesConnection>
  gameSubmissions?: Maybe<GameSubmissionsConnection>
  hotelRooms?: Maybe<HotelRoomsConnection>
  hotelRoomDetails?: Maybe<HotelRoomDetailsConnection>
  lookups?: Maybe<LookupsConnection>
  lookupValues?: Maybe<LookupValuesConnection>
  memberHotelRoomAssignments?: Maybe<MemberHotelRoomAssignmentsConnection>
  memberships?: Maybe<MembershipsConnection>
  profiles?: Maybe<ProfilesConnection>
  registrationCodes?: Maybe<RegistrationCodesConnection>
  roles?: Maybe<RolesConnection>
  rooms?: Maybe<RoomsConnection>
  settings?: Maybe<SettingsConnection>
  shirtOrders?: Maybe<ShirtOrdersConnection>
  shirtOrderItems?: Maybe<ShirtOrderItemsConnection>
  slots?: Maybe<SlotsConnection>
  tokens?: Maybe<TokensConnection>
  users?: Maybe<UsersConnection>
  userRoles?: Maybe<UserRolesConnection>
  game?: Maybe<Game>
  gameAssignment?: Maybe<GameAssignment>
  gameChoice?: Maybe<GameChoice>
  gameSubmission?: Maybe<GameSubmission>
  hotelRoom?: Maybe<HotelRoom>
  hotelRoomDetail?: Maybe<HotelRoomDetail>
  lookup?: Maybe<Lookup>
  lookupByRealm?: Maybe<Lookup>
  lookupValue?: Maybe<LookupValue>
  lookupValueByLookupIdAndCode?: Maybe<LookupValue>
  memberHotelRoomAssignment?: Maybe<MemberHotelRoomAssignment>
  membership?: Maybe<Membership>
  profile?: Maybe<Profile>
  profileByEmail?: Maybe<Profile>
  registrationCode?: Maybe<RegistrationCode>
  role?: Maybe<Role>
  roleByAuthority?: Maybe<Role>
  room?: Maybe<Room>
  setting?: Maybe<Setting>
  shirtOrder?: Maybe<ShirtOrder>
  shirtOrderItem?: Maybe<ShirtOrderItem>
  slot?: Maybe<Slot>
  token?: Maybe<Token>
  user?: Maybe<User>
  userByUsername?: Maybe<User>
  userRole?: Maybe<UserRole>
  gameByNodeId?: Maybe<Game>
  gameAssignmentByNodeId?: Maybe<GameAssignment>
  gameChoiceByNodeId?: Maybe<GameChoice>
  gameSubmissionByNodeId?: Maybe<GameSubmission>
  hotelRoomByNodeId?: Maybe<HotelRoom>
  hotelRoomDetailByNodeId?: Maybe<HotelRoomDetail>
  lookupByNodeId?: Maybe<Lookup>
  lookupValueByNodeId?: Maybe<LookupValue>
  memberHotelRoomAssignmentByNodeId?: Maybe<MemberHotelRoomAssignment>
  membershipByNodeId?: Maybe<Membership>
  profileByNodeId?: Maybe<Profile>
  registrationCodeByNodeId?: Maybe<RegistrationCode>
  roleByNodeId?: Maybe<Role>
  roomByNodeId?: Maybe<Room>
  settingByNodeId?: Maybe<Setting>
  shirtOrderByNodeId?: Maybe<ShirtOrder>
  shirtOrderItemByNodeId?: Maybe<ShirtOrderItem>
  slotByNodeId?: Maybe<Slot>
  tokenByNodeId?: Maybe<Token>
  userByNodeId?: Maybe<User>
  userRoleByNodeId?: Maybe<UserRole>
}

export type QueryNodeArgs = {
  nodeId: Scalars['ID']
}

export type QueryGamesArgs = {
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  before?: Maybe<Scalars['Cursor']>
  after?: Maybe<Scalars['Cursor']>
  orderBy?: Maybe<Array<GamesOrderBy>>
  condition?: Maybe<GameCondition>
  filter?: Maybe<GameFilter>
}

export type QueryGameAssignmentsArgs = {
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  before?: Maybe<Scalars['Cursor']>
  after?: Maybe<Scalars['Cursor']>
  orderBy?: Maybe<Array<GameAssignmentsOrderBy>>
  condition?: Maybe<GameAssignmentCondition>
  filter?: Maybe<GameAssignmentFilter>
}

export type QueryGameChoicesArgs = {
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  before?: Maybe<Scalars['Cursor']>
  after?: Maybe<Scalars['Cursor']>
  orderBy?: Maybe<Array<GameChoicesOrderBy>>
  condition?: Maybe<GameChoiceCondition>
  filter?: Maybe<GameChoiceFilter>
}

export type QueryGameSubmissionsArgs = {
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  before?: Maybe<Scalars['Cursor']>
  after?: Maybe<Scalars['Cursor']>
  orderBy?: Maybe<Array<GameSubmissionsOrderBy>>
  condition?: Maybe<GameSubmissionCondition>
  filter?: Maybe<GameSubmissionFilter>
}

export type QueryHotelRoomsArgs = {
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  before?: Maybe<Scalars['Cursor']>
  after?: Maybe<Scalars['Cursor']>
  orderBy?: Maybe<Array<HotelRoomsOrderBy>>
  condition?: Maybe<HotelRoomCondition>
  filter?: Maybe<HotelRoomFilter>
}

export type QueryHotelRoomDetailsArgs = {
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  before?: Maybe<Scalars['Cursor']>
  after?: Maybe<Scalars['Cursor']>
  orderBy?: Maybe<Array<HotelRoomDetailsOrderBy>>
  condition?: Maybe<HotelRoomDetailCondition>
  filter?: Maybe<HotelRoomDetailFilter>
}

export type QueryLookupsArgs = {
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  before?: Maybe<Scalars['Cursor']>
  after?: Maybe<Scalars['Cursor']>
  orderBy?: Maybe<Array<LookupsOrderBy>>
  condition?: Maybe<LookupCondition>
  filter?: Maybe<LookupFilter>
}

export type QueryLookupValuesArgs = {
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  before?: Maybe<Scalars['Cursor']>
  after?: Maybe<Scalars['Cursor']>
  orderBy?: Maybe<Array<LookupValuesOrderBy>>
  condition?: Maybe<LookupValueCondition>
  filter?: Maybe<LookupValueFilter>
}

export type QueryMemberHotelRoomAssignmentsArgs = {
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  before?: Maybe<Scalars['Cursor']>
  after?: Maybe<Scalars['Cursor']>
  orderBy?: Maybe<Array<MemberHotelRoomAssignmentsOrderBy>>
  condition?: Maybe<MemberHotelRoomAssignmentCondition>
  filter?: Maybe<MemberHotelRoomAssignmentFilter>
}

export type QueryMembershipsArgs = {
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  before?: Maybe<Scalars['Cursor']>
  after?: Maybe<Scalars['Cursor']>
  orderBy?: Maybe<Array<MembershipsOrderBy>>
  condition?: Maybe<MembershipCondition>
  filter?: Maybe<MembershipFilter>
}

export type QueryProfilesArgs = {
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  before?: Maybe<Scalars['Cursor']>
  after?: Maybe<Scalars['Cursor']>
  orderBy?: Maybe<Array<ProfilesOrderBy>>
  condition?: Maybe<ProfileCondition>
  filter?: Maybe<ProfileFilter>
}

export type QueryRegistrationCodesArgs = {
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  before?: Maybe<Scalars['Cursor']>
  after?: Maybe<Scalars['Cursor']>
  orderBy?: Maybe<Array<RegistrationCodesOrderBy>>
  condition?: Maybe<RegistrationCodeCondition>
  filter?: Maybe<RegistrationCodeFilter>
}

export type QueryRolesArgs = {
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  before?: Maybe<Scalars['Cursor']>
  after?: Maybe<Scalars['Cursor']>
  orderBy?: Maybe<Array<RolesOrderBy>>
  condition?: Maybe<RoleCondition>
  filter?: Maybe<RoleFilter>
}

export type QueryRoomsArgs = {
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  before?: Maybe<Scalars['Cursor']>
  after?: Maybe<Scalars['Cursor']>
  orderBy?: Maybe<Array<RoomsOrderBy>>
  condition?: Maybe<RoomCondition>
  filter?: Maybe<RoomFilter>
}

export type QuerySettingsArgs = {
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  before?: Maybe<Scalars['Cursor']>
  after?: Maybe<Scalars['Cursor']>
  orderBy?: Maybe<Array<SettingsOrderBy>>
  condition?: Maybe<SettingCondition>
  filter?: Maybe<SettingFilter>
}

export type QueryShirtOrdersArgs = {
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  before?: Maybe<Scalars['Cursor']>
  after?: Maybe<Scalars['Cursor']>
  orderBy?: Maybe<Array<ShirtOrdersOrderBy>>
  condition?: Maybe<ShirtOrderCondition>
  filter?: Maybe<ShirtOrderFilter>
}

export type QueryShirtOrderItemsArgs = {
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  before?: Maybe<Scalars['Cursor']>
  after?: Maybe<Scalars['Cursor']>
  orderBy?: Maybe<Array<ShirtOrderItemsOrderBy>>
  condition?: Maybe<ShirtOrderItemCondition>
  filter?: Maybe<ShirtOrderItemFilter>
}

export type QuerySlotsArgs = {
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  before?: Maybe<Scalars['Cursor']>
  after?: Maybe<Scalars['Cursor']>
  orderBy?: Maybe<Array<SlotsOrderBy>>
  condition?: Maybe<SlotCondition>
  filter?: Maybe<SlotFilter>
}

export type QueryTokensArgs = {
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  before?: Maybe<Scalars['Cursor']>
  after?: Maybe<Scalars['Cursor']>
  orderBy?: Maybe<Array<TokensOrderBy>>
  condition?: Maybe<TokenCondition>
  filter?: Maybe<TokenFilter>
}

export type QueryUsersArgs = {
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  before?: Maybe<Scalars['Cursor']>
  after?: Maybe<Scalars['Cursor']>
  orderBy?: Maybe<Array<UsersOrderBy>>
  condition?: Maybe<UserCondition>
  filter?: Maybe<UserFilter>
}

export type QueryUserRolesArgs = {
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  before?: Maybe<Scalars['Cursor']>
  after?: Maybe<Scalars['Cursor']>
  orderBy?: Maybe<Array<UserRolesOrderBy>>
  condition?: Maybe<UserRoleCondition>
  filter?: Maybe<UserRoleFilter>
}

export type QueryGameArgs = {
  id: Scalars['Int']
}

export type QueryGameAssignmentArgs = {
  memberId: Scalars['Int']
  gameId: Scalars['Int']
  gm: Scalars['Int']
}

export type QueryGameChoiceArgs = {
  id: Scalars['Int']
}

export type QueryGameSubmissionArgs = {
  id: Scalars['Int']
}

export type QueryHotelRoomArgs = {
  id: Scalars['Int']
}

export type QueryHotelRoomDetailArgs = {
  id: Scalars['BigInt']
}

export type QueryLookupArgs = {
  id: Scalars['Int']
}

export type QueryLookupByRealmArgs = {
  realm: Scalars['String']
}

export type QueryLookupValueArgs = {
  id: Scalars['Int']
}

export type QueryLookupValueByLookupIdAndCodeArgs = {
  lookupId: Scalars['Int']
  code: Scalars['String']
}

export type QueryMemberHotelRoomAssignmentArgs = {
  memberId: Scalars['BigInt']
  hotelRoomId: Scalars['BigInt']
}

export type QueryMembershipArgs = {
  id: Scalars['Int']
}

export type QueryProfileArgs = {
  id: Scalars['Int']
}

export type QueryProfileByEmailArgs = {
  email: Scalars['String']
}

export type QueryRegistrationCodeArgs = {
  id: Scalars['Int']
}

export type QueryRoleArgs = {
  id: Scalars['Int']
}

export type QueryRoleByAuthorityArgs = {
  authority: Scalars['String']
}

export type QueryRoomArgs = {
  id: Scalars['Int']
}

export type QuerySettingArgs = {
  id: Scalars['Int']
}

export type QueryShirtOrderArgs = {
  id: Scalars['Int']
}

export type QueryShirtOrderItemArgs = {
  id: Scalars['Int']
}

export type QuerySlotArgs = {
  id: Scalars['Int']
}

export type QueryTokenArgs = {
  id: Scalars['Int']
}

export type QueryUserArgs = {
  id: Scalars['Int']
}

export type QueryUserByUsernameArgs = {
  username: Scalars['String']
}

export type QueryUserRoleArgs = {
  roleId: Scalars['Int']
  userId: Scalars['Int']
}

export type QueryGameByNodeIdArgs = {
  nodeId: Scalars['ID']
}

export type QueryGameAssignmentByNodeIdArgs = {
  nodeId: Scalars['ID']
}

export type QueryGameChoiceByNodeIdArgs = {
  nodeId: Scalars['ID']
}

export type QueryGameSubmissionByNodeIdArgs = {
  nodeId: Scalars['ID']
}

export type QueryHotelRoomByNodeIdArgs = {
  nodeId: Scalars['ID']
}

export type QueryHotelRoomDetailByNodeIdArgs = {
  nodeId: Scalars['ID']
}

export type QueryLookupByNodeIdArgs = {
  nodeId: Scalars['ID']
}

export type QueryLookupValueByNodeIdArgs = {
  nodeId: Scalars['ID']
}

export type QueryMemberHotelRoomAssignmentByNodeIdArgs = {
  nodeId: Scalars['ID']
}

export type QueryMembershipByNodeIdArgs = {
  nodeId: Scalars['ID']
}

export type QueryProfileByNodeIdArgs = {
  nodeId: Scalars['ID']
}

export type QueryRegistrationCodeByNodeIdArgs = {
  nodeId: Scalars['ID']
}

export type QueryRoleByNodeIdArgs = {
  nodeId: Scalars['ID']
}

export type QueryRoomByNodeIdArgs = {
  nodeId: Scalars['ID']
}

export type QuerySettingByNodeIdArgs = {
  nodeId: Scalars['ID']
}

export type QueryShirtOrderByNodeIdArgs = {
  nodeId: Scalars['ID']
}

export type QueryShirtOrderItemByNodeIdArgs = {
  nodeId: Scalars['ID']
}

export type QuerySlotByNodeIdArgs = {
  nodeId: Scalars['ID']
}

export type QueryTokenByNodeIdArgs = {
  nodeId: Scalars['ID']
}

export type QueryUserByNodeIdArgs = {
  nodeId: Scalars['ID']
}

export type QueryUserRoleByNodeIdArgs = {
  nodeId: Scalars['ID']
}

export type RegistrationCode = Node & {
  __typename: 'RegistrationCode'
  nodeId: Scalars['ID']
  id: Scalars['Int']
  token: Scalars['String']
  username: Scalars['String']
}

export type RegistrationCodeCondition = {
  id?: Maybe<Scalars['Int']>
  token?: Maybe<Scalars['String']>
  username?: Maybe<Scalars['String']>
}

export type RegistrationCodeFilter = {
  id?: Maybe<IntFilter>
  token?: Maybe<StringFilter>
  username?: Maybe<StringFilter>
  and?: Maybe<Array<RegistrationCodeFilter>>
  or?: Maybe<Array<RegistrationCodeFilter>>
  not?: Maybe<RegistrationCodeFilter>
}

export type RegistrationCodeInput = {
  id?: Maybe<Scalars['Int']>
  token: Scalars['String']
  username: Scalars['String']
}

export type RegistrationCodePatch = {
  id?: Maybe<Scalars['Int']>
  token?: Maybe<Scalars['String']>
  username?: Maybe<Scalars['String']>
}

export type RegistrationCodesConnection = {
  __typename: 'RegistrationCodesConnection'
  nodes: Array<Maybe<RegistrationCode>>
  edges: Array<RegistrationCodesEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type RegistrationCodesEdge = {
  __typename: 'RegistrationCodesEdge'
  cursor?: Maybe<Scalars['Cursor']>
  node?: Maybe<RegistrationCode>
}

export enum RegistrationCodesOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  TokenAsc = 'TOKEN_ASC',
  TokenDesc = 'TOKEN_DESC',
  UsernameAsc = 'USERNAME_ASC',
  UsernameDesc = 'USERNAME_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

export type Role = Node & {
  __typename: 'Role'
  nodeId: Scalars['ID']
  id: Scalars['Int']
  authority: Scalars['String']
  userRoles: UserRolesConnection
}

export type RoleUserRolesArgs = {
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  before?: Maybe<Scalars['Cursor']>
  after?: Maybe<Scalars['Cursor']>
  orderBy?: Maybe<Array<UserRolesOrderBy>>
  condition?: Maybe<UserRoleCondition>
  filter?: Maybe<UserRoleFilter>
}

export type RoleCondition = {
  id?: Maybe<Scalars['Int']>
  authority?: Maybe<Scalars['String']>
}

export type RoleFilter = {
  id?: Maybe<IntFilter>
  authority?: Maybe<StringFilter>
  and?: Maybe<Array<RoleFilter>>
  or?: Maybe<Array<RoleFilter>>
  not?: Maybe<RoleFilter>
}

export type RoleInput = {
  id?: Maybe<Scalars['Int']>
  authority: Scalars['String']
}

export type RolePatch = {
  id?: Maybe<Scalars['Int']>
  authority?: Maybe<Scalars['String']>
}

export type RolesConnection = {
  __typename: 'RolesConnection'
  nodes: Array<Maybe<Role>>
  edges: Array<RolesEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type RolesEdge = {
  __typename: 'RolesEdge'
  cursor?: Maybe<Scalars['Cursor']>
  node?: Maybe<Role>
}

export enum RolesOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  AuthorityAsc = 'AUTHORITY_ASC',
  AuthorityDesc = 'AUTHORITY_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  UserRolesByRoleIdCountAsc = 'USER_ROLES_BY_ROLE_ID__COUNT_ASC',
  UserRolesByRoleIdCountDesc = 'USER_ROLES_BY_ROLE_ID__COUNT_DESC'
}

export type Room = Node & {
  __typename: 'Room'
  nodeId: Scalars['ID']
  id: Scalars['Int']
  description: Scalars['String']
  size: Scalars['Int']
  type: Scalars['String']
  updated: Scalars['Boolean']
  games: GamesConnection
}

export type RoomGamesArgs = {
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  before?: Maybe<Scalars['Cursor']>
  after?: Maybe<Scalars['Cursor']>
  orderBy?: Maybe<Array<GamesOrderBy>>
  condition?: Maybe<GameCondition>
  filter?: Maybe<GameFilter>
}

export type RoomCondition = {
  id?: Maybe<Scalars['Int']>
  description?: Maybe<Scalars['String']>
  size?: Maybe<Scalars['Int']>
  type?: Maybe<Scalars['String']>
  updated?: Maybe<Scalars['Boolean']>
}

export type RoomFilter = {
  id?: Maybe<IntFilter>
  description?: Maybe<StringFilter>
  size?: Maybe<IntFilter>
  type?: Maybe<StringFilter>
  updated?: Maybe<BooleanFilter>
  and?: Maybe<Array<RoomFilter>>
  or?: Maybe<Array<RoomFilter>>
  not?: Maybe<RoomFilter>
}

export type RoomInput = {
  id?: Maybe<Scalars['Int']>
  description: Scalars['String']
  size: Scalars['Int']
  type: Scalars['String']
  updated: Scalars['Boolean']
}

export type RoomPatch = {
  id?: Maybe<Scalars['Int']>
  description?: Maybe<Scalars['String']>
  size?: Maybe<Scalars['Int']>
  type?: Maybe<Scalars['String']>
  updated?: Maybe<Scalars['Boolean']>
}

export type RoomsConnection = {
  __typename: 'RoomsConnection'
  nodes: Array<Maybe<Room>>
  edges: Array<RoomsEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type RoomsEdge = {
  __typename: 'RoomsEdge'
  cursor?: Maybe<Scalars['Cursor']>
  node?: Maybe<Room>
}

export enum RoomsOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  DescriptionAsc = 'DESCRIPTION_ASC',
  DescriptionDesc = 'DESCRIPTION_DESC',
  SizeAsc = 'SIZE_ASC',
  SizeDesc = 'SIZE_DESC',
  TypeAsc = 'TYPE_ASC',
  TypeDesc = 'TYPE_DESC',
  UpdatedAsc = 'UPDATED_ASC',
  UpdatedDesc = 'UPDATED_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  GamesByRoomIdCountAsc = 'GAMES_BY_ROOM_ID__COUNT_ASC',
  GamesByRoomIdCountDesc = 'GAMES_BY_ROOM_ID__COUNT_DESC'
}

export type Setting = Node & {
  __typename: 'Setting'
  nodeId: Scalars['ID']
  id: Scalars['Int']
  code: Scalars['String']
  type: Scalars['String']
  value: Scalars['String']
}

export type SettingCondition = {
  id?: Maybe<Scalars['Int']>
  code?: Maybe<Scalars['String']>
  type?: Maybe<Scalars['String']>
  value?: Maybe<Scalars['String']>
}

export type SettingFilter = {
  id?: Maybe<IntFilter>
  code?: Maybe<StringFilter>
  type?: Maybe<StringFilter>
  value?: Maybe<StringFilter>
  and?: Maybe<Array<SettingFilter>>
  or?: Maybe<Array<SettingFilter>>
  not?: Maybe<SettingFilter>
}

export type SettingInput = {
  id?: Maybe<Scalars['Int']>
  code: Scalars['String']
  type: Scalars['String']
  value: Scalars['String']
}

export type SettingPatch = {
  id?: Maybe<Scalars['Int']>
  code?: Maybe<Scalars['String']>
  type?: Maybe<Scalars['String']>
  value?: Maybe<Scalars['String']>
}

export type SettingsConnection = {
  __typename: 'SettingsConnection'
  nodes: Array<Maybe<Setting>>
  edges: Array<SettingsEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type SettingsEdge = {
  __typename: 'SettingsEdge'
  cursor?: Maybe<Scalars['Cursor']>
  node?: Maybe<Setting>
}

export enum SettingsOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  CodeAsc = 'CODE_ASC',
  CodeDesc = 'CODE_DESC',
  TypeAsc = 'TYPE_ASC',
  TypeDesc = 'TYPE_DESC',
  ValueAsc = 'VALUE_ASC',
  ValueDesc = 'VALUE_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

export type ShirtOrder = Node & {
  __typename: 'ShirtOrder'
  nodeId: Scalars['ID']
  id: Scalars['Int']
  deliveryMethod: Scalars['String']
  message: Scalars['String']
  userId: Scalars['Int']
  year: Scalars['Int']
  user?: Maybe<User>
  shirtOrderItemsByOrderId: ShirtOrderItemsConnection
}

export type ShirtOrderShirtOrderItemsByOrderIdArgs = {
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  before?: Maybe<Scalars['Cursor']>
  after?: Maybe<Scalars['Cursor']>
  orderBy?: Maybe<Array<ShirtOrderItemsOrderBy>>
  condition?: Maybe<ShirtOrderItemCondition>
  filter?: Maybe<ShirtOrderItemFilter>
}

export type ShirtOrderCondition = {
  id?: Maybe<Scalars['Int']>
  deliveryMethod?: Maybe<Scalars['String']>
  message?: Maybe<Scalars['String']>
  userId?: Maybe<Scalars['Int']>
  year?: Maybe<Scalars['Int']>
}

export type ShirtOrderFilter = {
  id?: Maybe<IntFilter>
  deliveryMethod?: Maybe<StringFilter>
  message?: Maybe<StringFilter>
  userId?: Maybe<IntFilter>
  year?: Maybe<IntFilter>
  and?: Maybe<Array<ShirtOrderFilter>>
  or?: Maybe<Array<ShirtOrderFilter>>
  not?: Maybe<ShirtOrderFilter>
}

export type ShirtOrderInput = {
  id?: Maybe<Scalars['Int']>
  deliveryMethod: Scalars['String']
  message: Scalars['String']
  userId: Scalars['Int']
  year: Scalars['Int']
}

export type ShirtOrderItem = Node & {
  __typename: 'ShirtOrderItem'
  nodeId: Scalars['ID']
  id: Scalars['Int']
  orderId: Scalars['Int']
  quantity: Scalars['Int']
  size: Scalars['String']
  style: Scalars['String']
  itemsIdx?: Maybe<Scalars['Int']>
  order?: Maybe<ShirtOrder>
}

export type ShirtOrderItemCondition = {
  id?: Maybe<Scalars['Int']>
  orderId?: Maybe<Scalars['Int']>
  quantity?: Maybe<Scalars['Int']>
  size?: Maybe<Scalars['String']>
  style?: Maybe<Scalars['String']>
  itemsIdx?: Maybe<Scalars['Int']>
}

export type ShirtOrderItemFilter = {
  id?: Maybe<IntFilter>
  orderId?: Maybe<IntFilter>
  quantity?: Maybe<IntFilter>
  size?: Maybe<StringFilter>
  style?: Maybe<StringFilter>
  itemsIdx?: Maybe<IntFilter>
  and?: Maybe<Array<ShirtOrderItemFilter>>
  or?: Maybe<Array<ShirtOrderItemFilter>>
  not?: Maybe<ShirtOrderItemFilter>
}

export type ShirtOrderItemInput = {
  id?: Maybe<Scalars['Int']>
  orderId: Scalars['Int']
  quantity: Scalars['Int']
  size: Scalars['String']
  style: Scalars['String']
  itemsIdx?: Maybe<Scalars['Int']>
}

export type ShirtOrderItemPatch = {
  id?: Maybe<Scalars['Int']>
  orderId?: Maybe<Scalars['Int']>
  quantity?: Maybe<Scalars['Int']>
  size?: Maybe<Scalars['String']>
  style?: Maybe<Scalars['String']>
  itemsIdx?: Maybe<Scalars['Int']>
}

export type ShirtOrderItemsConnection = {
  __typename: 'ShirtOrderItemsConnection'
  nodes: Array<Maybe<ShirtOrderItem>>
  edges: Array<ShirtOrderItemsEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type ShirtOrderItemsEdge = {
  __typename: 'ShirtOrderItemsEdge'
  cursor?: Maybe<Scalars['Cursor']>
  node?: Maybe<ShirtOrderItem>
}

export enum ShirtOrderItemsOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  OrderIdAsc = 'ORDER_ID_ASC',
  OrderIdDesc = 'ORDER_ID_DESC',
  QuantityAsc = 'QUANTITY_ASC',
  QuantityDesc = 'QUANTITY_DESC',
  SizeAsc = 'SIZE_ASC',
  SizeDesc = 'SIZE_DESC',
  StyleAsc = 'STYLE_ASC',
  StyleDesc = 'STYLE_DESC',
  ItemsIdxAsc = 'ITEMS_IDX_ASC',
  ItemsIdxDesc = 'ITEMS_IDX_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  ShirtOrderByOrderIdIdAsc = 'SHIRT_ORDER_BY_ORDER_ID__ID_ASC',
  ShirtOrderByOrderIdIdDesc = 'SHIRT_ORDER_BY_ORDER_ID__ID_DESC',
  ShirtOrderByOrderIdDeliveryMethodAsc = 'SHIRT_ORDER_BY_ORDER_ID__DELIVERY_METHOD_ASC',
  ShirtOrderByOrderIdDeliveryMethodDesc = 'SHIRT_ORDER_BY_ORDER_ID__DELIVERY_METHOD_DESC',
  ShirtOrderByOrderIdMessageAsc = 'SHIRT_ORDER_BY_ORDER_ID__MESSAGE_ASC',
  ShirtOrderByOrderIdMessageDesc = 'SHIRT_ORDER_BY_ORDER_ID__MESSAGE_DESC',
  ShirtOrderByOrderIdUserIdAsc = 'SHIRT_ORDER_BY_ORDER_ID__USER_ID_ASC',
  ShirtOrderByOrderIdUserIdDesc = 'SHIRT_ORDER_BY_ORDER_ID__USER_ID_DESC',
  ShirtOrderByOrderIdYearAsc = 'SHIRT_ORDER_BY_ORDER_ID__YEAR_ASC',
  ShirtOrderByOrderIdYearDesc = 'SHIRT_ORDER_BY_ORDER_ID__YEAR_DESC'
}

export type ShirtOrderPatch = {
  id?: Maybe<Scalars['Int']>
  deliveryMethod?: Maybe<Scalars['String']>
  message?: Maybe<Scalars['String']>
  userId?: Maybe<Scalars['Int']>
  year?: Maybe<Scalars['Int']>
}

export type ShirtOrdersConnection = {
  __typename: 'ShirtOrdersConnection'
  nodes: Array<Maybe<ShirtOrder>>
  edges: Array<ShirtOrdersEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type ShirtOrdersEdge = {
  __typename: 'ShirtOrdersEdge'
  cursor?: Maybe<Scalars['Cursor']>
  node?: Maybe<ShirtOrder>
}

export enum ShirtOrdersOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  DeliveryMethodAsc = 'DELIVERY_METHOD_ASC',
  DeliveryMethodDesc = 'DELIVERY_METHOD_DESC',
  MessageAsc = 'MESSAGE_ASC',
  MessageDesc = 'MESSAGE_DESC',
  UserIdAsc = 'USER_ID_ASC',
  UserIdDesc = 'USER_ID_DESC',
  YearAsc = 'YEAR_ASC',
  YearDesc = 'YEAR_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  UserByUserIdIdAsc = 'USER_BY_USER_ID__ID_ASC',
  UserByUserIdIdDesc = 'USER_BY_USER_ID__ID_DESC',
  UserByUserIdAccountLockedAsc = 'USER_BY_USER_ID__ACCOUNT_LOCKED_ASC',
  UserByUserIdAccountLockedDesc = 'USER_BY_USER_ID__ACCOUNT_LOCKED_DESC',
  UserByUserIdEnabledAsc = 'USER_BY_USER_ID__ENABLED_ASC',
  UserByUserIdEnabledDesc = 'USER_BY_USER_ID__ENABLED_DESC',
  UserByUserIdPasswordAsc = 'USER_BY_USER_ID__PASSWORD_ASC',
  UserByUserIdPasswordDesc = 'USER_BY_USER_ID__PASSWORD_DESC',
  UserByUserIdProfileIdAsc = 'USER_BY_USER_ID__PROFILE_ID_ASC',
  UserByUserIdProfileIdDesc = 'USER_BY_USER_ID__PROFILE_ID_DESC',
  UserByUserIdUsernameAsc = 'USER_BY_USER_ID__USERNAME_ASC',
  UserByUserIdUsernameDesc = 'USER_BY_USER_ID__USERNAME_DESC',
  ShirtOrderItemsByOrderIdCountAsc = 'SHIRT_ORDER_ITEMS_BY_ORDER_ID__COUNT_ASC',
  ShirtOrderItemsByOrderIdCountDesc = 'SHIRT_ORDER_ITEMS_BY_ORDER_ID__COUNT_DESC'
}

export type Slot = Node & {
  __typename: 'Slot'
  nodeId: Scalars['ID']
  id: Scalars['Int']
  slot: Scalars['Int']
  day: Scalars['String']
  formattedDate: Scalars['String']
  length: Scalars['String']
  time: Scalars['String']
  games: GamesConnection
  gameChoices: GameChoicesConnection
}

export type SlotGamesArgs = {
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  before?: Maybe<Scalars['Cursor']>
  after?: Maybe<Scalars['Cursor']>
  orderBy?: Maybe<Array<GamesOrderBy>>
  condition?: Maybe<GameCondition>
  filter?: Maybe<GameFilter>
}

export type SlotGameChoicesArgs = {
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  before?: Maybe<Scalars['Cursor']>
  after?: Maybe<Scalars['Cursor']>
  orderBy?: Maybe<Array<GameChoicesOrderBy>>
  condition?: Maybe<GameChoiceCondition>
  filter?: Maybe<GameChoiceFilter>
}

export type SlotCondition = {
  id?: Maybe<Scalars['Int']>
  slot?: Maybe<Scalars['Int']>
  day?: Maybe<Scalars['String']>
  formattedDate?: Maybe<Scalars['String']>
  length?: Maybe<Scalars['String']>
  time?: Maybe<Scalars['String']>
}

export type SlotFilter = {
  id?: Maybe<IntFilter>
  slot?: Maybe<IntFilter>
  day?: Maybe<StringFilter>
  formattedDate?: Maybe<StringFilter>
  length?: Maybe<StringFilter>
  time?: Maybe<StringFilter>
  and?: Maybe<Array<SlotFilter>>
  or?: Maybe<Array<SlotFilter>>
  not?: Maybe<SlotFilter>
}

export type SlotInput = {
  id?: Maybe<Scalars['Int']>
  slot: Scalars['Int']
  day: Scalars['String']
  formattedDate: Scalars['String']
  length: Scalars['String']
  time: Scalars['String']
}

export type SlotPatch = {
  id?: Maybe<Scalars['Int']>
  slot?: Maybe<Scalars['Int']>
  day?: Maybe<Scalars['String']>
  formattedDate?: Maybe<Scalars['String']>
  length?: Maybe<Scalars['String']>
  time?: Maybe<Scalars['String']>
}

export type SlotsConnection = {
  __typename: 'SlotsConnection'
  nodes: Array<Maybe<Slot>>
  edges: Array<SlotsEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type SlotsEdge = {
  __typename: 'SlotsEdge'
  cursor?: Maybe<Scalars['Cursor']>
  node?: Maybe<Slot>
}

export enum SlotsOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  SlotAsc = 'SLOT_ASC',
  SlotDesc = 'SLOT_DESC',
  DayAsc = 'DAY_ASC',
  DayDesc = 'DAY_DESC',
  FormattedDateAsc = 'FORMATTED_DATE_ASC',
  FormattedDateDesc = 'FORMATTED_DATE_DESC',
  LengthAsc = 'LENGTH_ASC',
  LengthDesc = 'LENGTH_DESC',
  TimeAsc = 'TIME_ASC',
  TimeDesc = 'TIME_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  GamesBySlotIdCountAsc = 'GAMES_BY_SLOT_ID__COUNT_ASC',
  GamesBySlotIdCountDesc = 'GAMES_BY_SLOT_ID__COUNT_DESC',
  GameChoicesBySlotIdCountAsc = 'GAME_CHOICES_BY_SLOT_ID__COUNT_ASC',
  GameChoicesBySlotIdCountDesc = 'GAME_CHOICES_BY_SLOT_ID__COUNT_DESC'
}

export type StringFilter = {
  isNull?: Maybe<Scalars['Boolean']>
  equalTo?: Maybe<Scalars['String']>
  notEqualTo?: Maybe<Scalars['String']>
  distinctFrom?: Maybe<Scalars['String']>
  notDistinctFrom?: Maybe<Scalars['String']>
  in?: Maybe<Array<Scalars['String']>>
  notIn?: Maybe<Array<Scalars['String']>>
  lessThan?: Maybe<Scalars['String']>
  lessThanOrEqualTo?: Maybe<Scalars['String']>
  greaterThan?: Maybe<Scalars['String']>
  greaterThanOrEqualTo?: Maybe<Scalars['String']>
  includes?: Maybe<Scalars['String']>
  notIncludes?: Maybe<Scalars['String']>
  includesInsensitive?: Maybe<Scalars['String']>
  notIncludesInsensitive?: Maybe<Scalars['String']>
  startsWith?: Maybe<Scalars['String']>
  notStartsWith?: Maybe<Scalars['String']>
  startsWithInsensitive?: Maybe<Scalars['String']>
  notStartsWithInsensitive?: Maybe<Scalars['String']>
  endsWith?: Maybe<Scalars['String']>
  notEndsWith?: Maybe<Scalars['String']>
  endsWithInsensitive?: Maybe<Scalars['String']>
  notEndsWithInsensitive?: Maybe<Scalars['String']>
  like?: Maybe<Scalars['String']>
  notLike?: Maybe<Scalars['String']>
  likeInsensitive?: Maybe<Scalars['String']>
  notLikeInsensitive?: Maybe<Scalars['String']>
  similarTo?: Maybe<Scalars['String']>
  notSimilarTo?: Maybe<Scalars['String']>
}

export type Token = Node & {
  __typename: 'Token'
  nodeId: Scalars['ID']
  id: Scalars['Int']
  userId: Scalars['Int']
  cuid?: Maybe<Scalars['String']>
  active?: Maybe<Scalars['Boolean']>
  lastUsed?: Maybe<Scalars['Datetime']>
  user?: Maybe<User>
}

export type TokenCondition = {
  id?: Maybe<Scalars['Int']>
  userId?: Maybe<Scalars['Int']>
  cuid?: Maybe<Scalars['String']>
  active?: Maybe<Scalars['Boolean']>
  lastUsed?: Maybe<Scalars['Datetime']>
}

export type TokenFilter = {
  id?: Maybe<IntFilter>
  userId?: Maybe<IntFilter>
  cuid?: Maybe<StringFilter>
  active?: Maybe<BooleanFilter>
  lastUsed?: Maybe<DatetimeFilter>
  and?: Maybe<Array<TokenFilter>>
  or?: Maybe<Array<TokenFilter>>
  not?: Maybe<TokenFilter>
}

export type TokenInput = {
  id?: Maybe<Scalars['Int']>
  userId: Scalars['Int']
  cuid?: Maybe<Scalars['String']>
  active?: Maybe<Scalars['Boolean']>
  lastUsed?: Maybe<Scalars['Datetime']>
}

export type TokenPatch = {
  id?: Maybe<Scalars['Int']>
  userId?: Maybe<Scalars['Int']>
  cuid?: Maybe<Scalars['String']>
  active?: Maybe<Scalars['Boolean']>
  lastUsed?: Maybe<Scalars['Datetime']>
}

export type TokensConnection = {
  __typename: 'TokensConnection'
  nodes: Array<Maybe<Token>>
  edges: Array<TokensEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type TokensEdge = {
  __typename: 'TokensEdge'
  cursor?: Maybe<Scalars['Cursor']>
  node?: Maybe<Token>
}

export enum TokensOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  UserIdAsc = 'USER_ID_ASC',
  UserIdDesc = 'USER_ID_DESC',
  CuidAsc = 'CUID_ASC',
  CuidDesc = 'CUID_DESC',
  ActiveAsc = 'ACTIVE_ASC',
  ActiveDesc = 'ACTIVE_DESC',
  LastUsedAsc = 'LAST_USED_ASC',
  LastUsedDesc = 'LAST_USED_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  UserByUserIdIdAsc = 'USER_BY_USER_ID__ID_ASC',
  UserByUserIdIdDesc = 'USER_BY_USER_ID__ID_DESC',
  UserByUserIdAccountLockedAsc = 'USER_BY_USER_ID__ACCOUNT_LOCKED_ASC',
  UserByUserIdAccountLockedDesc = 'USER_BY_USER_ID__ACCOUNT_LOCKED_DESC',
  UserByUserIdEnabledAsc = 'USER_BY_USER_ID__ENABLED_ASC',
  UserByUserIdEnabledDesc = 'USER_BY_USER_ID__ENABLED_DESC',
  UserByUserIdPasswordAsc = 'USER_BY_USER_ID__PASSWORD_ASC',
  UserByUserIdPasswordDesc = 'USER_BY_USER_ID__PASSWORD_DESC',
  UserByUserIdProfileIdAsc = 'USER_BY_USER_ID__PROFILE_ID_ASC',
  UserByUserIdProfileIdDesc = 'USER_BY_USER_ID__PROFILE_ID_DESC',
  UserByUserIdUsernameAsc = 'USER_BY_USER_ID__USERNAME_ASC',
  UserByUserIdUsernameDesc = 'USER_BY_USER_ID__USERNAME_DESC'
}

export type UpdateGameAssignmentByNodeIdInput = {
  clientMutationId?: Maybe<Scalars['String']>
  nodeId: Scalars['ID']
  patch: GameAssignmentPatch
}

export type UpdateGameAssignmentInput = {
  clientMutationId?: Maybe<Scalars['String']>
  patch: GameAssignmentPatch
  memberId: Scalars['Int']
  gameId: Scalars['Int']
  gm: Scalars['Int']
}

export type UpdateGameAssignmentPayload = {
  __typename: 'UpdateGameAssignmentPayload'
  clientMutationId?: Maybe<Scalars['String']>
  gameAssignment?: Maybe<GameAssignment>
  query?: Maybe<Query>
  member?: Maybe<Membership>
  game?: Maybe<Game>
  gameAssignmentEdge?: Maybe<GameAssignmentsEdge>
}

export type UpdateGameAssignmentPayloadGameAssignmentEdgeArgs = {
  orderBy?: Maybe<Array<GameAssignmentsOrderBy>>
}

export type UpdateGameByNodeIdInput = {
  clientMutationId?: Maybe<Scalars['String']>
  nodeId: Scalars['ID']
  patch: GamePatch
}

export type UpdateGameChoiceByNodeIdInput = {
  clientMutationId?: Maybe<Scalars['String']>
  nodeId: Scalars['ID']
  patch: GameChoicePatch
}

export type UpdateGameChoiceInput = {
  clientMutationId?: Maybe<Scalars['String']>
  patch: GameChoicePatch
  id: Scalars['Int']
}

export type UpdateGameChoicePayload = {
  __typename: 'UpdateGameChoicePayload'
  clientMutationId?: Maybe<Scalars['String']>
  gameChoice?: Maybe<GameChoice>
  query?: Maybe<Query>
  game?: Maybe<Game>
  member?: Maybe<Membership>
  slot?: Maybe<Slot>
  gameChoiceEdge?: Maybe<GameChoicesEdge>
}

export type UpdateGameChoicePayloadGameChoiceEdgeArgs = {
  orderBy?: Maybe<Array<GameChoicesOrderBy>>
}

export type UpdateGameInput = {
  clientMutationId?: Maybe<Scalars['String']>
  patch: GamePatch
  id: Scalars['Int']
}

export type UpdateGamePayload = {
  __typename: 'UpdateGamePayload'
  clientMutationId?: Maybe<Scalars['String']>
  game?: Maybe<Game>
  query?: Maybe<Query>
  room?: Maybe<Room>
  slot?: Maybe<Slot>
  author?: Maybe<User>
  gameEdge?: Maybe<GamesEdge>
}

export type UpdateGamePayloadGameEdgeArgs = {
  orderBy?: Maybe<Array<GamesOrderBy>>
}

export type UpdateGameSubmissionByNodeIdInput = {
  clientMutationId?: Maybe<Scalars['String']>
  nodeId: Scalars['ID']
  patch: GameSubmissionPatch
}

export type UpdateGameSubmissionInput = {
  clientMutationId?: Maybe<Scalars['String']>
  patch: GameSubmissionPatch
  id: Scalars['Int']
}

export type UpdateGameSubmissionPayload = {
  __typename: 'UpdateGameSubmissionPayload'
  clientMutationId?: Maybe<Scalars['String']>
  gameSubmission?: Maybe<GameSubmission>
  query?: Maybe<Query>
  member?: Maybe<Membership>
  gameSubmissionEdge?: Maybe<GameSubmissionsEdge>
}

export type UpdateGameSubmissionPayloadGameSubmissionEdgeArgs = {
  orderBy?: Maybe<Array<GameSubmissionsOrderBy>>
}

export type UpdateHotelRoomByNodeIdInput = {
  clientMutationId?: Maybe<Scalars['String']>
  nodeId: Scalars['ID']
  patch: HotelRoomPatch
}

export type UpdateHotelRoomDetailByNodeIdInput = {
  clientMutationId?: Maybe<Scalars['String']>
  nodeId: Scalars['ID']
  patch: HotelRoomDetailPatch
}

export type UpdateHotelRoomDetailInput = {
  clientMutationId?: Maybe<Scalars['String']>
  patch: HotelRoomDetailPatch
  id: Scalars['BigInt']
}

export type UpdateHotelRoomDetailPayload = {
  __typename: 'UpdateHotelRoomDetailPayload'
  clientMutationId?: Maybe<Scalars['String']>
  hotelRoomDetail?: Maybe<HotelRoomDetail>
  query?: Maybe<Query>
  hotelRoomDetailEdge?: Maybe<HotelRoomDetailsEdge>
}

export type UpdateHotelRoomDetailPayloadHotelRoomDetailEdgeArgs = {
  orderBy?: Maybe<Array<HotelRoomDetailsOrderBy>>
}

export type UpdateHotelRoomInput = {
  clientMutationId?: Maybe<Scalars['String']>
  patch: HotelRoomPatch
  id: Scalars['Int']
}

export type UpdateHotelRoomPayload = {
  __typename: 'UpdateHotelRoomPayload'
  clientMutationId?: Maybe<Scalars['String']>
  hotelRoom?: Maybe<HotelRoom>
  query?: Maybe<Query>
  hotelRoomEdge?: Maybe<HotelRoomsEdge>
}

export type UpdateHotelRoomPayloadHotelRoomEdgeArgs = {
  orderBy?: Maybe<Array<HotelRoomsOrderBy>>
}

export type UpdateLookupByNodeIdInput = {
  clientMutationId?: Maybe<Scalars['String']>
  nodeId: Scalars['ID']
  patch: LookupPatch
}

export type UpdateLookupByRealmInput = {
  clientMutationId?: Maybe<Scalars['String']>
  patch: LookupPatch
  realm: Scalars['String']
}

export type UpdateLookupInput = {
  clientMutationId?: Maybe<Scalars['String']>
  patch: LookupPatch
  id: Scalars['Int']
}

export type UpdateLookupPayload = {
  __typename: 'UpdateLookupPayload'
  clientMutationId?: Maybe<Scalars['String']>
  lookup?: Maybe<Lookup>
  query?: Maybe<Query>
  lookupEdge?: Maybe<LookupsEdge>
}

export type UpdateLookupPayloadLookupEdgeArgs = {
  orderBy?: Maybe<Array<LookupsOrderBy>>
}

export type UpdateLookupValueByLookupIdAndCodeInput = {
  clientMutationId?: Maybe<Scalars['String']>
  patch: LookupValuePatch
  lookupId: Scalars['Int']
  code: Scalars['String']
}

export type UpdateLookupValueByNodeIdInput = {
  clientMutationId?: Maybe<Scalars['String']>
  nodeId: Scalars['ID']
  patch: LookupValuePatch
}

export type UpdateLookupValueInput = {
  clientMutationId?: Maybe<Scalars['String']>
  patch: LookupValuePatch
  id: Scalars['Int']
}

export type UpdateLookupValuePayload = {
  __typename: 'UpdateLookupValuePayload'
  clientMutationId?: Maybe<Scalars['String']>
  lookupValue?: Maybe<LookupValue>
  query?: Maybe<Query>
  lookup?: Maybe<Lookup>
  lookupValueEdge?: Maybe<LookupValuesEdge>
}

export type UpdateLookupValuePayloadLookupValueEdgeArgs = {
  orderBy?: Maybe<Array<LookupValuesOrderBy>>
}

export type UpdateMemberHotelRoomAssignmentByNodeIdInput = {
  clientMutationId?: Maybe<Scalars['String']>
  nodeId: Scalars['ID']
  patch: MemberHotelRoomAssignmentPatch
}

export type UpdateMemberHotelRoomAssignmentInput = {
  clientMutationId?: Maybe<Scalars['String']>
  patch: MemberHotelRoomAssignmentPatch
  memberId: Scalars['BigInt']
  hotelRoomId: Scalars['BigInt']
}

export type UpdateMemberHotelRoomAssignmentPayload = {
  __typename: 'UpdateMemberHotelRoomAssignmentPayload'
  clientMutationId?: Maybe<Scalars['String']>
  memberHotelRoomAssignment?: Maybe<MemberHotelRoomAssignment>
  query?: Maybe<Query>
  member?: Maybe<Membership>
  hotelRoom?: Maybe<HotelRoomDetail>
  memberHotelRoomAssignmentEdge?: Maybe<MemberHotelRoomAssignmentsEdge>
}

export type UpdateMemberHotelRoomAssignmentPayloadMemberHotelRoomAssignmentEdgeArgs = {
  orderBy?: Maybe<Array<MemberHotelRoomAssignmentsOrderBy>>
}

export type UpdateMembershipByNodeIdInput = {
  clientMutationId?: Maybe<Scalars['String']>
  nodeId: Scalars['ID']
  patch: MembershipPatch
}

export type UpdateMembershipInput = {
  clientMutationId?: Maybe<Scalars['String']>
  patch: MembershipPatch
  id: Scalars['Int']
}

export type UpdateMembershipPayload = {
  __typename: 'UpdateMembershipPayload'
  clientMutationId?: Maybe<Scalars['String']>
  membership?: Maybe<Membership>
  query?: Maybe<Query>
  hotelRoom?: Maybe<HotelRoom>
  user?: Maybe<User>
  membershipEdge?: Maybe<MembershipsEdge>
}

export type UpdateMembershipPayloadMembershipEdgeArgs = {
  orderBy?: Maybe<Array<MembershipsOrderBy>>
}

export type UpdateProfileByEmailInput = {
  clientMutationId?: Maybe<Scalars['String']>
  patch: ProfilePatch
  email: Scalars['String']
}

export type UpdateProfileByNodeIdInput = {
  clientMutationId?: Maybe<Scalars['String']>
  nodeId: Scalars['ID']
  patch: ProfilePatch
}

export type UpdateProfileInput = {
  clientMutationId?: Maybe<Scalars['String']>
  patch: ProfilePatch
  id: Scalars['Int']
}

export type UpdateProfilePayload = {
  __typename: 'UpdateProfilePayload'
  clientMutationId?: Maybe<Scalars['String']>
  profile?: Maybe<Profile>
  query?: Maybe<Query>
  profileEdge?: Maybe<ProfilesEdge>
}

export type UpdateProfilePayloadProfileEdgeArgs = {
  orderBy?: Maybe<Array<ProfilesOrderBy>>
}

export type UpdateRegistrationCodeByNodeIdInput = {
  clientMutationId?: Maybe<Scalars['String']>
  nodeId: Scalars['ID']
  patch: RegistrationCodePatch
}

export type UpdateRegistrationCodeInput = {
  clientMutationId?: Maybe<Scalars['String']>
  patch: RegistrationCodePatch
  id: Scalars['Int']
}

export type UpdateRegistrationCodePayload = {
  __typename: 'UpdateRegistrationCodePayload'
  clientMutationId?: Maybe<Scalars['String']>
  registrationCode?: Maybe<RegistrationCode>
  query?: Maybe<Query>
  registrationCodeEdge?: Maybe<RegistrationCodesEdge>
}

export type UpdateRegistrationCodePayloadRegistrationCodeEdgeArgs = {
  orderBy?: Maybe<Array<RegistrationCodesOrderBy>>
}

export type UpdateRoleByAuthorityInput = {
  clientMutationId?: Maybe<Scalars['String']>
  patch: RolePatch
  authority: Scalars['String']
}

export type UpdateRoleByNodeIdInput = {
  clientMutationId?: Maybe<Scalars['String']>
  nodeId: Scalars['ID']
  patch: RolePatch
}

export type UpdateRoleInput = {
  clientMutationId?: Maybe<Scalars['String']>
  patch: RolePatch
  id: Scalars['Int']
}

export type UpdateRolePayload = {
  __typename: 'UpdateRolePayload'
  clientMutationId?: Maybe<Scalars['String']>
  role?: Maybe<Role>
  query?: Maybe<Query>
  roleEdge?: Maybe<RolesEdge>
}

export type UpdateRolePayloadRoleEdgeArgs = {
  orderBy?: Maybe<Array<RolesOrderBy>>
}

export type UpdateRoomByNodeIdInput = {
  clientMutationId?: Maybe<Scalars['String']>
  nodeId: Scalars['ID']
  patch: RoomPatch
}

export type UpdateRoomInput = {
  clientMutationId?: Maybe<Scalars['String']>
  patch: RoomPatch
  id: Scalars['Int']
}

export type UpdateRoomPayload = {
  __typename: 'UpdateRoomPayload'
  clientMutationId?: Maybe<Scalars['String']>
  room?: Maybe<Room>
  query?: Maybe<Query>
  roomEdge?: Maybe<RoomsEdge>
}

export type UpdateRoomPayloadRoomEdgeArgs = {
  orderBy?: Maybe<Array<RoomsOrderBy>>
}

export type UpdateSettingByNodeIdInput = {
  clientMutationId?: Maybe<Scalars['String']>
  nodeId: Scalars['ID']
  patch: SettingPatch
}

export type UpdateSettingInput = {
  clientMutationId?: Maybe<Scalars['String']>
  patch: SettingPatch
  id: Scalars['Int']
}

export type UpdateSettingPayload = {
  __typename: 'UpdateSettingPayload'
  clientMutationId?: Maybe<Scalars['String']>
  setting?: Maybe<Setting>
  query?: Maybe<Query>
  settingEdge?: Maybe<SettingsEdge>
}

export type UpdateSettingPayloadSettingEdgeArgs = {
  orderBy?: Maybe<Array<SettingsOrderBy>>
}

export type UpdateShirtOrderByNodeIdInput = {
  clientMutationId?: Maybe<Scalars['String']>
  nodeId: Scalars['ID']
  patch: ShirtOrderPatch
}

export type UpdateShirtOrderInput = {
  clientMutationId?: Maybe<Scalars['String']>
  patch: ShirtOrderPatch
  id: Scalars['Int']
}

export type UpdateShirtOrderItemByNodeIdInput = {
  clientMutationId?: Maybe<Scalars['String']>
  nodeId: Scalars['ID']
  patch: ShirtOrderItemPatch
}

export type UpdateShirtOrderItemInput = {
  clientMutationId?: Maybe<Scalars['String']>
  patch: ShirtOrderItemPatch
  id: Scalars['Int']
}

export type UpdateShirtOrderItemPayload = {
  __typename: 'UpdateShirtOrderItemPayload'
  clientMutationId?: Maybe<Scalars['String']>
  shirtOrderItem?: Maybe<ShirtOrderItem>
  query?: Maybe<Query>
  order?: Maybe<ShirtOrder>
  shirtOrderItemEdge?: Maybe<ShirtOrderItemsEdge>
}

export type UpdateShirtOrderItemPayloadShirtOrderItemEdgeArgs = {
  orderBy?: Maybe<Array<ShirtOrderItemsOrderBy>>
}

export type UpdateShirtOrderPayload = {
  __typename: 'UpdateShirtOrderPayload'
  clientMutationId?: Maybe<Scalars['String']>
  shirtOrder?: Maybe<ShirtOrder>
  query?: Maybe<Query>
  user?: Maybe<User>
  shirtOrderEdge?: Maybe<ShirtOrdersEdge>
}

export type UpdateShirtOrderPayloadShirtOrderEdgeArgs = {
  orderBy?: Maybe<Array<ShirtOrdersOrderBy>>
}

export type UpdateSlotByNodeIdInput = {
  clientMutationId?: Maybe<Scalars['String']>
  nodeId: Scalars['ID']
  patch: SlotPatch
}

export type UpdateSlotInput = {
  clientMutationId?: Maybe<Scalars['String']>
  patch: SlotPatch
  id: Scalars['Int']
}

export type UpdateSlotPayload = {
  __typename: 'UpdateSlotPayload'
  clientMutationId?: Maybe<Scalars['String']>
  slot?: Maybe<Slot>
  query?: Maybe<Query>
  slotEdge?: Maybe<SlotsEdge>
}

export type UpdateSlotPayloadSlotEdgeArgs = {
  orderBy?: Maybe<Array<SlotsOrderBy>>
}

export type UpdateTokenByNodeIdInput = {
  clientMutationId?: Maybe<Scalars['String']>
  nodeId: Scalars['ID']
  patch: TokenPatch
}

export type UpdateTokenInput = {
  clientMutationId?: Maybe<Scalars['String']>
  patch: TokenPatch
  id: Scalars['Int']
}

export type UpdateTokenPayload = {
  __typename: 'UpdateTokenPayload'
  clientMutationId?: Maybe<Scalars['String']>
  token?: Maybe<Token>
  query?: Maybe<Query>
  user?: Maybe<User>
  tokenEdge?: Maybe<TokensEdge>
}

export type UpdateTokenPayloadTokenEdgeArgs = {
  orderBy?: Maybe<Array<TokensOrderBy>>
}

export type UpdateUserByNodeIdInput = {
  clientMutationId?: Maybe<Scalars['String']>
  nodeId: Scalars['ID']
  patch: UserPatch
}

export type UpdateUserByUsernameInput = {
  clientMutationId?: Maybe<Scalars['String']>
  patch: UserPatch
  username: Scalars['String']
}

export type UpdateUserInput = {
  clientMutationId?: Maybe<Scalars['String']>
  patch: UserPatch
  id: Scalars['Int']
}

export type UpdateUserPayload = {
  __typename: 'UpdateUserPayload'
  clientMutationId?: Maybe<Scalars['String']>
  user?: Maybe<User>
  query?: Maybe<Query>
  profile?: Maybe<Profile>
  userEdge?: Maybe<UsersEdge>
}

export type UpdateUserPayloadUserEdgeArgs = {
  orderBy?: Maybe<Array<UsersOrderBy>>
}

export type UpdateUserRoleByNodeIdInput = {
  clientMutationId?: Maybe<Scalars['String']>
  nodeId: Scalars['ID']
  patch: UserRolePatch
}

export type UpdateUserRoleInput = {
  clientMutationId?: Maybe<Scalars['String']>
  patch: UserRolePatch
  roleId: Scalars['Int']
  userId: Scalars['Int']
}

export type UpdateUserRolePayload = {
  __typename: 'UpdateUserRolePayload'
  clientMutationId?: Maybe<Scalars['String']>
  userRole?: Maybe<UserRole>
  query?: Maybe<Query>
  role?: Maybe<Role>
  user?: Maybe<User>
  userRoleEdge?: Maybe<UserRolesEdge>
}

export type UpdateUserRolePayloadUserRoleEdgeArgs = {
  orderBy?: Maybe<Array<UserRolesOrderBy>>
}

export type User = Node & {
  __typename: 'User'
  nodeId: Scalars['ID']
  id: Scalars['Int']
  accountLocked: Scalars['Boolean']
  enabled: Scalars['Boolean']
  password: Scalars['String']
  profileId: Scalars['Int']
  username: Scalars['String']
  profile?: Maybe<Profile>
  authoredGames: GamesConnection
  memberships: MembershipsConnection
  shirtOrders: ShirtOrdersConnection
  userRoles: UserRolesConnection
  tokens: TokensConnection
}

export type UserAuthoredGamesArgs = {
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  before?: Maybe<Scalars['Cursor']>
  after?: Maybe<Scalars['Cursor']>
  orderBy?: Maybe<Array<GamesOrderBy>>
  condition?: Maybe<GameCondition>
  filter?: Maybe<GameFilter>
}

export type UserMembershipsArgs = {
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  before?: Maybe<Scalars['Cursor']>
  after?: Maybe<Scalars['Cursor']>
  orderBy?: Maybe<Array<MembershipsOrderBy>>
  condition?: Maybe<MembershipCondition>
  filter?: Maybe<MembershipFilter>
}

export type UserShirtOrdersArgs = {
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  before?: Maybe<Scalars['Cursor']>
  after?: Maybe<Scalars['Cursor']>
  orderBy?: Maybe<Array<ShirtOrdersOrderBy>>
  condition?: Maybe<ShirtOrderCondition>
  filter?: Maybe<ShirtOrderFilter>
}

export type UserUserRolesArgs = {
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  before?: Maybe<Scalars['Cursor']>
  after?: Maybe<Scalars['Cursor']>
  orderBy?: Maybe<Array<UserRolesOrderBy>>
  condition?: Maybe<UserRoleCondition>
  filter?: Maybe<UserRoleFilter>
}

export type UserTokensArgs = {
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  before?: Maybe<Scalars['Cursor']>
  after?: Maybe<Scalars['Cursor']>
  orderBy?: Maybe<Array<TokensOrderBy>>
  condition?: Maybe<TokenCondition>
  filter?: Maybe<TokenFilter>
}

export type UserCondition = {
  id?: Maybe<Scalars['Int']>
  accountLocked?: Maybe<Scalars['Boolean']>
  enabled?: Maybe<Scalars['Boolean']>
  password?: Maybe<Scalars['String']>
  profileId?: Maybe<Scalars['Int']>
  username?: Maybe<Scalars['String']>
}

export type UserFilter = {
  id?: Maybe<IntFilter>
  accountLocked?: Maybe<BooleanFilter>
  enabled?: Maybe<BooleanFilter>
  password?: Maybe<StringFilter>
  profileId?: Maybe<IntFilter>
  username?: Maybe<StringFilter>
  and?: Maybe<Array<UserFilter>>
  or?: Maybe<Array<UserFilter>>
  not?: Maybe<UserFilter>
}

export type UserInput = {
  id?: Maybe<Scalars['Int']>
  accountLocked: Scalars['Boolean']
  enabled: Scalars['Boolean']
  password: Scalars['String']
  profileId: Scalars['Int']
  username: Scalars['String']
}

export type UserPatch = {
  id?: Maybe<Scalars['Int']>
  accountLocked?: Maybe<Scalars['Boolean']>
  enabled?: Maybe<Scalars['Boolean']>
  password?: Maybe<Scalars['String']>
  profileId?: Maybe<Scalars['Int']>
  username?: Maybe<Scalars['String']>
}

export type UserRole = Node & {
  __typename: 'UserRole'
  nodeId: Scalars['ID']
  roleId: Scalars['Int']
  userId: Scalars['Int']
  role?: Maybe<Role>
  user?: Maybe<User>
}

export type UserRoleCondition = {
  roleId?: Maybe<Scalars['Int']>
  userId?: Maybe<Scalars['Int']>
}

export type UserRoleFilter = {
  roleId?: Maybe<IntFilter>
  userId?: Maybe<IntFilter>
  and?: Maybe<Array<UserRoleFilter>>
  or?: Maybe<Array<UserRoleFilter>>
  not?: Maybe<UserRoleFilter>
}

export type UserRoleInput = {
  roleId: Scalars['Int']
  userId: Scalars['Int']
}

export type UserRolePatch = {
  roleId?: Maybe<Scalars['Int']>
  userId?: Maybe<Scalars['Int']>
}

export type UserRolesConnection = {
  __typename: 'UserRolesConnection'
  nodes: Array<Maybe<UserRole>>
  edges: Array<UserRolesEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type UserRolesEdge = {
  __typename: 'UserRolesEdge'
  cursor?: Maybe<Scalars['Cursor']>
  node?: Maybe<UserRole>
}

export enum UserRolesOrderBy {
  Natural = 'NATURAL',
  RoleIdAsc = 'ROLE_ID_ASC',
  RoleIdDesc = 'ROLE_ID_DESC',
  UserIdAsc = 'USER_ID_ASC',
  UserIdDesc = 'USER_ID_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  RoleByRoleIdIdAsc = 'ROLE_BY_ROLE_ID__ID_ASC',
  RoleByRoleIdIdDesc = 'ROLE_BY_ROLE_ID__ID_DESC',
  RoleByRoleIdAuthorityAsc = 'ROLE_BY_ROLE_ID__AUTHORITY_ASC',
  RoleByRoleIdAuthorityDesc = 'ROLE_BY_ROLE_ID__AUTHORITY_DESC',
  UserByUserIdIdAsc = 'USER_BY_USER_ID__ID_ASC',
  UserByUserIdIdDesc = 'USER_BY_USER_ID__ID_DESC',
  UserByUserIdAccountLockedAsc = 'USER_BY_USER_ID__ACCOUNT_LOCKED_ASC',
  UserByUserIdAccountLockedDesc = 'USER_BY_USER_ID__ACCOUNT_LOCKED_DESC',
  UserByUserIdEnabledAsc = 'USER_BY_USER_ID__ENABLED_ASC',
  UserByUserIdEnabledDesc = 'USER_BY_USER_ID__ENABLED_DESC',
  UserByUserIdPasswordAsc = 'USER_BY_USER_ID__PASSWORD_ASC',
  UserByUserIdPasswordDesc = 'USER_BY_USER_ID__PASSWORD_DESC',
  UserByUserIdProfileIdAsc = 'USER_BY_USER_ID__PROFILE_ID_ASC',
  UserByUserIdProfileIdDesc = 'USER_BY_USER_ID__PROFILE_ID_DESC',
  UserByUserIdUsernameAsc = 'USER_BY_USER_ID__USERNAME_ASC',
  UserByUserIdUsernameDesc = 'USER_BY_USER_ID__USERNAME_DESC'
}

export type UsersConnection = {
  __typename: 'UsersConnection'
  nodes: Array<Maybe<User>>
  edges: Array<UsersEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type UsersEdge = {
  __typename: 'UsersEdge'
  cursor?: Maybe<Scalars['Cursor']>
  node?: Maybe<User>
}

export enum UsersOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  AccountLockedAsc = 'ACCOUNT_LOCKED_ASC',
  AccountLockedDesc = 'ACCOUNT_LOCKED_DESC',
  EnabledAsc = 'ENABLED_ASC',
  EnabledDesc = 'ENABLED_DESC',
  PasswordAsc = 'PASSWORD_ASC',
  PasswordDesc = 'PASSWORD_DESC',
  ProfileIdAsc = 'PROFILE_ID_ASC',
  ProfileIdDesc = 'PROFILE_ID_DESC',
  UsernameAsc = 'USERNAME_ASC',
  UsernameDesc = 'USERNAME_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  ProfileByProfileIdIdAsc = 'PROFILE_BY_PROFILE_ID__ID_ASC',
  ProfileByProfileIdIdDesc = 'PROFILE_BY_PROFILE_ID__ID_DESC',
  ProfileByProfileIdEmailAsc = 'PROFILE_BY_PROFILE_ID__EMAIL_ASC',
  ProfileByProfileIdEmailDesc = 'PROFILE_BY_PROFILE_ID__EMAIL_DESC',
  ProfileByProfileIdFullNameAsc = 'PROFILE_BY_PROFILE_ID__FULL_NAME_ASC',
  ProfileByProfileIdFullNameDesc = 'PROFILE_BY_PROFILE_ID__FULL_NAME_DESC',
  ProfileByProfileIdPhoneNumberAsc = 'PROFILE_BY_PROFILE_ID__PHONE_NUMBER_ASC',
  ProfileByProfileIdPhoneNumberDesc = 'PROFILE_BY_PROFILE_ID__PHONE_NUMBER_DESC',
  ProfileByProfileIdSnailMailAddressAsc = 'PROFILE_BY_PROFILE_ID__SNAIL_MAIL_ADDRESS_ASC',
  ProfileByProfileIdSnailMailAddressDesc = 'PROFILE_BY_PROFILE_ID__SNAIL_MAIL_ADDRESS_DESC',
  GamesByAuthorIdCountAsc = 'GAMES_BY_AUTHOR_ID__COUNT_ASC',
  GamesByAuthorIdCountDesc = 'GAMES_BY_AUTHOR_ID__COUNT_DESC',
  MembershipsByUserIdCountAsc = 'MEMBERSHIPS_BY_USER_ID__COUNT_ASC',
  MembershipsByUserIdCountDesc = 'MEMBERSHIPS_BY_USER_ID__COUNT_DESC',
  ShirtOrdersByUserIdCountAsc = 'SHIRT_ORDERS_BY_USER_ID__COUNT_ASC',
  ShirtOrdersByUserIdCountDesc = 'SHIRT_ORDERS_BY_USER_ID__COUNT_DESC',
  UserRolesByUserIdCountAsc = 'USER_ROLES_BY_USER_ID__COUNT_ASC',
  UserRolesByUserIdCountDesc = 'USER_ROLES_BY_USER_ID__COUNT_DESC',
  TokensByUserIdCountAsc = 'TOKENS_BY_USER_ID__COUNT_ASC',
  TokensByUserIdCountDesc = 'TOKENS_BY_USER_ID__COUNT_DESC'
}

export type GetGamesBySlotQueryVariables = {
  year: Scalars['Int']
  slotId: Scalars['Int']
}

export type GetGamesBySlotQuery = { __typename: 'Query' } & {
  games: Maybe<
    { __typename: 'GamesConnection' } & {
      edges: Array<
        { __typename: 'GamesEdge' } & { node: Maybe<{ __typename: 'Game' } & GameFieldsFragment & GameGmsFragment> }
      >
    }
  >
}

export type GetGamesByYearQueryVariables = {
  year: Scalars['Int']
}

export type GetGamesByYearQuery = { __typename: 'Query' } & {
  games: Maybe<
    { __typename: 'GamesConnection' } & {
      edges: Array<
        { __typename: 'GamesEdge' } & { node: Maybe<{ __typename: 'Game' } & GameFieldsFragment & GameGmsFragment> }
      >
    }
  >
}

export type UpdateGameByNodeIdMutationVariables = {
  input: UpdateGameByNodeIdInput
}

export type UpdateGameByNodeIdMutation = { __typename: 'Mutation' } & {
  updateGameByNodeId: Maybe<
    { __typename: 'UpdateGamePayload' } & { game: Maybe<{ __typename: 'Game' } & GameFieldsFragment & GameGmsFragment> }
  >
}

export type CreateGameMutationVariables = {
  input: CreateGameInput
}

export type CreateGameMutation = { __typename: 'Mutation' } & {
  createGame: Maybe<
    { __typename: 'CreateGamePayload' } & { game: Maybe<{ __typename: 'Game' } & GameFieldsFragment & GameGmsFragment> }
  >
}

export type DeleteGameMutationVariables = {
  input: DeleteGameInput
}

export type DeleteGameMutation = { __typename: 'Mutation' } & {
  deleteGame: Maybe<
    { __typename: 'DeleteGamePayload' } & Pick<DeleteGamePayload, 'clientMutationId' | 'deletedGameNodeId'>
  >
}

export type GetFirstGameOfSlotQueryVariables = {
  year: Scalars['Int']
}

export type GetFirstGameOfSlotQuery = { __typename: 'Query' } & {
  games: Maybe<
    { __typename: 'GamesConnection' } & {
      nodes: Array<
        Maybe<
          { __typename: 'Game' } & {
            gameAssignments: { __typename: 'GameAssignmentsConnection' } & {
              nodes: Array<
                Maybe<
                  { __typename: 'GameAssignment' } & Pick<GameAssignment, 'nodeId' | 'gm'> & {
                      member: Maybe<
                        { __typename: 'Membership' } & {
                          user: Maybe<
                            { __typename: 'User' } & {
                              profile: Maybe<{ __typename: 'Profile' } & ProfileFieldsFragment>
                            }
                          >
                        }
                      >
                    }
                >
              >
            }
          } & GameFieldsFragment
        >
      >
    }
  >
}

export type GameFieldsFragment = { __typename: 'Game' } & Pick<
  Game,
  | 'nodeId'
  | 'id'
  | 'name'
  | 'gmNames'
  | 'description'
  | 'genre'
  | 'type'
  | 'setting'
  | 'charInstructions'
  | 'playerMax'
  | 'playerMin'
  | 'playerPreference'
  | 'returningPlayers'
  | 'playersContactGm'
  | 'gameContactEmail'
  | 'estimatedLength'
  | 'slotPreference'
  | 'lateStart'
  | 'lateFinish'
  | 'slotConflicts'
  | 'message'
  | 'slotId'
  | 'teenFriendly'
  | 'year'
>

export type GameGmsFragment = { __typename: 'Game' } & {
  gameAssignments: { __typename: 'GameAssignmentsConnection' } & {
    nodes: Array<
      Maybe<
        { __typename: 'GameAssignment' } & Pick<GameAssignment, 'nodeId' | 'gm'> & {
            member: Maybe<
              { __typename: 'Membership' } & {
                user: Maybe<
                  { __typename: 'User' } & { profile: Maybe<{ __typename: 'Profile' } & ProfileFieldsFragment> }
                >
              }
            >
          }
      >
    >
  }
}

export type LookupFieldsFragment = { __typename: 'Lookup' } & Pick<Lookup, 'nodeId' | 'id' | 'realm'>

export type LookupValuesFieldsFragment = { __typename: 'LookupValue' } & Pick<
  LookupValue,
  'nodeId' | 'id' | 'code' | 'sequencer' | 'value'
>

export type GetLookupsQueryVariables = {}

export type GetLookupsQuery = { __typename: 'Query' } & {
  lookups: Maybe<
    { __typename: 'LookupsConnection' } & {
      edges: Array<
        { __typename: 'LookupsEdge' } & {
          node: Maybe<
            { __typename: 'Lookup' } & {
              lookupValues: { __typename: 'LookupValuesConnection' } & {
                nodes: Array<Maybe<{ __typename: 'LookupValue' } & LookupValuesFieldsFragment>>
              }
            } & LookupFieldsFragment
          >
        }
      >
    }
  >
}

export type GetLookupValuesQueryVariables = {
  realm: Scalars['String']
}

export type GetLookupValuesQuery = { __typename: 'Query' } & {
  lookups: Maybe<
    { __typename: 'LookupsConnection' } & {
      edges: Array<
        { __typename: 'LookupsEdge' } & {
          node: Maybe<
            { __typename: 'Lookup' } & {
              lookupValues: { __typename: 'LookupValuesConnection' } & {
                nodes: Array<Maybe<{ __typename: 'LookupValue' } & LookupValuesFieldsFragment>>
              }
            } & LookupFieldsFragment
          >
        }
      >
    }
  >
}

export type GetSingleLookupValueQueryVariables = {
  realm: Scalars['String']
  code: Scalars['String']
}

export type GetSingleLookupValueQuery = { __typename: 'Query' } & {
  lookups: Maybe<
    { __typename: 'LookupsConnection' } & {
      edges: Array<
        { __typename: 'LookupsEdge' } & {
          node: Maybe<
            { __typename: 'Lookup' } & {
              lookupValues: { __typename: 'LookupValuesConnection' } & {
                nodes: Array<Maybe<{ __typename: 'LookupValue' } & LookupValuesFieldsFragment>>
              }
            } & LookupFieldsFragment
          >
        }
      >
    }
  >
}

export type UpdateLookupByNodeIdMutationVariables = {
  input: UpdateLookupByNodeIdInput
}

export type UpdateLookupByNodeIdMutation = { __typename: 'Mutation' } & {
  updateLookupByNodeId: Maybe<
    { __typename: 'UpdateLookupPayload' } & { lookup: Maybe<{ __typename: 'Lookup' } & LookupFieldsFragment> }
  >
}

export type CreateLookupMutationVariables = {
  input: CreateLookupInput
}

export type CreateLookupMutation = { __typename: 'Mutation' } & {
  createLookup: Maybe<
    { __typename: 'CreateLookupPayload' } & { lookup: Maybe<{ __typename: 'Lookup' } & LookupFieldsFragment> }
  >
}

export type DeleteLookupMutationVariables = {
  input: DeleteLookupInput
}

export type DeleteLookupMutation = { __typename: 'Mutation' } & {
  deleteLookup: Maybe<
    { __typename: 'DeleteLookupPayload' } & Pick<DeleteLookupPayload, 'clientMutationId' | 'deletedLookupNodeId'>
  >
}

export type UpdateLookupValueByNodeIdMutationVariables = {
  input: UpdateLookupValueByNodeIdInput
}

export type UpdateLookupValueByNodeIdMutation = { __typename: 'Mutation' } & {
  updateLookupValueByNodeId: Maybe<
    { __typename: 'UpdateLookupValuePayload' } & {
      lookupValue: Maybe<{ __typename: 'LookupValue' } & LookupValuesFieldsFragment>
    }
  >
}

export type CreateLookupValueMutationVariables = {
  input: CreateLookupValueInput
}

export type CreateLookupValueMutation = { __typename: 'Mutation' } & {
  createLookupValue: Maybe<
    { __typename: 'CreateLookupValuePayload' } & {
      lookupValue: Maybe<{ __typename: 'LookupValue' } & LookupValuesFieldsFragment>
    }
  >
}

export type DeleteLookupValueMutationVariables = {
  input: DeleteLookupValueInput
}

export type DeleteLookupValueMutation = { __typename: 'Mutation' } & {
  deleteLookupValue: Maybe<
    { __typename: 'DeleteLookupValuePayload' } & Pick<
      DeleteLookupValuePayload,
      'clientMutationId' | 'deletedLookupValueNodeId'
    >
  >
}

export type ProfileFieldsFragment = { __typename: 'Profile' } & Pick<
  Profile,
  'nodeId' | 'id' | 'email' | 'fullName' | 'phoneNumber' | 'snailMailAddress'
>

export type GetSlotsQueryVariables = {}

export type GetSlotsQuery = { __typename: 'Query' } & {
  slots: Maybe<{ __typename: 'SlotsConnection' } & { nodes: Array<Maybe<{ __typename: 'Slot' } & SlotFieldsFragment>> }>
}

export type SlotFieldsFragment = { __typename: 'Slot' } & Pick<
  Slot,
  'nodeId' | 'id' | 'slot' | 'day' | 'length' | 'time'
>

export const GameFieldsFragmentDoc = gql`
  fragment gameFields on Game {
    nodeId
    id
    name
    gmNames
    description
    genre
    type
    setting
    charInstructions
    playerMax
    playerMin
    playerPreference
    returningPlayers
    playersContactGm
    gameContactEmail
    estimatedLength
    slotPreference
    lateStart
    lateFinish
    slotConflicts
    message
    slotId
    teenFriendly
    year
  }
`
export const ProfileFieldsFragmentDoc = gql`
  fragment profileFields on Profile {
    nodeId
    id
    email
    fullName
    phoneNumber
    snailMailAddress
  }
`
export const GameGmsFragmentDoc = gql`
  fragment gameGms on Game {
    gameAssignments(filter: { gm: { lessThan: 0 } }) {
      nodes {
        nodeId
        gm
        member {
          user {
            profile {
              ...profileFields
            }
          }
        }
      }
    }
  }
  ${ProfileFieldsFragmentDoc}
`
export const LookupFieldsFragmentDoc = gql`
  fragment lookupFields on Lookup {
    nodeId
    id
    realm
  }
`
export const LookupValuesFieldsFragmentDoc = gql`
  fragment lookupValuesFields on LookupValue {
    nodeId
    id
    code
    sequencer
    value
  }
`
export const SlotFieldsFragmentDoc = gql`
  fragment slotFields on Slot {
    nodeId
    id
    slot
    day
    length
    time
  }
`
export const GetGamesBySlotDocument = gql`
  query GetGamesBySlot($year: Int!, $slotId: Int!) {
    games(condition: { year: $year, slotId: $slotId }, orderBy: [SLOT_ID_ASC, NAME_ASC]) {
      edges {
        node {
          ...gameFields
          ...gameGms
        }
      }
    }
  }
  ${GameFieldsFragmentDoc}
  ${GameGmsFragmentDoc}
`

/**
 * __useGetGamesBySlotQuery__
 *
 * To run a query within a React component, call `useGetGamesBySlotQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetGamesBySlotQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetGamesBySlotQuery({
 *   variables: {
 *      year: // value for 'year'
 *      slotId: // value for 'slotId'
 *   },
 * });
 */
export function useGetGamesBySlotQuery(
  baseOptions?: ApolloReactHooks.QueryHookOptions<GetGamesBySlotQuery, GetGamesBySlotQueryVariables>
) {
  return ApolloReactHooks.useQuery<GetGamesBySlotQuery, GetGamesBySlotQueryVariables>(
    GetGamesBySlotDocument,
    baseOptions
  )
}
export function useGetGamesBySlotLazyQuery(
  baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetGamesBySlotQuery, GetGamesBySlotQueryVariables>
) {
  return ApolloReactHooks.useLazyQuery<GetGamesBySlotQuery, GetGamesBySlotQueryVariables>(
    GetGamesBySlotDocument,
    baseOptions
  )
}
export type GetGamesBySlotQueryHookResult = ReturnType<typeof useGetGamesBySlotQuery>
export type GetGamesBySlotLazyQueryHookResult = ReturnType<typeof useGetGamesBySlotLazyQuery>
export type GetGamesBySlotQueryResult = ApolloReactCommon.QueryResult<GetGamesBySlotQuery, GetGamesBySlotQueryVariables>
export const GetGamesByYearDocument = gql`
  query GetGamesByYear($year: Int!) {
    games(condition: { year: $year }, orderBy: [SLOT_ID_ASC, NAME_ASC]) {
      edges {
        node {
          ...gameFields
          ...gameGms
        }
      }
    }
  }
  ${GameFieldsFragmentDoc}
  ${GameGmsFragmentDoc}
`

/**
 * __useGetGamesByYearQuery__
 *
 * To run a query within a React component, call `useGetGamesByYearQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetGamesByYearQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetGamesByYearQuery({
 *   variables: {
 *      year: // value for 'year'
 *   },
 * });
 */
export function useGetGamesByYearQuery(
  baseOptions?: ApolloReactHooks.QueryHookOptions<GetGamesByYearQuery, GetGamesByYearQueryVariables>
) {
  return ApolloReactHooks.useQuery<GetGamesByYearQuery, GetGamesByYearQueryVariables>(
    GetGamesByYearDocument,
    baseOptions
  )
}
export function useGetGamesByYearLazyQuery(
  baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetGamesByYearQuery, GetGamesByYearQueryVariables>
) {
  return ApolloReactHooks.useLazyQuery<GetGamesByYearQuery, GetGamesByYearQueryVariables>(
    GetGamesByYearDocument,
    baseOptions
  )
}
export type GetGamesByYearQueryHookResult = ReturnType<typeof useGetGamesByYearQuery>
export type GetGamesByYearLazyQueryHookResult = ReturnType<typeof useGetGamesByYearLazyQuery>
export type GetGamesByYearQueryResult = ApolloReactCommon.QueryResult<GetGamesByYearQuery, GetGamesByYearQueryVariables>
export const UpdateGameByNodeIdDocument = gql`
  mutation updateGameByNodeId($input: UpdateGameByNodeIdInput!) {
    updateGameByNodeId(input: $input) {
      game {
        ...gameFields
        ...gameGms
      }
    }
  }
  ${GameFieldsFragmentDoc}
  ${GameGmsFragmentDoc}
`
export type UpdateGameByNodeIdMutationFn = ApolloReactCommon.MutationFunction<
  UpdateGameByNodeIdMutation,
  UpdateGameByNodeIdMutationVariables
>

/**
 * __useUpdateGameByNodeIdMutation__
 *
 * To run a mutation, you first call `useUpdateGameByNodeIdMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateGameByNodeIdMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateGameByNodeIdMutation, { data, loading, error }] = useUpdateGameByNodeIdMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUpdateGameByNodeIdMutation(
  baseOptions?: ApolloReactHooks.MutationHookOptions<UpdateGameByNodeIdMutation, UpdateGameByNodeIdMutationVariables>
) {
  return ApolloReactHooks.useMutation<UpdateGameByNodeIdMutation, UpdateGameByNodeIdMutationVariables>(
    UpdateGameByNodeIdDocument,
    baseOptions
  )
}
export type UpdateGameByNodeIdMutationHookResult = ReturnType<typeof useUpdateGameByNodeIdMutation>
export type UpdateGameByNodeIdMutationResult = ApolloReactCommon.MutationResult<UpdateGameByNodeIdMutation>
export type UpdateGameByNodeIdMutationOptions = ApolloReactCommon.BaseMutationOptions<
  UpdateGameByNodeIdMutation,
  UpdateGameByNodeIdMutationVariables
>
export const CreateGameDocument = gql`
  mutation createGame($input: CreateGameInput!) {
    createGame(input: $input) {
      game {
        ...gameFields
        ...gameGms
      }
    }
  }
  ${GameFieldsFragmentDoc}
  ${GameGmsFragmentDoc}
`
export type CreateGameMutationFn = ApolloReactCommon.MutationFunction<CreateGameMutation, CreateGameMutationVariables>

/**
 * __useCreateGameMutation__
 *
 * To run a mutation, you first call `useCreateGameMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateGameMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createGameMutation, { data, loading, error }] = useCreateGameMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateGameMutation(
  baseOptions?: ApolloReactHooks.MutationHookOptions<CreateGameMutation, CreateGameMutationVariables>
) {
  return ApolloReactHooks.useMutation<CreateGameMutation, CreateGameMutationVariables>(CreateGameDocument, baseOptions)
}
export type CreateGameMutationHookResult = ReturnType<typeof useCreateGameMutation>
export type CreateGameMutationResult = ApolloReactCommon.MutationResult<CreateGameMutation>
export type CreateGameMutationOptions = ApolloReactCommon.BaseMutationOptions<
  CreateGameMutation,
  CreateGameMutationVariables
>
export const DeleteGameDocument = gql`
  mutation deleteGame($input: DeleteGameInput!) {
    deleteGame(input: $input) {
      clientMutationId
      deletedGameNodeId
    }
  }
`
export type DeleteGameMutationFn = ApolloReactCommon.MutationFunction<DeleteGameMutation, DeleteGameMutationVariables>

/**
 * __useDeleteGameMutation__
 *
 * To run a mutation, you first call `useDeleteGameMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteGameMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteGameMutation, { data, loading, error }] = useDeleteGameMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useDeleteGameMutation(
  baseOptions?: ApolloReactHooks.MutationHookOptions<DeleteGameMutation, DeleteGameMutationVariables>
) {
  return ApolloReactHooks.useMutation<DeleteGameMutation, DeleteGameMutationVariables>(DeleteGameDocument, baseOptions)
}
export type DeleteGameMutationHookResult = ReturnType<typeof useDeleteGameMutation>
export type DeleteGameMutationResult = ApolloReactCommon.MutationResult<DeleteGameMutation>
export type DeleteGameMutationOptions = ApolloReactCommon.BaseMutationOptions<
  DeleteGameMutation,
  DeleteGameMutationVariables
>
export const GetFirstGameOfSlotDocument = gql`
  query GetFirstGameOfSlot($year: Int!) {
    games(orderBy: NAME_ASC, condition: { slotId: 1, year: $year }, first: 1) {
      nodes {
        ...gameFields
        gameAssignments(filter: { gm: { lessThan: 0 } }) {
          nodes {
            nodeId
            gm
            member {
              user {
                profile {
                  ...profileFields
                }
              }
            }
          }
        }
      }
    }
  }
  ${GameFieldsFragmentDoc}
  ${ProfileFieldsFragmentDoc}
`

/**
 * __useGetFirstGameOfSlotQuery__
 *
 * To run a query within a React component, call `useGetFirstGameOfSlotQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetFirstGameOfSlotQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetFirstGameOfSlotQuery({
 *   variables: {
 *      year: // value for 'year'
 *   },
 * });
 */
export function useGetFirstGameOfSlotQuery(
  baseOptions?: ApolloReactHooks.QueryHookOptions<GetFirstGameOfSlotQuery, GetFirstGameOfSlotQueryVariables>
) {
  return ApolloReactHooks.useQuery<GetFirstGameOfSlotQuery, GetFirstGameOfSlotQueryVariables>(
    GetFirstGameOfSlotDocument,
    baseOptions
  )
}
export function useGetFirstGameOfSlotLazyQuery(
  baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetFirstGameOfSlotQuery, GetFirstGameOfSlotQueryVariables>
) {
  return ApolloReactHooks.useLazyQuery<GetFirstGameOfSlotQuery, GetFirstGameOfSlotQueryVariables>(
    GetFirstGameOfSlotDocument,
    baseOptions
  )
}
export type GetFirstGameOfSlotQueryHookResult = ReturnType<typeof useGetFirstGameOfSlotQuery>
export type GetFirstGameOfSlotLazyQueryHookResult = ReturnType<typeof useGetFirstGameOfSlotLazyQuery>
export type GetFirstGameOfSlotQueryResult = ApolloReactCommon.QueryResult<
  GetFirstGameOfSlotQuery,
  GetFirstGameOfSlotQueryVariables
>
export const GetLookupsDocument = gql`
  query GetLookups {
    lookups(orderBy: REALM_ASC) {
      edges {
        node {
          ...lookupFields
          lookupValues(orderBy: SEQUENCER_ASC) {
            nodes {
              ...lookupValuesFields
            }
          }
        }
      }
    }
  }
  ${LookupFieldsFragmentDoc}
  ${LookupValuesFieldsFragmentDoc}
`

/**
 * __useGetLookupsQuery__
 *
 * To run a query within a React component, call `useGetLookupsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetLookupsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetLookupsQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetLookupsQuery(
  baseOptions?: ApolloReactHooks.QueryHookOptions<GetLookupsQuery, GetLookupsQueryVariables>
) {
  return ApolloReactHooks.useQuery<GetLookupsQuery, GetLookupsQueryVariables>(GetLookupsDocument, baseOptions)
}
export function useGetLookupsLazyQuery(
  baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetLookupsQuery, GetLookupsQueryVariables>
) {
  return ApolloReactHooks.useLazyQuery<GetLookupsQuery, GetLookupsQueryVariables>(GetLookupsDocument, baseOptions)
}
export type GetLookupsQueryHookResult = ReturnType<typeof useGetLookupsQuery>
export type GetLookupsLazyQueryHookResult = ReturnType<typeof useGetLookupsLazyQuery>
export type GetLookupsQueryResult = ApolloReactCommon.QueryResult<GetLookupsQuery, GetLookupsQueryVariables>
export const GetLookupValuesDocument = gql`
  query GetLookupValues($realm: String!) {
    lookups(condition: { realm: $realm }) {
      edges {
        node {
          ...lookupFields
          lookupValues(orderBy: VALUE_ASC) {
            nodes {
              ...lookupValuesFields
            }
          }
        }
      }
    }
  }
  ${LookupFieldsFragmentDoc}
  ${LookupValuesFieldsFragmentDoc}
`

/**
 * __useGetLookupValuesQuery__
 *
 * To run a query within a React component, call `useGetLookupValuesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetLookupValuesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetLookupValuesQuery({
 *   variables: {
 *      realm: // value for 'realm'
 *   },
 * });
 */
export function useGetLookupValuesQuery(
  baseOptions?: ApolloReactHooks.QueryHookOptions<GetLookupValuesQuery, GetLookupValuesQueryVariables>
) {
  return ApolloReactHooks.useQuery<GetLookupValuesQuery, GetLookupValuesQueryVariables>(
    GetLookupValuesDocument,
    baseOptions
  )
}
export function useGetLookupValuesLazyQuery(
  baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetLookupValuesQuery, GetLookupValuesQueryVariables>
) {
  return ApolloReactHooks.useLazyQuery<GetLookupValuesQuery, GetLookupValuesQueryVariables>(
    GetLookupValuesDocument,
    baseOptions
  )
}
export type GetLookupValuesQueryHookResult = ReturnType<typeof useGetLookupValuesQuery>
export type GetLookupValuesLazyQueryHookResult = ReturnType<typeof useGetLookupValuesLazyQuery>
export type GetLookupValuesQueryResult = ApolloReactCommon.QueryResult<
  GetLookupValuesQuery,
  GetLookupValuesQueryVariables
>
export const GetSingleLookupValueDocument = gql`
  query GetSingleLookupValue($realm: String!, $code: String!) {
    lookups(condition: { realm: $realm }) {
      edges {
        node {
          ...lookupFields
          lookupValues(condition: { code: $code }) {
            nodes {
              ...lookupValuesFields
            }
          }
        }
      }
    }
  }
  ${LookupFieldsFragmentDoc}
  ${LookupValuesFieldsFragmentDoc}
`

/**
 * __useGetSingleLookupValueQuery__
 *
 * To run a query within a React component, call `useGetSingleLookupValueQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetSingleLookupValueQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetSingleLookupValueQuery({
 *   variables: {
 *      realm: // value for 'realm'
 *      code: // value for 'code'
 *   },
 * });
 */
export function useGetSingleLookupValueQuery(
  baseOptions?: ApolloReactHooks.QueryHookOptions<GetSingleLookupValueQuery, GetSingleLookupValueQueryVariables>
) {
  return ApolloReactHooks.useQuery<GetSingleLookupValueQuery, GetSingleLookupValueQueryVariables>(
    GetSingleLookupValueDocument,
    baseOptions
  )
}
export function useGetSingleLookupValueLazyQuery(
  baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetSingleLookupValueQuery, GetSingleLookupValueQueryVariables>
) {
  return ApolloReactHooks.useLazyQuery<GetSingleLookupValueQuery, GetSingleLookupValueQueryVariables>(
    GetSingleLookupValueDocument,
    baseOptions
  )
}
export type GetSingleLookupValueQueryHookResult = ReturnType<typeof useGetSingleLookupValueQuery>
export type GetSingleLookupValueLazyQueryHookResult = ReturnType<typeof useGetSingleLookupValueLazyQuery>
export type GetSingleLookupValueQueryResult = ApolloReactCommon.QueryResult<
  GetSingleLookupValueQuery,
  GetSingleLookupValueQueryVariables
>
export const UpdateLookupByNodeIdDocument = gql`
  mutation updateLookupByNodeId($input: UpdateLookupByNodeIdInput!) {
    updateLookupByNodeId(input: $input) {
      lookup {
        ...lookupFields
      }
    }
  }
  ${LookupFieldsFragmentDoc}
`
export type UpdateLookupByNodeIdMutationFn = ApolloReactCommon.MutationFunction<
  UpdateLookupByNodeIdMutation,
  UpdateLookupByNodeIdMutationVariables
>

/**
 * __useUpdateLookupByNodeIdMutation__
 *
 * To run a mutation, you first call `useUpdateLookupByNodeIdMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateLookupByNodeIdMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateLookupByNodeIdMutation, { data, loading, error }] = useUpdateLookupByNodeIdMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUpdateLookupByNodeIdMutation(
  baseOptions?: ApolloReactHooks.MutationHookOptions<
    UpdateLookupByNodeIdMutation,
    UpdateLookupByNodeIdMutationVariables
  >
) {
  return ApolloReactHooks.useMutation<UpdateLookupByNodeIdMutation, UpdateLookupByNodeIdMutationVariables>(
    UpdateLookupByNodeIdDocument,
    baseOptions
  )
}
export type UpdateLookupByNodeIdMutationHookResult = ReturnType<typeof useUpdateLookupByNodeIdMutation>
export type UpdateLookupByNodeIdMutationResult = ApolloReactCommon.MutationResult<UpdateLookupByNodeIdMutation>
export type UpdateLookupByNodeIdMutationOptions = ApolloReactCommon.BaseMutationOptions<
  UpdateLookupByNodeIdMutation,
  UpdateLookupByNodeIdMutationVariables
>
export const CreateLookupDocument = gql`
  mutation createLookup($input: CreateLookupInput!) {
    createLookup(input: $input) {
      lookup {
        ...lookupFields
      }
    }
  }
  ${LookupFieldsFragmentDoc}
`
export type CreateLookupMutationFn = ApolloReactCommon.MutationFunction<
  CreateLookupMutation,
  CreateLookupMutationVariables
>

/**
 * __useCreateLookupMutation__
 *
 * To run a mutation, you first call `useCreateLookupMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateLookupMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createLookupMutation, { data, loading, error }] = useCreateLookupMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateLookupMutation(
  baseOptions?: ApolloReactHooks.MutationHookOptions<CreateLookupMutation, CreateLookupMutationVariables>
) {
  return ApolloReactHooks.useMutation<CreateLookupMutation, CreateLookupMutationVariables>(
    CreateLookupDocument,
    baseOptions
  )
}
export type CreateLookupMutationHookResult = ReturnType<typeof useCreateLookupMutation>
export type CreateLookupMutationResult = ApolloReactCommon.MutationResult<CreateLookupMutation>
export type CreateLookupMutationOptions = ApolloReactCommon.BaseMutationOptions<
  CreateLookupMutation,
  CreateLookupMutationVariables
>
export const DeleteLookupDocument = gql`
  mutation deleteLookup($input: DeleteLookupInput!) {
    deleteLookup(input: $input) {
      clientMutationId
      deletedLookupNodeId
    }
  }
`
export type DeleteLookupMutationFn = ApolloReactCommon.MutationFunction<
  DeleteLookupMutation,
  DeleteLookupMutationVariables
>

/**
 * __useDeleteLookupMutation__
 *
 * To run a mutation, you first call `useDeleteLookupMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteLookupMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteLookupMutation, { data, loading, error }] = useDeleteLookupMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useDeleteLookupMutation(
  baseOptions?: ApolloReactHooks.MutationHookOptions<DeleteLookupMutation, DeleteLookupMutationVariables>
) {
  return ApolloReactHooks.useMutation<DeleteLookupMutation, DeleteLookupMutationVariables>(
    DeleteLookupDocument,
    baseOptions
  )
}
export type DeleteLookupMutationHookResult = ReturnType<typeof useDeleteLookupMutation>
export type DeleteLookupMutationResult = ApolloReactCommon.MutationResult<DeleteLookupMutation>
export type DeleteLookupMutationOptions = ApolloReactCommon.BaseMutationOptions<
  DeleteLookupMutation,
  DeleteLookupMutationVariables
>
export const UpdateLookupValueByNodeIdDocument = gql`
  mutation updateLookupValueByNodeId($input: UpdateLookupValueByNodeIdInput!) {
    updateLookupValueByNodeId(input: $input) {
      lookupValue {
        ...lookupValuesFields
      }
    }
  }
  ${LookupValuesFieldsFragmentDoc}
`
export type UpdateLookupValueByNodeIdMutationFn = ApolloReactCommon.MutationFunction<
  UpdateLookupValueByNodeIdMutation,
  UpdateLookupValueByNodeIdMutationVariables
>

/**
 * __useUpdateLookupValueByNodeIdMutation__
 *
 * To run a mutation, you first call `useUpdateLookupValueByNodeIdMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateLookupValueByNodeIdMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateLookupValueByNodeIdMutation, { data, loading, error }] = useUpdateLookupValueByNodeIdMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUpdateLookupValueByNodeIdMutation(
  baseOptions?: ApolloReactHooks.MutationHookOptions<
    UpdateLookupValueByNodeIdMutation,
    UpdateLookupValueByNodeIdMutationVariables
  >
) {
  return ApolloReactHooks.useMutation<UpdateLookupValueByNodeIdMutation, UpdateLookupValueByNodeIdMutationVariables>(
    UpdateLookupValueByNodeIdDocument,
    baseOptions
  )
}
export type UpdateLookupValueByNodeIdMutationHookResult = ReturnType<typeof useUpdateLookupValueByNodeIdMutation>
export type UpdateLookupValueByNodeIdMutationResult = ApolloReactCommon.MutationResult<
  UpdateLookupValueByNodeIdMutation
>
export type UpdateLookupValueByNodeIdMutationOptions = ApolloReactCommon.BaseMutationOptions<
  UpdateLookupValueByNodeIdMutation,
  UpdateLookupValueByNodeIdMutationVariables
>
export const CreateLookupValueDocument = gql`
  mutation createLookupValue($input: CreateLookupValueInput!) {
    createLookupValue(input: $input) {
      lookupValue {
        ...lookupValuesFields
      }
    }
  }
  ${LookupValuesFieldsFragmentDoc}
`
export type CreateLookupValueMutationFn = ApolloReactCommon.MutationFunction<
  CreateLookupValueMutation,
  CreateLookupValueMutationVariables
>

/**
 * __useCreateLookupValueMutation__
 *
 * To run a mutation, you first call `useCreateLookupValueMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateLookupValueMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createLookupValueMutation, { data, loading, error }] = useCreateLookupValueMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateLookupValueMutation(
  baseOptions?: ApolloReactHooks.MutationHookOptions<CreateLookupValueMutation, CreateLookupValueMutationVariables>
) {
  return ApolloReactHooks.useMutation<CreateLookupValueMutation, CreateLookupValueMutationVariables>(
    CreateLookupValueDocument,
    baseOptions
  )
}
export type CreateLookupValueMutationHookResult = ReturnType<typeof useCreateLookupValueMutation>
export type CreateLookupValueMutationResult = ApolloReactCommon.MutationResult<CreateLookupValueMutation>
export type CreateLookupValueMutationOptions = ApolloReactCommon.BaseMutationOptions<
  CreateLookupValueMutation,
  CreateLookupValueMutationVariables
>
export const DeleteLookupValueDocument = gql`
  mutation deleteLookupValue($input: DeleteLookupValueInput!) {
    deleteLookupValue(input: $input) {
      clientMutationId
      deletedLookupValueNodeId
    }
  }
`
export type DeleteLookupValueMutationFn = ApolloReactCommon.MutationFunction<
  DeleteLookupValueMutation,
  DeleteLookupValueMutationVariables
>

/**
 * __useDeleteLookupValueMutation__
 *
 * To run a mutation, you first call `useDeleteLookupValueMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteLookupValueMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteLookupValueMutation, { data, loading, error }] = useDeleteLookupValueMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useDeleteLookupValueMutation(
  baseOptions?: ApolloReactHooks.MutationHookOptions<DeleteLookupValueMutation, DeleteLookupValueMutationVariables>
) {
  return ApolloReactHooks.useMutation<DeleteLookupValueMutation, DeleteLookupValueMutationVariables>(
    DeleteLookupValueDocument,
    baseOptions
  )
}
export type DeleteLookupValueMutationHookResult = ReturnType<typeof useDeleteLookupValueMutation>
export type DeleteLookupValueMutationResult = ApolloReactCommon.MutationResult<DeleteLookupValueMutation>
export type DeleteLookupValueMutationOptions = ApolloReactCommon.BaseMutationOptions<
  DeleteLookupValueMutation,
  DeleteLookupValueMutationVariables
>
export const GetSlotsDocument = gql`
  query GetSlots {
    slots {
      nodes {
        ...slotFields
      }
    }
  }
  ${SlotFieldsFragmentDoc}
`

/**
 * __useGetSlotsQuery__
 *
 * To run a query within a React component, call `useGetSlotsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetSlotsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetSlotsQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetSlotsQuery(
  baseOptions?: ApolloReactHooks.QueryHookOptions<GetSlotsQuery, GetSlotsQueryVariables>
) {
  return ApolloReactHooks.useQuery<GetSlotsQuery, GetSlotsQueryVariables>(GetSlotsDocument, baseOptions)
}
export function useGetSlotsLazyQuery(
  baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetSlotsQuery, GetSlotsQueryVariables>
) {
  return ApolloReactHooks.useLazyQuery<GetSlotsQuery, GetSlotsQueryVariables>(GetSlotsDocument, baseOptions)
}
export type GetSlotsQueryHookResult = ReturnType<typeof useGetSlotsQuery>
export type GetSlotsLazyQueryHookResult = ReturnType<typeof useGetSlotsLazyQuery>
export type GetSlotsQueryResult = ApolloReactCommon.QueryResult<GetSlotsQuery, GetSlotsQueryVariables>
