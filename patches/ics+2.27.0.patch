diff --git a/node_modules/ics/dist/schema/index.js b/node_modules/ics/dist/schema/index.js
index 153267b..4a7425e 100644
--- a/node_modules/ics/dist/schema/index.js
+++ b/node_modules/ics/dist/schema/index.js
@@ -1,105 +1,114 @@
 "use strict";
 
+function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }
+
 Object.defineProperty(exports, "__esModule", {
   value: true
 });
 exports["default"] = validateEvent;
 
-var _joi = _interopRequireDefault(require("joi"));
+var yup = _interopRequireWildcard(require("yup"));
 
-function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
+function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }
 
-var dateTimeSchema = _joi["default"].array().min(3).max(7).ordered(_joi["default"].number().integer(), _joi["default"].number().integer().min(1).max(12), _joi["default"].number().integer().min(1).max(31), _joi["default"].number().integer().min(0).max(23), _joi["default"].number().integer().min(0).max(60), _joi["default"].number().integer().min(0).max(60));
+function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
 
-var durationSchema = _joi["default"].object().keys({
-  before: _joi["default"]["boolean"](),
+// taken from https://github.com/jquense/yup/issues/224#issuecomment-417172609
+// This does mean that the url validation error is
+// "url must match the following: ...." as opposed to "url must be a valid URL"
+var urlRegex = /^(?:([a-z0-9+.-]+):\/\/)(?:\S+(?::\S*)?@)?(?:(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)(?:\.(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)*\.?)(?::\d{2,5})?(?:[/?#]\S*)?$/;
+var dateTimeSchema = yup.array().min(3).max(7).of(yup.lazy(function (item, options) {
+  var itemIndex = parseInt(options.path.match(/.*\[(\d+)]/)[1]);
+  return [yup.number().integer(), yup.number().integer().min(1).max(12), yup.number().integer().min(1).max(31), yup.number().integer().min(0).max(23), yup.number().integer().min(0).max(60), yup.number().integer().min(0).max(60)][itemIndex];
+}));
+var durationSchema = yup.object().shape({
+  before: yup["boolean"](),
   //option to set before alaram
-  weeks: _joi["default"].number(),
-  days: _joi["default"].number(),
-  hours: _joi["default"].number(),
-  minutes: _joi["default"].number(),
-  seconds: _joi["default"].number()
-});
-
-var contactSchema = _joi["default"].object().keys({
-  name: _joi["default"].string(),
-  email: _joi["default"].string().email({
-    tlds: {
-      allow: false
-    }
-  }),
-  rsvp: _joi["default"]["boolean"](),
-  dir: _joi["default"].string().uri(),
-  partstat: _joi["default"].string(),
-  role: _joi["default"].string()
-});
-
-var organizerSchema = _joi["default"].object().keys({
-  name: _joi["default"].string(),
-  email: _joi["default"].string().email({
-    tlds: {
-      allow: false
-    }
-  })
-});
-
-var alarmSchema = _joi["default"].object().keys({
-  action: _joi["default"].string().regex(/audio|display|email/).required(),
-  trigger: _joi["default"].any().required(),
-  description: _joi["default"].string(),
+  weeks: yup.number(),
+  days: yup.number(),
+  hours: yup.number(),
+  minutes: yup.number(),
+  seconds: yup.number()
+}).noUnknown();
+var contactSchema = yup.object().shape({
+  name: yup.string(),
+  email: yup.string().email(),
+  rsvp: yup["boolean"](),
+  dir: yup.string().matches(urlRegex),
+  partstat: yup.string(),
+  role: yup.string()
+}).noUnknown();
+var organizerSchema = yup.object().shape({
+  name: yup.string(),
+  email: yup.string().email()
+}).noUnknown();
+var alarmSchema = yup.object().shape({
+  action: yup.string().matches(/audio|display|email/).required(),
+  trigger: yup.mixed().required(),
+  description: yup.string(),
   duration: durationSchema,
-  repeat: _joi["default"].number(),
-  attach: _joi["default"].string(),
-  attachType: _joi["default"].string(),
-  summary: _joi["default"].string(),
+  repeat: yup.number(),
+  attach: yup.string(),
+  attachType: yup.string(),
+  summary: yup.string(),
   attendee: contactSchema,
-  'x-prop': _joi["default"].any(),
-  'iana-prop': _joi["default"].any()
-});
-
-var schema = _joi["default"].object().keys({
-  summary: _joi["default"].string(),
-  timestamp: _joi["default"].any(),
-  title: _joi["default"].string(),
-  productId: _joi["default"].string(),
-  method: _joi["default"].string(),
-  uid: _joi["default"].string().required(),
-  sequence: _joi["default"].number(),
+  'x-prop': yup.mixed(),
+  'iana-prop': yup.mixed()
+}).noUnknown();
+var schema = yup.object().shape({
+  summary: yup.string(),
+  timestamp: yup.mixed(),
+  title: yup.string(),
+  productId: yup.string(),
+  method: yup.string(),
+  uid: yup.string().required(),
+  sequence: yup.number(),
   start: dateTimeSchema.required(),
   duration: durationSchema,
-  startType: _joi["default"].string().regex(/utc|local/),
-  startInputType: _joi["default"].string().regex(/utc|local/),
-  startOutputType: _joi["default"].string().regex(/utc|local/),
+  startType: yup.string().matches(/utc|local/),
+  startInputType: yup.string().matches(/utc|local/),
+  startOutputType: yup.string().matches(/utc|local/),
   end: dateTimeSchema,
-  endInputType: _joi["default"].string().regex(/utc|local/),
-  endOutputType: _joi["default"].string().regex(/utc|local/),
-  description: _joi["default"].string(),
-  url: _joi["default"].string().uri(),
-  geo: _joi["default"].object().keys({
-    lat: _joi["default"].number(),
-    lon: _joi["default"].number()
+  endInputType: yup.string().matches(/utc|local/),
+  endOutputType: yup.string().matches(/utc|local/),
+  description: yup.string(),
+  url: yup.string().matches(urlRegex),
+  geo: yup.object().shape({
+    lat: yup.number(),
+    lon: yup.number()
   }),
-  location: _joi["default"].string(),
-  status: _joi["default"].string().regex(/TENTATIVE|CANCELLED|CONFIRMED/),
-  categories: _joi["default"].array().items(_joi["default"].string()),
+  location: yup.string(),
+  status: yup.string().matches(/TENTATIVE|CANCELLED|CONFIRMED/i),
+  categories: yup.array().of(yup.string()),
   organizer: organizerSchema,
-  attendees: _joi["default"].array().items(contactSchema),
-  alarms: _joi["default"].array().items(alarmSchema),
-  recurrenceRule: _joi["default"].string(),
-  busyStatus: _joi["default"].string().regex(/TENTATIVE|FREE|BUSY|OOF/),
+  attendees: yup.array().of(contactSchema),
+  alarms: yup.array().of(alarmSchema),
+  recurrenceRule: yup.string(),
+  busyStatus: yup.string().matches(/TENTATIVE|FREE|BUSY|OOF/i),
   created: dateTimeSchema,
   lastModified: dateTimeSchema,
-  calName: _joi["default"].string()
-}).xor('end', 'duration');
+  calName: yup.string()
+}).test('xor', "object should have end or duration", function (val) {
+  var hasEnd = !!val.end;
+  var hasDuration = !!val.duration;
+  return hasEnd && !hasDuration || !hasEnd && hasDuration || !hasEnd && !hasDuration;
+}).noUnknown();
 
 function validateEvent(candidate) {
-  var _schema$validate = schema.validate(candidate),
-      _schema$validate$erro = _schema$validate.error,
-      error = _schema$validate$erro === void 0 ? null : _schema$validate$erro,
-      value = _schema$validate.value;
-
-  return {
-    error: error,
-    value: value
-  };
+  try {
+    var value = schema.validateSync(candidate, {
+      abortEarly: false,
+      strict: true
+    });
+    return {
+      error: null,
+      value: value
+    };
+  } catch (error) {
+    // console.log(`error = ${JSON.stringify(error, null, 2)}`)
+    return {
+      error: error,
+      value: undefined
+    };
+  }
 }
\ No newline at end of file
